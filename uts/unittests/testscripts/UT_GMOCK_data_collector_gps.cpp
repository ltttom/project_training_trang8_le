/*
 * test script file generated by uts
 */

#include "gtest/gtest.h"
#include "gmock/gmock.h"
#include <dlfcn.h>

#define private public

#pragma GCC push_options
#pragma GCC optimize("O0")
#pragma GCC optimize("-fno-inline")
// Include Source File for testing!!
#include "../src/data/data_collector_gps.cpp"
#pragma GCC pop_options
using namespace android;
using namespace oc;
using namespace cv;
DLT_DECLARE_CONTEXT(ctxOEMCall);
#include "mock/src/utils/utils_common_mock.h"
#include "mock/service/android_service_mock.h"
#include "mock/service/ILocationManager_mock.h"


// Include MOCK FILES!!
// #include "mock/directory/filename_mock.h"

/*
 * Define Mock Class / function
*/
class Base_GPSCollector {
public:
    virtual ~Base_GPSCollector(){ }
};

class Mock_GPSCollector : public Base_GPSCollector {
public:
};

Mock_GPSCollector *M_GPSCollector;

using ::testing::Return;
using ::testing::_;
using ::testing::A;
using ::testing::ReturnRef;
using ::testing::Values;
using ::testing::SetArgPointee;
using ::testing::SetArrayArgument;
using ::testing::SaveArg;
using ::testing::SaveArgPointee;
using ::testing::DoAll;
using ::testing::Args;
using ::testing::AllOf;
using ::testing::AtLeast;
using ::testing::Combine;
bool Bypass = true;
class GPSCollectorTest : public ::testing::Test {
protected:
    virtual void SetUp(){
        M_GPSCollector = new Mock_GPSCollector();
        M_Common = new MockCommon();
        M_Location = new MockLocation();
        M_MockAndroidService = new MockAndroidService();
    }
    virtual void TearDown(){
        delete M_GPSCollector;
        delete M_Common;
        delete M_Location;
        delete M_MockAndroidService;
    }
};




class data_collector_gpsTest : public ::testing::Test {
protected:
    virtual void SetUp(){
        M_GPSCollector = new Mock_GPSCollector();
        M_Common = new MockCommon();
        M_Location = new MockLocation();
        M_MockAndroidService = new MockAndroidService();
    }
    virtual void TearDown(){
        delete M_GPSCollector;
        delete M_Common;
        delete M_Location;
        delete M_MockAndroidService;
    }
};


/**
 *   @brief This is a test script for the GPSCollector_GPSCollector function
 *   @classID GPSCollector
 *   @methodID GPSCollector
 *   @paramList Type type
 *   @priority P2
 *   @resolution_Method
 *   @test_condition
 *   @test_Coverage_Item
 *   @test_case_ID GPSCollectorTest_GPSCollector_TC001
 *   @test_type functionality
 *   @test_objective
 *   @test_precon
 *   @test_input
 *   @test_expected_result
 *   @test_module
 *   @design_id
 */
TEST_F(GPSCollectorTest, GPSCollector_GPSCollector_TC001){
// Please enable and make test code here!!
#if 1
    // Please check source file, make mock files and insert EXPECT_CALL for callee functions.
    GPSCollector testObj;
    EXPECT_EQ(Bypass, true);
#endif
}



/**
 *   @brief This is a test script for the data_collector_gps_getLocationMgrService function
 *   @classID data_collector_gps
 *   @methodID getLocationMgrService
 *   @paramList Type type
 *   @priority P2
 *   @resolution_Method
 *   @test_condition
 *   @test_Coverage_Item
 *   @test_case_ID data_collector_gpsTest_getLocationMgrService_TC001
 *   @test_type functionality
 *   @test_objective
 *   @test_precon
 *   @test_input
 *   @test_expected_result
 *   @test_module
 *   @design_id
 */
TEST_F(data_collector_gpsTest, data_collector_gps_getLocationMgrService_TC001){
// Please enable and make test code here!!
#if 1
    // Please check source file, make mock files and insert EXPECT_CALL for callee functions.
    GPSCollector *testObj = new GPSCollector();
    sp<LocationData> locData = new LocationData();
    ITest_ServiceManager *ret1 = new ITest_ServiceManager();
    ON_CALL(*M_MockAndroidService, defaultServiceManager()).WillByDefault(Return(ret1));
    LocationManagerService *ret2 = new LocationManagerService();
    ON_CALL(*M_MockAndroidService, getService(_)).WillByDefault(Return(ret2));
    std::string str = "";
    EXPECT_CALL(*M_Common, convertTime(_)).WillRepeatedly(Return(str));
    EXPECT_CALL(*M_Location, IsLocationDataAvailable()).WillRepeatedly(Return(1));
    EXPECT_CALL(*M_Location, getLocationData(_)).WillRepeatedly(DoAll(testing::SetArgReferee<0>(locData), Return(E_OK)));
    testObj->impl_->getLocationMgrService();
    EXPECT_EQ(Bypass, true);
#endif
}

/**
 *   @brief This is a test script for the GPSCollector_collect function
 *   @classID GPSCollector
 *   @methodID collect
 *   @paramList Type type
 *   @priority P2
 *   @resolution_Method
 *   @test_condition
 *   @test_Coverage_Item
 *   @test_case_ID GPSCollectorTest_collect_TC001
 *   @test_type functionality
 *   @test_objective
 *   @test_precon
 *   @test_input
 *   @test_expected_result
 *   @test_module
 *   @design_id
 */
TEST_F(GPSCollectorTest, GPSCollector_collect_TC001){
// Please enable and make test code here!!
#if 1
    // Please check source file, make mock files and insert EXPECT_CALL for callee functions.
    EXPECT_EQ(Bypass, true);
    GPSCollector testObj;
    sp<LocationData> locData = new LocationData();
    ITest_ServiceManager *ret1 = new ITest_ServiceManager();
    ON_CALL(*M_MockAndroidService, defaultServiceManager()).WillByDefault(Return(ret1));
    LocationManagerService *ret2 = new LocationManagerService();
    ON_CALL(*M_MockAndroidService, getService(_)).WillByDefault(Return(ret2));
    std::string str = "";
    EXPECT_CALL(*M_Common, convertTime(_)).WillRepeatedly(Return(str));
    EXPECT_CALL(*M_Location, IsLocationDataAvailable()).WillRepeatedly(Return(1));
    EXPECT_CALL(*M_Location, getLocationData(_)).WillRepeatedly(DoAll(testing::SetArgReferee<0>(locData), Return(E_OK)));

    testObj.collect(oc::GPSCollector::Type::ACN);
    EXPECT_EQ(Bypass, true);
#endif
}

/**
 *   @brief This is a test script for the GPSCollector_collect function
 *   @classID GPSCollector
 *   @methodID collect
 *   @paramList Type type
 *   @priority P2
 *   @resolution_Method
 *   @test_condition
 *   @test_Coverage_Item
 *   @test_case_ID GPSCollectorTest_collect_TC002
 *   @test_type functionality
 *   @test_objective
 *   @test_precon
 *   @test_input
 *   @test_expected_result
 *   @test_module
 *   @design_id
 */
TEST_F(GPSCollectorTest, GPSCollector_collect_TC002){
// Please enable and make test code here!!
#if 1
    // Please check source file, make mock files and insert EXPECT_CALL for callee functions.
    EXPECT_EQ(Bypass, true);
    GPSCollector testObj;
    sp<LocationData> locData = new LocationData();
    ITest_ServiceManager *ret1 = new ITest_ServiceManager();
    ON_CALL(*M_MockAndroidService, defaultServiceManager()).WillByDefault(Return(ret1));
    LocationManagerService *ret2 = new LocationManagerService();
    ON_CALL(*M_MockAndroidService, getService(_)).WillByDefault(Return(ret2));
    std::string str = "";
    EXPECT_CALL(*M_Common, convertTime(_)).WillRepeatedly(Return(str));
    EXPECT_CALL(*M_Location, IsLocationDataAvailable()).WillRepeatedly(Return(0));
    EXPECT_CALL(*M_Location, getLocationData(_)).WillRepeatedly(DoAll(testing::SetArgReferee<0>(locData), Return(E_OK)));
     EXPECT_CALL(*M_Location, LocationLgeGnssCmd(_,_,_)).WillRepeatedly(Return(1));
    testObj.collect(oc::GPSCollector::Type::ACN);
    EXPECT_EQ(Bypass, true);
#endif
}

/**
 *   @brief This is a test script for the GPSCollector_collect function
 *   @classID GPSCollector
 *   @methodID collect
 *   @paramList Type type
 *   @priority P2
 *   @resolution_Method
 *   @test_condition
 *   @test_Coverage_Item
 *   @test_case_ID GPSCollectorTest_collect_TC003
 *   @test_type functionality
 *   @test_objective
 *   @test_precon
 *   @test_input
 *   @test_expected_result
 *   @test_module
 *   @design_id
 */
TEST_F(GPSCollectorTest, GPSCollector_collect_TC003){
// Please enable and make test code here!!
#if 1
    // Please check source file, make mock files and insert EXPECT_CALL for callee functions.
    EXPECT_EQ(Bypass, true);
    GPSCollector testObj;
    sp<LocationData> locData = new LocationData();
    ITest_ServiceManager *ret1 = new ITest_ServiceManager();
    ON_CALL(*M_MockAndroidService, defaultServiceManager()).WillByDefault(Return(ret1));
    LocationManagerService *ret2 = new LocationManagerService();
    ON_CALL(*M_MockAndroidService, getService(_)).WillByDefault(Return(ret2));
    std::string str = "";
    EXPECT_CALL(*M_Common, convertTime(_)).WillRepeatedly(Return(str));
    EXPECT_CALL(*M_Location, IsLocationDataAvailable()).WillRepeatedly(Return(0));
    EXPECT_CALL(*M_Location, getLocationData(_)).WillRepeatedly(DoAll(testing::SetArgReferee<0>(locData), Return(E_OK)));
    uint32_t rsp_value = oc::GPSCollector::PREFERRED_MODE::PREFER_ICB_POS;
    EXPECT_CALL(*M_Location, LocationLgeGnssCmd(_,_,_)).WillRepeatedly(::testing::Invoke([&](uint32_t cmdType, uint32_t value, uint32_t *resp_value) {
        *resp_value = rsp_value;
        return 1;
    }));
    oc::GPSCollector::Type type = (oc::GPSCollector::Type) 3;
    testObj.collect(type);
    EXPECT_EQ(Bypass, true);
#endif
}


/**
 *   @brief This is a test script for the GPSCollector_get function
 *   @classID GPSCollector
 *   @methodID get
 *   @paramList 
 *   @priority P2
 *   @resolution_Method
 *   @test_condition
 *   @test_Coverage_Item
 *   @test_case_ID GPSCollectorTest_get_TC001
 *   @test_type functionality
 *   @test_objective
 *   @test_precon
 *   @test_input
 *   @test_expected_result
 *   @test_module
 *   @design_id
 */
TEST_F(GPSCollectorTest, GPSCollector_get_TC001){
// Please enable and make test code here!!
#if 1
    // Please check source file, make mock files and insert EXPECT_CALL for callee functions.
    EXPECT_EQ(Bypass, true);
    GPSCollector testObj;
    testObj.get();
    EXPECT_EQ(Bypass, true);
#endif
}


/**
 *   @brief This is a test script for the GPSCollector_get function
 *   @classID GPSCollector
 *   @methodID get
 *   @paramList 
 *   @priority P2
 *   @resolution_Method
 *   @test_condition
 *   @test_Coverage_Item
 *   @test_case_ID GPSCollectorTest_get_TC002
 *   @test_type functionality
 *   @test_objective
 *   @test_precon
 *   @test_input
 *   @test_expected_result
 *   @test_module
 *   @design_id
 */
TEST_F(GPSCollectorTest, GPSCollector_get_TC002){
// Please enable and make test code here!!
#if 1
    // Please check source file, make mock files and insert EXPECT_CALL for callee functions.
    EXPECT_EQ(Bypass, true);
    GPSCollector testObj;
    testObj.get();
    EXPECT_EQ(Bypass, true);
#endif
}

/**
 *   @brief This is a test script for the GPSCollector_get function
 *   @classID GPSCollector
 *   @methodID get
 *   @paramList 
 *   @priority P2
 *   @resolution_Method
 *   @test_condition
 *   @test_Coverage_Item
 *   @test_case_ID GPSCollectorTest_get_TC003
 *   @test_type functionality
 *   @test_objective
 *   @test_precon
 *   @test_input
 *   @test_expected_result
 *   @test_module
 *   @design_id
 */
TEST_F(GPSCollectorTest, GPSCollector_get_TC003){
// Please enable and make test code here!!
#if 1
    // Please check source file, make mock files and insert EXPECT_CALL for callee functions.
    EXPECT_EQ(Bypass, true);
    GPSCollector testObj;
    testObj.get();
    EXPECT_EQ(Bypass, true);
#endif
}
/**
 *   @brief This is a test script for the GPSCollector_getString function
 *   @classID GPSCollector
 *   @methodID getString
 *   @paramList 
 *   @priority P2
 *   @resolution_Method
 *   @test_condition
 *   @test_Coverage_Item
 *   @test_case_ID GPSCollectorTest_getString_TC001
 *   @test_type functionality
 *   @test_objective
 *   @test_precon
 *   @test_input
 *   @test_expected_result
 *   @test_module
 *   @design_id
 */
TEST_F(GPSCollectorTest, GPSCollector_getString_TC001){
// Please enable and make test code here!!
#if 1
    // Please check source file, make mock files and insert EXPECT_CALL for callee functions.
    GPSCollector testObj;
    auto ret = testObj.getString();
    EXPECT_EQ(ret, "");
#endif
}

/**
 *   @brief This is a test script for the GPSCollector_getString function
 *   @classID GPSCollector
 *   @methodID getString
 *   @paramList 
 *   @priority P2
 *   @resolution_Method
 *   @test_condition
 *   @test_Coverage_Item
 *   @test_case_ID GPSCollectorTest_getString_TC002
 *   @test_type functionality
 *   @test_objective
 *   @test_precon
 *   @test_input
 *   @test_expected_result
 *   @test_module
 *   @design_id
 */
TEST_F(GPSCollectorTest, GPSCollector_getString_TC002){
// Please enable and make test code here!!
#if 1
    // Please check source file, make mock files and insert EXPECT_CALL for callee functions.
    GPSCollector testObj;
    auto ret = testObj.getString();
    EXPECT_EQ(ret, "");
#endif
}

/**
 *   @brief This is a test script for the GPSCollector_getString function
 *   @classID GPSCollector
 *   @methodID getString
 *   @paramList 
 *   @priority P2
 *   @resolution_Method
 *   @test_condition
 *   @test_Coverage_Item
 *   @test_case_ID GPSCollectorTest_getString_TC003
 *   @test_type functionality
 *   @test_objective
 *   @test_precon
 *   @test_input
 *   @test_expected_result
 *   @test_module
 *   @design_id
 */
TEST_F(GPSCollectorTest, GPSCollector_getString_TC003){
// Please enable and make test code here!!
#if 1
    // Please check source file, make mock files and insert EXPECT_CALL for callee functions.
    GPSCollector testObj;
    auto ret = testObj.getString();
    EXPECT_EQ(ret, "");
#endif
}

/**
 *   @brief This is a test script for the data_collector_gps_calculateAccuracy function
 *   @classID data_collector_gps
 *   @methodID calculateAccuracy
 *   @paramList 
 *   @priority P2
 *   @resolution_Method
 *   @test_condition
 *   @test_Coverage_Item
 *   @test_case_ID data_collector_gpsTest_calculateAccuracy_TC001
 *   @test_type functionality
 *   @test_objective
 *   @test_precon
 *   @test_input
 *   @test_expected_result
 *   @test_module
 *   @design_id
 */
TEST_F(data_collector_gpsTest, data_collector_gps_calculateAccuracy_TC001){
// Please enable and make test code here!!
#if 1
    // Please check source file, make mock files and insert EXPECT_CALL for callee functions.
    GPSCollector *testObj = new GPSCollector();
    uint32_t ret = testObj->impl_->calculateAccuracy(30);
    EXPECT_EQ(ret, 0);
#endif
}

/**
 *   @brief This is a test script for the data_collector_gps_calculateAccuracy function
 *   @classID data_collector_gps
 *   @methodID calculateAccuracy
 *   @paramList 
 *   @priority P2
 *   @resolution_Method
 *   @test_condition
 *   @test_Coverage_Item
 *   @test_case_ID data_collector_gpsTest_calculateAccuracy_TC002
 *   @test_type functionality
 *   @test_objective
 *   @test_precon
 *   @test_input
 *   @test_expected_result
 *   @test_module
 *   @design_id
 */
TEST_F(data_collector_gpsTest, data_collector_gps_calculateAccuracy_TC002){
// Please enable and make test code here!!
#if 1
    // Please check source file, make mock files and insert EXPECT_CALL for callee functions.
    GPSCollector *testObj = new GPSCollector();
    uint32_t ret = testObj->impl_->calculateAccuracy(10);
    EXPECT_EQ(ret, 10);
#endif
}

/**
 *   @brief This is a test script for the data_collector_gps_validateCourseHeading function
 *   @classID data_collector_gps
 *   @methodID validateCourseHeading
 *   @paramList 
 *   @priority P2
 *   @resolution_Method
 *   @test_condition
 *   @test_Coverage_Item
 *   @test_case_ID data_collector_gps_validateCourseHeading_TC001
 *   @test_type functionality
 *   @test_objective
 *   @test_precon
 *   @test_input
 *   @test_expected_result
 *   @test_module
 *   @design_id
 */
TEST_F(data_collector_gpsTest, data_collector_gps_validateCourseHeading_TC001){
// Please enable and make test code here!!
#if 1
    // Please check source file, make mock files and insert EXPECT_CALL for callee functions.
    GPSCollector *testObj = new GPSCollector();
    std::string ret = testObj->impl_->validateCourseHeading(-30000,0);
    EXPECT_EQ(ret, "0.0");
#endif
}

/**
 *   @brief This is a test script for the data_collector_gps_validateCourseHeading function
 *   @classID data_collector_gps
 *   @methodID validateCourseHeading
 *   @paramList 
 *   @priority P2
 *   @resolution_Method
 *   @test_condition
 *   @test_Coverage_Item
 *   @test_case_ID data_collector_gpsTest_validateCourseHeading_TC002
 *   @test_type functionality
 *   @test_objective
 *   @test_precon
 *   @test_input
 *   @test_expected_result
 *   @test_module
 *   @design_id
 */
TEST_F(data_collector_gpsTest, data_collector_gps_validateCourseHeading_TC002){
// Please enable and make test code here!!
#if 1
    // Please check source file, make mock files and insert EXPECT_CALL for callee functions.
    GPSCollector *testObj = new GPSCollector();
    std::string ret = testObj->impl_->validateCourseHeading(10,0);
    EXPECT_EQ(ret, "10");
#endif
}

/**
 *   @brief This is a test script for the data_collector_gps_validateCourseHeading function
 *   @classID data_collector_gps
 *   @methodID validateCourseHeading
 *   @paramList 
 *   @priority P2
 *   @resolution_Method
 *   @test_condition
 *   @test_Coverage_Item
 *   @test_case_ID data_collector_gpsTest_validateCourseHeading_TC003
 *   @test_type functionality
 *   @test_objective
 *   @test_precon
 *   @test_input
 *   @test_expected_result
 *   @test_module
 *   @design_id
 */
TEST_F(data_collector_gpsTest, data_collector_gps_validateCourseHeading_TC003){
// Please enable and make test code here!!
#if 1
    // Please check source file, make mock files and insert EXPECT_CALL for callee functions.
    GPSCollector *testObj = new GPSCollector();
    std::string ret = testObj->impl_->validateCourseHeading(30000,0);
    EXPECT_EQ(ret, "0.0");
#endif
}

/**
 *   @brief This is a test script for the data_collector_gps_validateLatitude function
 *   @classID data_collector_gps
 *   @methodID validateLatitude
 *   @paramList 
 *   @priority P2
 *   @resolution_Method
 *   @test_condition
 *   @test_Coverage_Item
 *   @test_case_ID data_collector_gpsTest_validateLatitude_TC001
 *   @test_type functionality
 *   @test_objective
 *   @test_precon
 *   @test_input
 *   @test_expected_result
 *   @test_module
 *   @design_id
 */
TEST_F(data_collector_gpsTest, data_collector_gps_validateLatitude_TC001){
// Please enable and make test code here!!
#if 1
    // Please check source file, make mock files and insert EXPECT_CALL for callee functions.
    GPSCollector *testObj = new GPSCollector();
    int32_t ret = testObj->impl_->validateLatitude(30000);
    EXPECT_EQ(ret, 0);
#endif
}

/**
 *   @brief This is a test script for the data_collector_gps_validateLatitude function
 *   @classID data_collector_gps
 *   @methodID validateLatitude
 *   @paramList 
 *   @priority P2
 *   @resolution_Method
 *   @test_condition
 *   @test_Coverage_Item
 *   @test_case_ID data_collector_gpsTest_validateLatitude_TC002
 *   @test_type functionality
 *   @test_objective
 *   @test_precon
 *   @test_input
 *   @test_expected_result
 *   @test_module
 *   @design_id
 */
TEST_F(data_collector_gpsTest, data_collector_gps_validateLatitude_TC002){
// Please enable and make test code here!!
#if 1
    // Please check source file, make mock files and insert EXPECT_CALL for callee functions.
    GPSCollector *testObj = new GPSCollector();
    int32_t ret = testObj->impl_->validateLatitude(-30000);
    EXPECT_EQ(ret, 0);
#endif
}

/**
 *   @brief This is a test script for the data_collector_gps_validateLongtitude function
 *   @classID data_collector_gps
 *   @methodID validateLongtitude
 *   @paramList 
 *   @priority P2
 *   @resolution_Method
 *   @test_condition
 *   @test_Coverage_Item
 *   @test_case_ID data_collector_gpsTest_validateLongtitude_TC001
 *   @test_type functionality
 *   @test_objective
 *   @test_precon
 *   @test_input
 *   @test_expected_result
 *   @test_module
 *   @design_id
 */
TEST_F(data_collector_gpsTest, data_collector_gps_validateLongtitude_TC001){
// Please enable and make test code here!!
#if 1
    // Please check source file, make mock files and insert EXPECT_CALL for callee functions.
    GPSCollector *testObj = new GPSCollector();
    int32_t ret = testObj->impl_->validateLongtitude(30000);
    EXPECT_EQ(ret, 0);
#endif
}

/**
 *   @brief This is a test script for the data_collector_gps_validateLongtitude function
 *   @classID data_collector_gps
 *   @methodID validateLongtitude
 *   @paramList 
 *   @priority P2
 *   @resolution_Method
 *   @test_condition
 *   @test_Coverage_Item
 *   @test_case_ID data_collector_gpsTest_validateLongtitude_TC002
 *   @test_type functionality
 *   @test_objective
 *   @test_precon
 *   @test_input
 *   @test_expected_result
 *   @test_module
 *   @design_id
 */
TEST_F(data_collector_gpsTest, data_collector_gps_validateLongtitude_TC002){
// Please enable and make test code here!!
#if 1
    // Please check source file, make mock files and insert EXPECT_CALL for callee functions.
    GPSCollector *testObj = new GPSCollector();
    int32_t ret = testObj->impl_->validateLongtitude(-30000);
    EXPECT_EQ(ret, 0);
#endif
}
