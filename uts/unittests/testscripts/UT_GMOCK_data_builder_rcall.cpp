/*
 * test script file generated by uts
 */

#include "gtest/gtest.h"
#include "gmock/gmock.h"
#include <dlfcn.h>

#define private public

#pragma GCC push_options
#pragma GCC optimize("O5")
#pragma GCC optimize("-fno-inline")
// Include Source File for testing!!
#include "../src/data/data_builder_rcall.cpp"
#pragma GCC pop_options
using namespace android;
using namespace oc;
#include "mock/src/data/data_collector_gps_mock.h"
DLT_DECLARE_CONTEXT(ctxOEMCall);
// Include MOCK FILES!!
// #include "mock/directory/filename_mock.h"
#include "mock/src/oem_call_app_constants_mock.h"
/*
 * Define Mock Class / function
*/


class Base_DataBuilderRCall {
public:
    virtual ~Base_DataBuilderRCall(){ }
};

class Mock_DataBuilderRCall : public Base_DataBuilderRCall {
public:
};

Mock_DataBuilderRCall *M_DataBuilderRCall;

using ::testing::Return;
using ::testing::_;
using ::testing::A;
using ::testing::ReturnRef;
using ::testing::Values;
using ::testing::SetArgPointee;
using ::testing::SetArrayArgument;
using ::testing::SaveArg;
using ::testing::SaveArgPointee;
using ::testing::DoAll;
using ::testing::Args;
using ::testing::AllOf;
using ::testing::AtLeast;
using ::testing::Combine;
bool Bypass = true;
class DataBuilderRCallTest : public ::testing::Test {
protected:
    virtual void SetUp(){
        M_DataBuilderRCall = new Mock_DataBuilderRCall();
        M_GPSCollector = new MockGPSCollector();
    }
    virtual void TearDown(){
        delete M_DataBuilderRCall;
        delete M_GPSCollector;
    }
};


/**
 *   @brief This is a test script for the DataBuilderRCall_DataBuilderRCall function
 *   @classID DataBuilderRCall
 *   @methodID DataBuilderRCall
 *   @paramList
 *   @priority P2
 *   @resolution_Method
 *   @test_condition
 *   @test_Coverage_Item
 *   @test_case_ID DataBuilderRCallTest_DataBuilderRCall_TC001
 *   @test_type functionality
 *   @test_objective
 *   @test_precon
 *   @test_input
 *   @test_expected_result
 *   @test_module
 *   @design_id
 */
TEST_F(DataBuilderRCallTest, DataBuilderRCall_DataBuilderRCall_TC001){
// Please enable and make test code here!!
#if 1
    // Please check source file, make mock files and insert EXPECT_CALL for callee functions.
    DataBuilderRCall testObj;
    std::string str = "";
    EXPECT_EQ(1, 1);
#endif
}



/**
 *   @brief This is a test script for the DataBuilderRCall_update function
 *   @classID DataBuilderRCall
 *   @methodID update
 *   @paramList
 *   @priority P2
 *   @resolution_Method
 *   @test_condition
 *   @test_Coverage_Item
 *   @test_case_ID DataBuilderRCallTest_DataBuilderRCall_TC001
 *   @test_type functionality
 *   @test_objective
 *   @test_precon
 *   @test_input
 *   @test_expected_result
 *   @test_module
 *   @design_id
 */
TEST_F(DataBuilderRCallTest, DataBuilderRCall_update_TC001){
// Please enable and make test code here!!
#if 1
    // Please check source file, make mock files and insert EXPECT_CALL for callee functions.
    DataBuilderRCall testObj;
    std::string str = "";
    Json::Value a;
    Json::Value b;
    testObj.impl_->update(a, b);
    EXPECT_EQ(1, 1);
#endif
}


/**
 *   @brief This is a test script for the DataBuilderRCall_update function
 *   @classID DataBuilderRCall
 *   @methodID update
 *   @paramList
 *   @priority P2
 *   @resolution_Method
 *   @test_condition
 *   @test_Coverage_Item
 *   @test_case_ID DataBuilderRCallTest_DataBuilderRCall_TC002
 *   @test_type functionality
 *   @test_objective
 *   @test_precon
 *   @test_input
 *   @test_expected_result
 *   @test_module
 *   @design_id
 */
TEST_F(DataBuilderRCallTest, DataBuilderRCall_update_TC002){
// Please enable and make test code here!!
#if 1
    // Please check source file, make mock files and insert EXPECT_CALL for callee functions.
    DataBuilderRCall testObj;
    std::string str = "";
    Json::Value b = "{\"call\": \"KF6GPE\",\"type\":\"l\",\"time\": \"1399371514\",\"lasttime\":\"1418597513\",\"lat\": 37.17667,\"lng\": -122.14650,\"result\":\"ok\"}";
    Json::Value root;
    std::string json = "{\"call\": \"KF6GPE\",\"type\":\"l\",\"time\": \"1399371514\",\"lasttime\":\"1418597513\",\"lat\": 37.17667,\"lng\": -122.14650,\"result\":\"ok\"}";
    Json::Reader reader;
    bool parseSuccess = reader.parse(json, root, false);
    testObj.impl_->update(root, root);
    EXPECT_EQ(1, 1);
#endif
}



/**
 *   @brief This is a test script for the DataBuilderRCall_update function
 *   @classID DataBuilderRCall
 *   @methodID update
 *   @paramList
 *   @priority P2
 *   @resolution_Method
 *   @test_condition
 *   @test_Coverage_Item
 *   @test_case_ID DataBuilderRCallTest_DataBuilderRCall_TC003
 *   @test_type functionality
 *   @test_objective
 *   @test_precon
 *   @test_input
 *   @test_expected_result
 *   @test_module
 *   @design_id
 */
TEST_F(DataBuilderRCallTest, DataBuilderRCall_update_TC003){
// Please enable and make test code here!!
#if 1
    // Please check source file, make mock files and insert EXPECT_CALL for callee functions.
    DataBuilderRCall testObj;
    std::string str = "";
    Json::Value a;
    Json::Value b;
    std::string json = "{\"call\": {\"call\": \"call\" },\"type\":\"l\",\"time\": \"1399371514\",\"lasttime\":\"1418597513\",\"lat\": 37.17667,\"lng\": -122.14650,\"result\":\"ok\"}";
    std::string json2 = "{\"call\": \"KF6GPE\",\"type\":\"l\",\"time\": \"1399371514\",\"lasttime\":\"1418597513\",\"lat\": 37.17667,\"lng\": -122.14650,\"result\":\"ok\"}";
    Json::Reader reader;
    Json::Reader reader2;
    bool parseSuccess = reader.parse(json, a, true);
    bool parseSuccess2 = reader2.parse(json2, b, true);
    testObj.impl_->update(a, b);
    EXPECT_EQ(1, 1);
#endif
}


/**
 *   @brief This is a test script for the DataBuilderRCall_build function
 *   @classID DataBuilderRCall
 *   @methodID build
 *   @paramList 
 *   @priority P2
 *   @resolution_Method
 *   @test_condition
 *   @test_Coverage_Item
 *   @test_case_ID DataBuilderRCallTest_build_TC001
 *   @test_type functionality
 *   @test_objective
 *   @test_precon
 *   @test_input
 *   @test_expected_result
 *   @test_module
 *   @design_id
 */
TEST_F(DataBuilderRCallTest, DataBuilderRCall_build_TC001){
// Please enable and make test code here!!
#if 1
    // Please check source file, make mock files and insert EXPECT_CALL for callee functions.
    DataBuilderRCall testObj;
    std::string str = "";
    EXPECT_CALL(*M_GPSCollector, get()).WillRepeatedly(Return(str));
    auto ret = testObj.build();
    EXPECT_EQ(ret, "{\n\t\"gpsData\" : \"\",\n\t\"ignition\" : \"unknown\"\n}");
#endif
}

/**
 *   @brief This is a test script for the DataBuilderRCall_build function
 *   @classID DataBuilderRCall
 *   @methodID build
 *   @paramList 
 *   @priority P2
 *   @resolution_Method
 *   @test_condition
 *   @test_Coverage_Item
 *   @test_case_ID DataBuilderRCallTest_build_TC002
 *   @test_type functionality
 *   @test_objective
 *   @test_precon
 *   @test_input
 *   @test_expected_result
 *   @test_module
 *   @design_id
 */
TEST_F(DataBuilderRCallTest, DataBuilderRCall_build_TC002){
// Please enable and make test code here!!
#if 1
    // Please check source file, make mock files and insert EXPECT_CALL for callee functions.
    DataBuilderRCall testObj;
    std::string str = "";
    EXPECT_CALL(*M_GPSCollector, get()).WillRepeatedly(Return(str));
    auto ret = testObj.build();
    EXPECT_EQ(ret, "{\n\t\"gpsData\" : \"\",\n\t\"ignition\" : \"unknown\"\n}");
#endif
}

/**
 *   @brief This is a test script for the DataBuilderRCall_build function
 *   @classID DataBuilderRCall
 *   @methodID build
 *   @paramList 
 *   @priority P2
 *   @resolution_Method
 *   @test_condition
 *   @test_Coverage_Item
 *   @test_case_ID DataBuilderRCallTest_build_TC003
 *   @test_type functionality
 *   @test_objective
 *   @test_precon
 *   @test_input
 *   @test_expected_result
 *   @test_module
 *   @design_id
 */
TEST_F(DataBuilderRCallTest, DataBuilderRCall_build_TC003){
// Please enable and make test code here!!
#if 1
    // Please check source file, make mock files and insert EXPECT_CALL for callee functions.
    DataBuilderRCall testObj;
    std::string str = "";
    EXPECT_CALL(*M_GPSCollector, get()).WillRepeatedly(Return(str));
    auto ret = testObj.build();
    EXPECT_EQ(ret, "{\n\t\"gpsData\" : \"\",\n\t\"ignition\" : \"unknown\"\n}");
#endif
}

/**
 *   @brief This is a test script for the DataBuilderRCall_setGPS function
 *   @classID DataBuilderRCall
 *   @methodID setGPS
 *   @paramList 
 *   @priority P2
 *   @resolution_Method
 *   @test_condition
 *   @test_Coverage_Item
 *   @test_case_ID DataBuilderRCallTest_setGPS_TC001
 *   @test_type functionality
 *   @test_objective
 *   @test_precon
 *   @test_input
 *   @test_expected_result
 *   @test_module
 *   @design_id
 */
TEST_F(DataBuilderRCallTest, DataBuilderRCall_setGPS_TC001){
// Please enable and make test code here!!
#if 1
    // Please check source file, make mock files and insert EXPECT_CALL for callee functions.
    DataBuilderRCall testObj;
    testObj.setGPS();
    EXPECT_EQ(Bypass,true);
#endif
}

/**
 *   @brief This is a test script for the DataBuilderRCall_setGPS function
 *   @classID DataBuilderRCall
 *   @methodID setGPS
 *   @paramList 
 *   @priority P2
 *   @resolution_Method
 *   @test_condition
 *   @test_Coverage_Item
 *   @test_case_ID DataBuilderRCallTest_setGPS_TC002
 *   @test_type functionality
 *   @test_objective
 *   @test_precon
 *   @test_input
 *   @test_expected_result
 *   @test_module
 *   @design_id
 */
TEST_F(DataBuilderRCallTest, DataBuilderRCall_setGPS_TC002){
// Please enable and make test code here!!
#if 1
    // Please check source file, make mock files and insert EXPECT_CALL for callee functions.
    DataBuilderRCall testObj;
    testObj.setGPS();
    EXPECT_EQ(Bypass,true);
#endif
}

/**
 *   @brief This is a test script for the DataBuilderRCall_setGPS function
 *   @classID DataBuilderRCall
 *   @methodID setGPS
 *   @paramList 
 *   @priority P2
 *   @resolution_Method
 *   @test_condition
 *   @test_Coverage_Item
 *   @test_case_ID DataBuilderRCallTest_setGPS_TC003
 *   @test_type functionality
 *   @test_objective
 *   @test_precon
 *   @test_input
 *   @test_expected_result
 *   @test_module
 *   @design_id
 */
TEST_F(DataBuilderRCallTest, DataBuilderRCall_setGPS_TC003){
// Please enable and make test code here!!
#if 1
    // Please check source file, make mock files and insert EXPECT_CALL for callee functions.
    DataBuilderRCall testObj;
    testObj.setGPS();
    EXPECT_EQ(Bypass,true);
#endif
}
/**
 *   @brief This is a test script for the DataBuilderRCall_setUtil function
 *   @classID DataBuilderRCall
 *   @methodID setUtil
 *   @paramList const std::string ignition
 *   @priority P2
 *   @resolution_Method
 *   @test_condition
 *   @test_Coverage_Item
 *   @test_case_ID DataBuilderRCallTest_setUtil_TC001
 *   @test_type functionality
 *   @test_objective
 *   @test_precon
 *   @test_input
 *   @test_expected_result
 *   @test_module
 *   @design_id
 */
TEST_F(DataBuilderRCallTest, DataBuilderRCall_setUtil_TC001){
// Please enable and make test code here!!
#if 1
    // Please check source file, make mock files and insert EXPECT_CALL for callee functions.
    DataBuilderRCall testObj;
    testObj.setUtil("unknown");
    EXPECT_EQ(Bypass,true);
#endif
}

/**
 *   @brief This is a test script for the DataBuilderRCall_setUtil function
 *   @classID DataBuilderRCall
 *   @methodID setUtil
 *   @paramList const std::string ignition
 *   @priority P2
 *   @resolution_Method
 *   @test_condition
 *   @test_Coverage_Item
 *   @test_case_ID DataBuilderRCallTest_setUtil_TC002
 *   @test_type functionality
 *   @test_objective
 *   @test_precon
 *   @test_input
 *   @test_expected_result
 *   @test_module
 *   @design_id
 */
TEST_F(DataBuilderRCallTest, DataBuilderRCall_setUtil_TC002){
// Please enable and make test code here!!
#if 1
    // Please check source file, make mock files and insert EXPECT_CALL for callee functions.
    DataBuilderRCall testObj;
    testObj.setUtil("unknown");
    EXPECT_EQ(Bypass,true);
#endif
}


/**
 *   @brief This is a test script for the DataBuilderRCall_setUtil function
 *   @classID DataBuilderRCall
 *   @methodID setUtil
 *   @paramList const std::string ignition
 *   @priority P2
 *   @resolution_Method
 *   @test_condition
 *   @test_Coverage_Item
 *   @test_case_ID DataBuilderRCallTest_setUtil_TC003
 *   @test_type functionality
 *   @test_objective
 *   @test_precon
 *   @test_input
 *   @test_expected_result
 *   @test_module
 *   @design_id
 */
TEST_F(DataBuilderRCallTest, DataBuilderRCall_setUtil_TC003){
// Please enable and make test code here!!
#if 1
    // Please check source file, make mock files and insert EXPECT_CALL for callee functions.
    DataBuilderRCall testObj;
    testObj.setUtil("unknown");
    EXPECT_EQ(Bypass,true);
#endif
}



