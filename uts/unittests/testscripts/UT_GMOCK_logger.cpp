/*
 * test script file generated by uts
 */

#include "gtest/gtest.h"
#include "gmock/gmock.h"
#include <dlfcn.h>

// Include Source File for testing!!
#include "../src/logger.cpp"

// Include MOCK FILES!!
// #include "mock/directory/filename_mock.h"

android::sp<Application> gApp;

/*
 * Define Mock Class / function
*/
class Base_Logger {
public:
    virtual ~Base_Logger(){ }
};

class Mock_Logger : public Base_Logger {
public:
};

Mock_Logger *M_Logger;

using ::testing::Return;
using ::testing::_;
using ::testing::A;
using ::testing::ReturnRef;
using ::testing::Values;
using ::testing::SetArgPointee;
using ::testing::SetArrayArgument;
using ::testing::SaveArg;
using ::testing::SaveArgPointee;
using ::testing::DoAll;
using ::testing::Args;
using ::testing::AllOf;
using ::testing::AtLeast;
using ::testing::Combine;
bool Bypass = true;
class LoggerTest : public ::testing::Test {
protected:
    virtual void SetUp(){
        M_Logger = new Mock_Logger();
    }
    virtual void TearDown(){
        delete M_Logger;
    }
};

/**
 *   @brief This is a test script for the Logger_dltInjectionCallback function
 *   @classID Logger
 *   @methodID dltInjectionCallback
 *   @paramList uint32_t service_id, void *data, uint32_t length
 *   @priority P2
 *   @resolution_Method
 *   @test_condition
 *   @test_Coverage_Item
 *   @test_case_ID LoggerTest_dltInjectionCallback_TC001
 *   @test_type functionality
 *   @test_objective
 *   @test_precon
 *   @test_input
 *   @test_expected_result
 *   @test_module
 *   @design_id
 */
TEST_F(LoggerTest, Logger_dltInjectionCallback_TC001){
// Please enable and make test code here!!
#if 1
    // Please check source file, make mock files and insert EXPECT_CALL for callee functions.
    char* temp = "123";
    dltInjectionCallback(500, nullptr, 2);
    auto ret = dltInjectionCallback(5000, temp, 0);
    EXPECT_EQ(ret, 0);
#endif
}

/**
 *   @brief This is a test script for the Logger_dltInjectionCallback function
 *   @classID Logger
 *   @methodID dltInjectionCallback
 *   @paramList uint32_t service_id, void *data, uint32_t length
 *   @priority P2
 *   @resolution_Method
 *   @test_condition
 *   @test_Coverage_Item
 *   @test_case_ID LoggerTest_dltInjectionCallback_TC002
 *   @test_type functionality
 *   @test_objective
 *   @test_precon
 *   @test_input
 *   @test_expected_result
 *   @test_module
 *   @design_id
 */
TEST_F(LoggerTest, Logger_dltInjectionCallback_TC002){
// Please enable and make test code here!!
#if 1
    // Please check source file, make mock files and insert EXPECT_CALL for callee functions.
    char* temp = "123";
    auto ret = dltInjectionCallback(5000, temp, 2);
    EXPECT_EQ(ret, 0);
#endif
}

/**
 *   @brief This is a test script for the Logger_dltInjectionCallback function
 *   @classID Logger
 *   @methodID dltInjectionCallback
 *   @paramList uint32_t service_id, void *data, uint32_t length
 *   @priority P2
 *   @resolution_Method
 *   @test_condition
 *   @test_Coverage_Item
 *   @test_case_ID LoggerTest_dltInjectionCallback_TC003
 *   @test_type functionality
 *   @test_objective
 *   @test_precon
 *   @test_input
 *   @test_expected_result
 *   @test_module
 *   @design_id
 */
TEST_F(LoggerTest, Logger_dltInjectionCallback_TC003){
// Please enable and make test code here!!
#if 1
    // Please check source file, make mock files and insert EXPECT_CALL for callee functions.
    char* temp = "123";
    auto ret = dltInjectionCallback(5000, temp, 2);
    EXPECT_EQ(ret, 0);
#endif
}
/**
 *   @brief This is a test script for the Logger_initDLTLog function
 *   @classID Logger
 *   @methodID initDLTLog
 *   @paramList 
 *   @priority P2
 *   @resolution_Method
 *   @test_condition
 *   @test_Coverage_Item
 *   @test_case_ID LoggerTest_initDLTLog_TC001
 *   @test_type functionality
 *   @test_objective
 *   @test_precon
 *   @test_input
 *   @test_expected_result
 *   @test_module
 *   @design_id
 */
TEST_F(LoggerTest, Logger_initDLTLog_TC001){
// Please enable and make test code here!!
#if 1
    // Please check source file, make mock files and insert EXPECT_CALL for callee functions.
    initDLTLog();
    EXPECT_EQ(Bypass, true);
#endif
}


/**
 *   @brief This is a test script for the Logger_initDLTLog function
 *   @classID Logger
 *   @methodID initDLTLog
 *   @paramList 
 *   @priority P2
 *   @resolution_Method
 *   @test_condition
 *   @test_Coverage_Item
 *   @test_case_ID LoggerTest_initDLTLog_TC002
 *   @test_type functionality
 *   @test_objective
 *   @test_precon
 *   @test_input
 *   @test_expected_result
 *   @test_module
 *   @design_id
 */
TEST_F(LoggerTest, Logger_initDLTLog_TC002){
// Please enable and make test code here!!
#if 1
    // Please check source file, make mock files and insert EXPECT_CALL for callee functions.
    initDLTLog();
    EXPECT_EQ(Bypass, true);
#endif
}
/**
 *   @brief This is a test script for the Logger_initDLTLog function
 *   @classID Logger
 *   @methodID initDLTLog
 *   @paramList 
 *   @priority P2
 *   @resolution_Method
 *   @test_condition
 *   @test_Coverage_Item
 *   @test_case_ID LoggerTest_initDLTLog_TC003
 *   @test_type functionality
 *   @test_objective
 *   @test_precon
 *   @test_input
 *   @test_expected_result
 *   @test_module
 *   @design_id
 */
TEST_F(LoggerTest, Logger_initDLTLog_TC003){
// Please enable and make test code here!!
#if 1
    // Please check source file, make mock files and insert EXPECT_CALL for callee functions.
    initDLTLog();
    EXPECT_EQ(Bypass, true);
#endif
}
