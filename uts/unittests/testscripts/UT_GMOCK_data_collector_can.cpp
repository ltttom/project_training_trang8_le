/*
 * test script file generated by uts
 */

#include "gtest/gtest.h"
#include "gmock/gmock.h"
#include <dlfcn.h>

#undef private
#define private public
#undef protected
#define protected public

#pragma GCC push_options
#pragma GCC optimize("O0")
#pragma GCC optimize("-fno-inline")
// Include Source File for testing!!
#include "../src/data/data_collector_can.cpp"
#pragma GCC pop_options
using namespace android;
using namespace oc;

#include "mock/service/android_service_mock.h"
/*
 * Define Mock Class / function
*/
class Base_CanDataCollector {
public:
    virtual ~Base_CanDataCollector(){ }
};

class Mock_CanDataCollector : public Base_CanDataCollector {
public:
};

Mock_CanDataCollector *M_CanDataCollector;

using ::testing::Return;
using ::testing::_;
using ::testing::A;
using ::testing::ReturnRef;
using ::testing::Values;
using ::testing::SetArgPointee;
using ::testing::SetArrayArgument;
using ::testing::SaveArg;
using ::testing::SaveArgPointee;
using ::testing::DoAll;
using ::testing::Args;
using ::testing::AllOf;
using ::testing::AtLeast;
using ::testing::Combine;
bool Bypass = true;
class CanDataCollectorTest : public ::testing::Test {
protected:
    virtual void SetUp(){
        M_CanDataCollector = new Mock_CanDataCollector();
        M_MockAndroidService = new MockAndroidService();
        M_testVehicleManagerService = new MocktestVehicleManagerService();
    }
    virtual void TearDown(){
        delete M_CanDataCollector;
        delete M_MockAndroidService;
        delete M_testVehicleManagerService;
    }
};

class data_collector_canTest : public ::testing::Test {
protected:
    virtual void SetUp(){
        M_CanDataCollector = new Mock_CanDataCollector();
        M_MockAndroidService = new MockAndroidService();
        M_testVehicleManagerService = new MocktestVehicleManagerService();
    }
    virtual void TearDown(){
        delete M_CanDataCollector;
        delete M_MockAndroidService;
        delete M_testVehicleManagerService;
    }
};

class ImplTest : public ::testing::Test {
protected:
    virtual void SetUp(){
        M_CanDataCollector = new Mock_CanDataCollector();
        M_MockAndroidService = new MockAndroidService();
        M_testVehicleManagerService = new MocktestVehicleManagerService();
    }
    virtual void TearDown(){
        delete M_CanDataCollector;
        delete M_MockAndroidService;
        delete M_testVehicleManagerService;
    }
};

/**
 *   @brief This is a test script for the CanDataCollector_CanDataCollector function
 *   @classID CanDataCollector
 *   @methodID CanDataCollector
 *   @paramList
 *   @priority P2
 *   @resolution_Method
 *   @test_condition
 *   @test_Coverage_Item
 *   @test_case_ID CanDataCollectorTest_CanDataCollector_TC001
 *   @test_type functionality
 *   @test_objective
 *   @test_precon
 *   @test_input
 *   @test_expected_result
 *   @test_module
 *   @design_id
 */
TEST_F(CanDataCollectorTest, CanDataCollector_CanDataCollector_TC001){
// Please enable and make test code here!!
#if 1
    // Please check source file, make mock files and insert EXPECT_CALL for callee functions.
    CanDataCollector testObj;
    EXPECT_EQ(Bypass, true);
#endif
}

/**
 *   @brief This is a test script for the CanDataCollector_collect function
 *   @classID CanDataCollector
 *   @methodID collect
 *   @paramList 
 *   @priority P2
 *   @resolution_Method
 *   @test_condition
 *   @test_Coverage_Item
 *   @test_case_ID CanDataCollectorTest_collect_TC001
 *   @test_type functionality
 *   @test_objective
 *   @test_precon
 *   @test_input
 *   @test_expected_result
 *   @test_module
 *   @design_id
 */
TEST_F(CanDataCollectorTest, CanDataCollector_collect_TC001){
// Please enable and make test code here!!
#if 1
    // Please check source file, make mock files and insert EXPECT_CALL for callee functions.
    CanDataCollector testObj;
    ITest_ServiceManager *svcMgr = new ITest_ServiceManager();
    ON_CALL(*M_MockAndroidService, defaultServiceManager()).WillByDefault(Return(svcMgr));
    testVehicleManagerService *ret1 = new testVehicleManagerService();
    ON_CALL(*M_MockAndroidService, getService(_)).WillByDefault(Return(ret1));
    testObj.collect();
    EXPECT_EQ(Bypass, true);
#endif
}

/**
 *   @brief This is a test script for the CanDataCollector_collect function
 *   @classID CanDataCollector
 *   @methodID collect
 *   @paramList 
 *   @priority P2
 *   @resolution_Method
 *   @test_condition
 *   @test_Coverage_Item
 *   @test_case_ID CanDataCollectorTest_collect_TC002
 *   @test_type functionality
 *   @test_objective
 *   @test_precon
 *   @test_input
 *   @test_expected_result
 *   @test_module
 *   @design_id
 */
TEST_F(CanDataCollectorTest, CanDataCollector_collect_TC002){
// Please enable and make test code here!!
#if 1
    // Please check source file, make mock files and insert EXPECT_CALL for callee functions.
    CanDataCollector testObj;
    ITest_ServiceManager *svcMgr = new ITest_ServiceManager();
    ON_CALL(*M_MockAndroidService, defaultServiceManager()).WillByDefault(Return(svcMgr));
    ON_CALL(*M_MockAndroidService, getService(_)).WillByDefault(Return(nullptr));
    testObj.collect();
    EXPECT_EQ(Bypass, true);
#endif
}

/**
 *   @brief This is a test script for the CanDataCollector_collect function
 *   @classID CanDataCollector
 *   @methodID collect
 *   @paramList 
 *   @priority P2
 *   @resolution_Method
 *   @test_condition
 *   @test_Coverage_Item
 *   @test_case_ID CanDataCollectorTest_collect_TC003
 *   @test_type functionality
 *   @test_objective
 *   @test_precon
 *   @test_input
 *   @test_expected_result
 *   @test_module
 *   @design_id
 */
TEST_F(CanDataCollectorTest, CanDataCollector_collect_TC003){
// Please enable and make test code here!!
#if 1
    // Please check source file, make mock files and insert EXPECT_CALL for callee functions.
    CanDataCollector testObj;
    ITest_ServiceManager *svcMgr = new ITest_ServiceManager();
    ON_CALL(*M_MockAndroidService, defaultServiceManager()).WillByDefault(Return(svcMgr));
    ON_CALL(*M_MockAndroidService, getService(_)).WillByDefault(Return(nullptr));
    testObj.collect();
    EXPECT_EQ(Bypass, true);
#endif
}

/**
 *   @brief This is a test script for the CanDataCollector_get function
 *   @classID CanDataCollector
 *   @methodID get
 *   @paramList 
 *   @priority P2
 *   @resolution_Method
 *   @test_condition
 *   @test_Coverage_Item
 *   @test_case_ID CanDataCollector_get_TC001
 *   @test_type functionality
 *   @test_objective
 *   @test_precon
 *   @test_input
 *   @test_expected_result
 *   @test_module
 *   @design_id
 */
TEST_F(CanDataCollectorTest, CanDataCollector_get_TC001){
// Please enable and make test code here!!
#if 1
    // Please check source file, make mock files and insert EXPECT_CALL for callee functions.
    CanDataCollector testObj;
    testObj.get();
    EXPECT_EQ(Bypass,true);
#endif
}


/**
 *   @brief This is a test script for the data_collector_can_get function
 *   @classID data_collector_can
 *   @methodID get
 *   @paramList
 *   @priority P2
 *   @resolution_Method
 *   @test_condition
 *   @test_Coverage_Item
 *   @test_case_ID data_collector_can_get_TC001
 *   @test_type functionality
 *   @test_objective
 *   @test_precon
 *   @test_input
 *   @test_expected_result
 *   @test_module
 *   @design_id
 */
TEST_F(data_collector_canTest, data_collector_can_get_TC001){
// Please enable and make test code here!!
#if 1
    // Please check source file, make mock files and insert EXPECT_CALL for callee functions.
    CanDataCollector testObj;
    testObj.get();
    EXPECT_EQ(Bypass,true);
#endif
}

/**
 *   @brief This is a test script for the Impl_getFirstByte function
 *   @classID Impl
 *   @methodID getFirstByte
 *   @paramList 
 *   @priority P2
 *   @resolution_Method
 *   @test_condition
 *   @test_Coverage_Item
 *   @test_case_ID Impl_getFirstByte_TC001
 *   @test_type functionality
 *   @test_objective
 *   @test_precon
 *   @test_input
 *   @test_expected_result
 *   @test_module
 *   @design_id
 */
TEST_F(ImplTest, Impl_getFirstByte_TC001){
// Please enable and make test code here!!
#if 1
    // Please check source file, make mock files and insert EXPECT_CALL for callee functions.
    CanDataCollector::Impl testObj;
    sp<VehicleData> vehiData = new VehicleData();
    vehiData->valType = TYPE_UINT32;
    uint32_t frameId = 0;
    uint8_t ret = testObj.getFirstByte(vehiData, frameId);
    EXPECT_EQ(ret , static_cast<uint8_t>(0));
#endif
}

/**
 *   @brief This is a test script for the Impl_getFirstByte function
 *   @classID Impl
 *   @methodID getFirstByte
 *   @paramList 
 *   @priority P2
 *   @resolution_Method
 *   @test_condition
 *   @test_Coverage_Item
 *   @test_case_ID Impl_getFirstByte_TC002
 *   @test_type functionality
 *   @test_objective
 *   @test_precon
 *   @test_input
 *   @test_expected_result
 *   @test_module
 *   @design_id
 */
TEST_F(ImplTest, Impl_getFirstByte_TC002){
// Please enable and make test code here!!
#if 1
    // Please check source file, make mock files and insert EXPECT_CALL for callee functions.
    CanDataCollector::Impl testObj;
    sp<VehicleData> vehiData = new VehicleData();
    vehiData->valType = TYPE_INT32;
    uint32_t frameId = 0;
    uint8_t ret = testObj.getFirstByte(vehiData, frameId);
    EXPECT_EQ(ret , static_cast<uint8_t>(0));
    
#endif
}


/**
 *   @brief This is a test script for the data_collector_can_getFirstByte function
 *   @classID data_collector_can
 *   @methodID getFirstByte
 *   @paramList 
 *   @priority P2
 *   @resolution_Method
 *   @test_condition
 *   @test_Coverage_Item
 *   @test_case_ID data_collector_can_getFirstByte_TC003
 *   @test_type functionality
 *   @test_objective
 *   @test_precon
 *   @test_input
 *   @test_expected_result
 *   @test_module
 *   @design_id
 */
TEST_F(data_collector_canTest, data_collector_can_getFirstByte_TC003){
// Please enable and make test code here!!
#if 1
    // Please check source file, make mock files and insert EXPECT_CALL for callee functions.
    CanDataCollector::Impl testObj;
    sp<VehicleData> vehiData = new VehicleData();
    vehiData->valType = TYPE_INT64;
    uint32_t frameId = 0;
    uint8_t ret = testObj.getFirstByte(vehiData, frameId);
    EXPECT_EQ(ret , static_cast<uint8_t>(0));
    
#endif
}

/**
 *   @brief This is a test script for the data_collector_can_getFirstByte function
 *   @classID data_collector_can
 *   @methodID getFirstByte
 *   @paramList 
 *   @priority P2
 *   @resolution_Method
 *   @test_condition
 *   @test_Coverage_Item
 *   @test_case_ID data_collector_can_getFirstByte_TC004
 *   @test_type functionality
 *   @test_objective
 *   @test_precon
 *   @test_input
 *   @test_expected_result
 *   @test_module
 *   @design_id
 */
TEST_F(data_collector_canTest, data_collector_can_getFirstByte_TC004){
// Please enable and make test code here!!
#if 1
    // Please check source file, make mock files and insert EXPECT_CALL for callee functions.
    CanDataCollector::Impl testObj;
    sp<VehicleData> vehiData = new VehicleData();
    vehiData->valType = TYPE_STREAM;
    uint32_t frameId = 0;
    vehiData->valUint32 = 1;
    vehiData->sigID = SigInd_CanTx_C_RESPA_EF88491;
    uint8_t ret = testObj.getFirstByte(vehiData, frameId);
    EXPECT_EQ(ret , static_cast<uint8_t>(2));
    
#endif
}

/**
 *   @brief This is a test script for the data_collector_can_getFirstByte function
 *   @classID data_collector_can
 *   @methodID getFirstByte
 *   @paramList 
 *   @priority P2
 *   @resolution_Method
 *   @test_condition
 *   @test_Coverage_Item
 *   @test_case_ID data_collector_can_getFirstByte_TC005
 *   @test_type functionality
 *   @test_objective
 *   @test_precon
 *   @test_input
 *   @test_expected_result
 *   @test_module
 *   @design_id
 */
TEST_F(data_collector_canTest, data_collector_can_getFirstByte_TC005){
// Please enable and make test code here!!
#if 1
    // Please check source file, make mock files and insert EXPECT_CALL for callee functions.
    CanDataCollector::Impl testObj;
    sp<VehicleData> vehiData = new VehicleData();
    vehiData->valType = TYPE_STREAM;
    uint8_t data = 0x02;
    sp<Buffer> payload = new Buffer();
    payload->append(&data, 1);
    vehiData->buffer = payload;
    uint32_t frameId = 0;
    vehiData->valUint32 = 1;
    vehiData->sigID = SigInd_CanTx_C_RESPA_EF88491;
    uint8_t ret = testObj.getFirstByte(vehiData, frameId);
    EXPECT_EQ(ret , static_cast<uint8_t>(2));
    
#endif
}

/**
 *   @brief This is a test script for the data_collector_can_getFirstByte function
 *   @classID data_collector_can
 *   @methodID getFirstByte
 *   @paramList 
 *   @priority P2
 *   @resolution_Method
 *   @test_condition
 *   @test_Coverage_Item
 *   @test_case_ID data_collector_can_getFirstByte_TC006
 *   @test_type functionality
 *   @test_objective
 *   @test_precon
 *   @test_input
 *   @test_expected_result
 *   @test_module
 *   @design_id
 */
TEST_F(data_collector_canTest, data_collector_can_getFirstByte_TC006){
// Please enable and make test code here!!
#if 1
    // Please check source file, make mock files and insert EXPECT_CALL for callee functions.
    CanDataCollector::Impl testObj;
    sp<VehicleData> vehiData = new VehicleData();
    vehiData->valType = TYPE_STREAM;
    uint32_t frameId = 0;
    vehiData->valUint32 = 0;
    uint8_t ret = testObj.getFirstByte(vehiData, frameId);
    EXPECT_EQ(ret , static_cast<uint8_t>(2));
    
#endif
}

/**
 *   @brief This is a test script for the data_collector_can_getFirstByte function
 *   @classID data_collector_can
 *   @methodID getFirstByte
 *   @paramList 
 *   @priority P2
 *   @resolution_Method
 *   @test_condition
 *   @test_Coverage_Item
 *   @test_case_ID data_collector_can_getFirstByte_TC007
 *   @test_type functionality
 *   @test_objective
 *   @test_precon
 *   @test_input
 *   @test_expected_result
 *   @test_module
 *   @design_id
 */
TEST_F(data_collector_canTest, data_collector_can_getFirstByte_TC007){
// Please enable and make test code here!!
#if 1
    // Please check source file, make mock files and insert EXPECT_CALL for callee functions.
    CanDataCollector::Impl testObj;
    sp<VehicleData> vehiData = new VehicleData();
    vehiData->valType = TYPE_FLOAT;
    uint32_t frameId = 0;
    uint8_t ret = testObj.getFirstByte(vehiData, frameId);
    EXPECT_EQ(ret , static_cast<uint8_t>(2));
    
#endif
}

/**
 *   @brief This is a test script for the data_collector_can_getFirstByte function
 *   @classID data_collector_can
 *   @methodID getFirstByte
 *   @paramList 
 *   @priority P2
 *   @resolution_Method
 *   @test_condition
 *   @test_Coverage_Item
 *   @test_case_ID data_collector_can_getFirstByte_TC008
 *   @test_type functionality
 *   @test_objective
 *   @test_precon
 *   @test_input
 *   @test_expected_result
 *   @test_module
 *   @design_id
 */
TEST_F(data_collector_canTest, data_collector_can_getFirstByte_TC008){
// Please enable and make test code here!!
#if 1
    // Please check source file, make mock files and insert EXPECT_CALL for callee functions.
    CanDataCollector::Impl testObj;
    sp<VehicleData> vehiData = new VehicleData();
    vehiData->valType = TYPE_ERROR;
    uint32_t frameId = 0;
    uint8_t ret = testObj.getFirstByte(vehiData, frameId);
    EXPECT_EQ(ret , static_cast<uint8_t>(2));
    
#endif
}

/**
 *   @brief This is a test script for the data_collector_can_getFirstByte function
 *   @classID data_collector_can
 *   @methodID getFirstByte
 *   @paramList 
 *   @priority P2
 *   @resolution_Method
 *   @test_condition
 *   @test_Coverage_Item
 *   @test_case_ID data_collector_can_getFirstByte_TC009
 *   @test_type functionality
 *   @test_objective
 *   @test_precon
 *   @test_input
 *   @test_expected_result
 *   @test_module
 *   @design_id
 */

TEST_F(data_collector_canTest, data_collector_can_getFirstByte_TC009){
// Please enable and make test code here!!
#if 1
    // Please check source file, make mock files and insert EXPECT_CALL for callee functions.
    CanDataCollector::Impl testObj;
    sp<VehicleData> vehiData = new VehicleData();
    vehiData->valType = TYPE_UINT64;
    uint32_t frameId = 0;
    uint8_t ret = testObj.getFirstByte(vehiData, frameId);
    EXPECT_EQ(ret , static_cast<uint8_t>(0));
    
#endif
}

/**
 *   @brief This is a test script for the data_collector_can_getFirstByte function
 *   @classID data_collector_can
 *   @methodID getFirstByte
 *   @paramList 
 *   @priority P2
 *   @resolution_Method
 *   @test_condition
 *   @test_Coverage_Item
 *   @test_case_ID data_collector_can_getFirstByte_TC010
 *   @test_type functionality
 *   @test_objective
 *   @test_precon
 *   @test_input
 *   @test_expected_result
 *   @test_module
 *   @design_id
 */

TEST_F(data_collector_canTest, data_collector_can_getFirstByte_TC010){
// Please enable and make test code here!!
#if 1
    // Please check source file, make mock files and insert EXPECT_CALL for callee functions.
    CanDataCollector::Impl testObj;
    sp<VehicleData> vehiData = new VehicleData();
    vehiData->valType = TYPE_DOUBLE;
    uint32_t frameId = 0;
    uint8_t ret = testObj.getFirstByte(vehiData, frameId);
    EXPECT_EQ(ret , static_cast<uint8_t>(2));
    
#endif
}

/**
 *   @brief This is a test script for the data_collector_can_getFirstByte function
 *   @classID data_collector_can
 *   @methodID getFirstByte
 *   @paramList 
 *   @priority P2
 *   @resolution_Method
 *   @test_condition
 *   @test_Coverage_Item
 *   @test_case_ID data_collector_can_getFirstByte_TC011
 *   @test_type functionality
 *   @test_objective
 *   @test_precon
 *   @test_input
 *   @test_expected_result
 *   @test_module
 *   @design_id
 */

TEST_F(data_collector_canTest, data_collector_can_getFirstByte_TC011){
// Please enable and make test code here!!
#if 1
    // Please check source file, make mock files and insert EXPECT_CALL for callee functions.
    CanDataCollector::Impl testObj;
    sp<VehicleData> vehiData = new VehicleData();
    vehiData->valType = (vehicle_data_type) 20;
    uint32_t frameId = 0;
    uint8_t ret = testObj.getFirstByte(vehiData, frameId);
    EXPECT_EQ(ret , static_cast<uint8_t>(2));
    
#endif
}



/**
 *   @brief This is a test script for the data_collector_can_getInt function
 *   @classID data_collector_can
 *   @methodID getInt
 *   @paramList 
 *   @priority P2
 *   @resolution_Method
 *   @test_condition
 *   @test_Coverage_Item
 *   @test_case_ID data_collector_can_getInt_TC001
 *   @test_type functionality
 *   @test_objective
 *   @test_precon
 *   @test_input
 *   @test_expected_result
 *   @test_module
 *   @design_id
 */

TEST_F(data_collector_canTest, data_collector_can_getInt_TC001){
// Please enable and make test code here!!
#ifndef CAN_TYPE_GEN3

    // Please check source file, make mock files and insert EXPECT_CALL for callee functions.
    CanDataCollector::Impl testObj;
    ITest_ServiceManager *svcMgr = new ITest_ServiceManager();
    ON_CALL(*M_MockAndroidService, defaultServiceManager()).WillByDefault(Return(svcMgr));
    testVehicleManagerService *data = new testVehicleManagerService();
    //ON_CALL(*M_MockAndroidService, getService(_)).WillByDefault(Return(data));
    sp<VehicleData> vehiData = new VehicleData();
    EXPECT_CALL(*M_testVehicleManagerService, getVehicleValue(_,_)).WillRepeatedly(Return(vehiData));
    vehiData->valType = vehicle_data_type::TYPE_ERROR;
    int ret = testObj.getInt(data, SigInd_CanRxSRS_EDR_DELTA_VMAX_X_1);
    EXPECT_EQ(ret , 0);
    
#endif
}

/**
 *   @brief This is a test script for the data_collector_can_getInt function
 *   @classID data_collector_can
 *   @methodID getInt
 *   @paramList 
 *   @priority P2
 *   @resolution_Method
 *   @test_condition
 *   @test_Coverage_Item
 *   @test_case_ID data_collector_can_getInt_TC002
 *   @test_type functionality
 *   @test_objective
 *   @test_precon
 *   @test_input
 *   @test_expected_result
 *   @test_module
 *   @design_id
 */

TEST_F(data_collector_canTest, data_collector_can_getInt_TC002){
// Please enable and make test code here!!
#ifndef CAN_TYPE_GEN3
    // Please check source file, make mock files and insert EXPECT_CALL for callee functions.
    CanDataCollector::Impl testObj;
    ITest_ServiceManager *svcMgr = new ITest_ServiceManager();
    ON_CALL(*M_MockAndroidService, defaultServiceManager()).WillByDefault(Return(svcMgr));
    testVehicleManagerService *data = new testVehicleManagerService();
    ON_CALL(*M_MockAndroidService, getService(_)).WillByDefault(Return(data));
    sp<VehicleData> vehiData = new VehicleData();
    EXPECT_CALL(*M_testVehicleManagerService, getVehicleValue(_,_)).WillRepeatedly(Return(vehiData));
    vehiData->valType = vehicle_data_type::TYPE_UINT32;
    int ret = testObj.getInt(data, SigInd_CanRxSRS_EDR_DELTA_VMAX_X_1);
    EXPECT_EQ(ret , 0);
    
#endif
}

/**
 *   @brief This is a test script for the data_collector_can_getInt function
 *   @classID data_collector_can
 *   @methodID getInt
 *   @paramList 
 *   @priority P2
 *   @resolution_Method
 *   @test_condition
 *   @test_Coverage_Item
 *   @test_case_ID data_collector_can_getInt_TC003
 *   @test_type functionality
 *   @test_objective
 *   @test_precon
 *   @test_input
 *   @test_expected_result
 *   @test_module
 *   @design_id
 */

TEST_F(data_collector_canTest, data_collector_can_getInt_TC003){
// Please enable and make test code here!!
#ifndef CAN_TYPE_GEN3
    // Please check source file, make mock files and insert EXPECT_CALL for callee functions.
    CanDataCollector::Impl testObj;
    ITest_ServiceManager *svcMgr = new ITest_ServiceManager();
    ON_CALL(*M_MockAndroidService, defaultServiceManager()).WillByDefault(Return(svcMgr));
    testVehicleManagerService *data = new testVehicleManagerService();
    ON_CALL(*M_MockAndroidService, getService(_)).WillByDefault(Return(data));
    sp<VehicleData> vehiData = new VehicleData();
    EXPECT_CALL(*M_testVehicleManagerService, getVehicleValue(_,_)).WillRepeatedly(Return(vehiData));
    vehiData->valType = vehicle_data_type::TYPE_UINT32;
    vehiData->valUint32 = 200;
    int ret = testObj.getInt(data, SigInd_CanRxSRS_EDR_DELTA_VMAX_X_1);
    EXPECT_EQ(ret , -56);
    
#endif
}

/**
 *   @brief This is a test script for the data_collector_can_getInt function
 *   @classID data_collector_can
 *   @methodID getInt
 *   @paramList 
 *   @priority P2
 *   @resolution_Method
 *   @test_condition
 *   @test_Coverage_Item
 *   @test_case_ID data_collector_can_getInt_TC004
 *   @test_type functionality
 *   @test_objective
 *   @test_precon
 *   @test_input
 *   @test_expected_result
 *   @test_module
 *   @design_id
 */

TEST_F(data_collector_canTest, data_collector_can_getInt_TC004){
// Please enable and make test code here!!
#ifndef CAN_TYPE_GEN3
    // Please check source file, make mock files and insert EXPECT_CALL for callee functions.
    CanDataCollector::Impl testObj;
    //ITest_ServiceManager *svcMgr = new ITest_ServiceManager();
    ON_CALL(*M_MockAndroidService, defaultServiceManager()).WillByDefault(Return(nullptr));
    testVehicleManagerService *data = new testVehicleManagerService();
    ON_CALL(*M_MockAndroidService, getService(_)).WillByDefault(Return(data));
    sp<VehicleData> vehiData = new VehicleData();
    EXPECT_CALL(*M_testVehicleManagerService, getVehicleValue(_,_)).WillRepeatedly(Return(vehiData));
    vehiData->valType = vehicle_data_type::TYPE_UINT32;
    vehiData->valUint32 = 200;
    int ret = testObj.getInt(data, SigInd_CanRxSRS_EDR_DELTA_VMAX_X_1);
    EXPECT_EQ(ret , -56);
    
#endif
}

/**
 *   @brief This is a test script for the data_collector_can_getInt function
 *   @classID data_collector_can
 *   @methodID getInt
 *   @paramList 
 *   @priority P2
 *   @resolution_Method
 *   @test_condition
 *   @test_Coverage_Item
 *   @test_case_ID data_collector_can_getInt_TC005
 *   @test_type functionality
 *   @test_objective
 *   @test_precon
 *   @test_input
 *   @test_expected_result
 *   @test_module
 *   @design_id
 */

TEST_F(data_collector_canTest, data_collector_can_getInt_TC005){
// Please enable and make test code here!!
#ifndef CAN_TYPE_GEN3
    // Please check source file, make mock files and insert EXPECT_CALL for callee functions.
    CanDataCollector::Impl testObj;
    //ITest_ServiceManager *svcMgr = new ITest_ServiceManager();
    ON_CALL(*M_MockAndroidService, defaultServiceManager()).WillByDefault(Return(nullptr));
    testVehicleManagerService *data = new testVehicleManagerService();
    ON_CALL(*M_MockAndroidService, getService(_)).WillByDefault(Return(data));
    sp<VehicleData> vehiData = new VehicleData();
    EXPECT_CALL(*M_testVehicleManagerService, getVehicleValue(_,_)).WillRepeatedly(Return(vehiData));
    vehiData->valType = vehicle_data_type::TYPE_ERROR;
    vehiData->valUint32 = 200;
    int ret = testObj.getInt(data, SigInd_CanRxSRS_EDR_DELTA_VMAX_X_1);
    EXPECT_EQ(ret , 0);
    
#endif
}


/**
 *   @brief This is a test script for the data_collector_can_getString function
 *   @classID data_collector_can
 *   @methodID getString
 *   @paramList 
 *   @priority P2
 *   @resolution_Method
 *   @test_condition
 *   @test_Coverage_Item
 *   @test_case_ID data_collector_can_getString_TC001
 *   @test_type functionality
 *   @test_objective
 *   @test_precon
 *   @test_input
 *   @test_expected_result
 *   @test_module
 *   @design_id
 */

TEST_F(data_collector_canTest, data_collector_can_getString_TC001){
// Please enable and make test code here!!
#if 1
    // Please check source file, make mock files and insert EXPECT_CALL for callee functions.
    CanDataCollector::Impl testObj;
    //ITest_ServiceManager *svcMgr = new ITest_ServiceManager();
    ON_CALL(*M_MockAndroidService, defaultServiceManager()).WillByDefault(Return(nullptr));
    testVehicleManagerService *data = new testVehicleManagerService();
    ON_CALL(*M_MockAndroidService, getService(_)).WillByDefault(Return(data));
    sp<VehicleData> vehiData = new VehicleData();
    EXPECT_CALL(*M_testVehicleManagerService, getVehicleValue(_,_)).WillRepeatedly(Return(vehiData));
    vehiData->valType = vehicle_data_type::TYPE_ERROR;
    vehiData->valUint32 = 200;
    std::string ret = testObj.getString(data, SigInd_CanRxSRS_CDS_FRONT, "unknown");
    EXPECT_EQ(ret , "unknown");
    
#endif
}

/**
 *   @brief This is a test script for the data_collector_can_getString function
 *   @classID data_collector_can
 *   @methodID getString
 *   @paramList 
 *   @priority P2
 *   @resolution_Method
 *   @test_condition
 *   @test_Coverage_Item
 *   @test_case_ID data_collector_can_getString_TC002
 *   @test_type functionality
 *   @test_objective
 *   @test_precon
 *   @test_input
 *   @test_expected_result
 *   @test_module
 *   @design_id
 */

TEST_F(data_collector_canTest, data_collector_can_getString_TC002){
// Please enable and make test code here!!
#if 1
    // Please check source file, make mock files and insert EXPECT_CALL for callee functions.
    CanDataCollector::Impl testObj;
    //ITest_ServiceManager *svcMgr = new ITest_ServiceManager();
    ON_CALL(*M_MockAndroidService, defaultServiceManager()).WillByDefault(Return(nullptr));
    testVehicleManagerService *data = new testVehicleManagerService();
    ON_CALL(*M_MockAndroidService, getService(_)).WillByDefault(Return(data));
    sp<VehicleData> vehiData = new VehicleData();
    EXPECT_CALL(*M_testVehicleManagerService, getVehicleValue(_,_)).WillRepeatedly(Return(vehiData));
    vehiData->valType = vehicle_data_type::TYPE_UINT32;
    vehiData->valUint32 = 200;
    std::string ret = testObj.getString(data, SigInd_CanRxSRS_CDS_FRONT, "unknown");
    EXPECT_EQ(ret , "unknown");
    
#endif
}

/**
 *   @brief This is a test script for the data_collector_can_getString function
 *   @classID data_collector_can
 *   @methodID getString
 *   @paramList 
 *   @priority P2
 *   @resolution_Method
 *   @test_condition
 *   @test_Coverage_Item
 *   @test_case_ID data_collector_can_getString_TC003
 *   @test_type functionality
 *   @test_objective
 *   @test_precon
 *   @test_input
 *   @test_expected_result
 *   @test_module
 *   @design_id
 */

TEST_F(data_collector_canTest, data_collector_can_getString_TC003){
// Please enable and make test code here!!
#if 1
    // Please check source file, make mock files and insert EXPECT_CALL for callee functions.
    CanDataCollector::Impl testObj;
    //ITest_ServiceManager *svcMgr = new ITest_ServiceManager();
    ON_CALL(*M_MockAndroidService, defaultServiceManager()).WillByDefault(Return(nullptr));
    testVehicleManagerService *data = new testVehicleManagerService();
    ON_CALL(*M_MockAndroidService, getService(_)).WillByDefault(Return(data));
    sp<VehicleData> vehiData = new VehicleData();
    EXPECT_CALL(*M_testVehicleManagerService, getVehicleValue(_,_)).WillRepeatedly(Return(vehiData));
    vehiData->valType = vehicle_data_type::TYPE_ERROR;
    vehiData->valUint32 = 200;
    std::string ret = testObj.getString(data, SigInd_CanRxSRS_CDS_FRONT, "unknown");
    EXPECT_EQ(ret , "unknown");
    
#endif
}

/**
 *   @brief This is a test script for the data_collector_can_getString function
 *   @classID data_collector_can
 *   @methodID getString
 *   @paramList 
 *   @priority P2
 *   @resolution_Method
 *   @test_condition
 *   @test_Coverage_Item
 *   @test_case_ID data_collector_can_getString_TC004
 *   @test_type functionality
 *   @test_objective
 *   @test_precon
 *   @test_input
 *   @test_expected_result
 *   @test_module
 *   @design_id
 */

TEST_F(data_collector_canTest, data_collector_can_getString_TC004){
// Please enable and make test code here!!
#if 1
    // Please check source file, make mock files and insert EXPECT_CALL for callee functions.
    CanDataCollector::Impl testObj;
    ITest_ServiceManager *svcMgr = new ITest_ServiceManager();
    ON_CALL(*M_MockAndroidService, defaultServiceManager()).WillByDefault(Return(svcMgr));
    testVehicleManagerService *data = new testVehicleManagerService();
    ON_CALL(*M_MockAndroidService, getService(_)).WillByDefault(Return(data));
    sp<VehicleData> vehiData = new VehicleData();
    EXPECT_CALL(*M_testVehicleManagerService, getVehicleValue(_,_)).WillRepeatedly(Return(vehiData));
    vehiData->valType = vehicle_data_type::TYPE_UINT32;
    vehiData->valUint32 = 0;
    std::string ret = testObj.getString(data, SigInd_CanRxSRS_CDS_FRONT, "unknown");
    EXPECT_EQ(ret , "notActivated");
    
#endif
}

/**
 *   @brief This is a test script for the data_collector_can_getString function
 *   @classID data_collector_can
 *   @methodID getString
 *   @paramList 
 *   @priority P2
 *   @resolution_Method
 *   @test_condition
 *   @test_Coverage_Item
 *   @test_case_ID data_collector_can_getString_TC005
 *   @test_type functionality
 *   @test_objective
 *   @test_precon
 *   @test_input
 *   @test_expected_result
 *   @test_module
 *   @design_id
 */

TEST_F(data_collector_canTest, data_collector_can_getString_TC005){
// Please enable and make test code here!!
#if 1
    // Please check source file, make mock files and insert EXPECT_CALL for callee functions.
    CanDataCollector::Impl testObj;
    ITest_ServiceManager *svcMgr = new ITest_ServiceManager();
    ON_CALL(*M_MockAndroidService, defaultServiceManager()).WillByDefault(Return(svcMgr));
    testVehicleManagerService *data = new testVehicleManagerService();
    ON_CALL(*M_MockAndroidService, getService(_)).WillByDefault(Return(data));
    sp<VehicleData> vehiData = new VehicleData();
    EXPECT_CALL(*M_testVehicleManagerService, getVehicleValue(_,_)).WillRepeatedly(Return(vehiData));
    vehiData->valType = vehicle_data_type::TYPE_UINT32;
    vehiData->valUint32 = 1;
    std::string ret = testObj.getString(data, SigInd_CanRxSRS_CDS_FRONT, "unknown");
    EXPECT_EQ(ret , "activated");
    
#endif
}

/**
 *   @brief This is a test script for the data_collector_can_getString function
 *   @classID data_collector_can
 *   @methodID getString
 *   @paramList
 *   @priority P2
 *   @resolution_Method
 *   @test_condition
 *   @test_Coverage_Item
 *   @test_case_ID data_collector_can_getString_TC006
 *   @test_type functionality
 *   @test_objective
 *   @test_precon
 *   @test_input
 *   @test_expected_result
 *   @test_module
 *   @design_id
 */

TEST_F(data_collector_canTest, data_collector_can_getString_TC006){
// Please enable and make test code here!!
#if 1
    // Please check source file, make mock files and insert EXPECT_CALL for callee functions.
    CanDataCollector::Impl testObj;
    ITest_ServiceManager *svcMgr = new ITest_ServiceManager();
    ON_CALL(*M_MockAndroidService, defaultServiceManager()).WillByDefault(Return(svcMgr));
    testVehicleManagerService *data = new testVehicleManagerService();
    ON_CALL(*M_MockAndroidService, getService(_)).WillByDefault(Return(data));
    sp<VehicleData> vehiData = new VehicleData();
    EXPECT_CALL(*M_testVehicleManagerService, getVehicleValue(_,_)).WillRepeatedly(Return(vehiData));
    vehiData->valType = vehicle_data_type::TYPE_UINT32;
    vehiData->valUint32 = 2;
    std::string ret = testObj.getString(data, SigInd_CanRxSRS_CDS_FRONT, "unknown");
    EXPECT_EQ(ret , "notApplicable");

#endif
}

/**
 *   @brief This is a test script for the data_collector_can_getString function
 *   @classID data_collector_can
 *   @methodID getString
 *   @paramList
 *   @priority P2
 *   @resolution_Method
 *   @test_condition
 *   @test_Coverage_Item
 *   @test_case_ID data_collector_can_getString_TC007
 *   @test_type functionality
 *   @test_objective
 *   @test_precon
 *   @test_input
 *   @test_expected_result
 *   @test_module
 *   @design_id
 */

TEST_F(data_collector_canTest, data_collector_can_getString_TC007){
// Please enable and make test code here!!
#if 1
    // Please check source file, make mock files and insert EXPECT_CALL for callee functions.
    CanDataCollector::Impl testObj;
    ITest_ServiceManager *svcMgr = new ITest_ServiceManager();
    ON_CALL(*M_MockAndroidService, defaultServiceManager()).WillByDefault(Return(svcMgr));
    testVehicleManagerService *data = new testVehicleManagerService();
    ON_CALL(*M_MockAndroidService, getService(_)).WillByDefault(Return(data));
    sp<VehicleData> vehiData = new VehicleData();
    EXPECT_CALL(*M_testVehicleManagerService, getVehicleValue(_,_)).WillRepeatedly(Return(vehiData));
    vehiData->valType = vehicle_data_type::TYPE_UINT32;
    vehiData->valUint32 = 3;
    std::string ret = testObj.getString(data, SigInd_CanRxSRS_CDS_FRONT, "unknown");
    EXPECT_EQ(ret , "unknown");

#endif
}

/**
 *   @brief This is a test script for the data_collector_can_getString function
 *   @classID data_collector_can
 *   @methodID getString
 *   @paramList
 *   @priority P2
 *   @resolution_Method
 *   @test_condition
 *   @test_Coverage_Item
 *   @test_case_ID data_collector_can_getString_TC008
 *   @test_type functionality
 *   @test_objective
 *   @test_precon
 *   @test_input
 *   @test_expected_result
 *   @test_module
 *   @design_id
 */

TEST_F(data_collector_canTest, data_collector_can_getString_TC008){
// Please enable and make test code here!!
#if 1
    // Please check source file, make mock files and insert EXPECT_CALL for callee functions.
    CanDataCollector::Impl testObj;
    ITest_ServiceManager *svcMgr = new ITest_ServiceManager();
    ON_CALL(*M_MockAndroidService, defaultServiceManager()).WillByDefault(Return(svcMgr));
    testVehicleManagerService *data = new testVehicleManagerService();
    ON_CALL(*M_MockAndroidService, getService(_)).WillByDefault(Return(data));
    sp<VehicleData> vehiData = new VehicleData();
    EXPECT_CALL(*M_testVehicleManagerService, getVehicleValue(_,_)).WillRepeatedly(Return(vehiData));
    vehiData->valType = vehicle_data_type::TYPE_UINT32;
    vehiData->valUint32 = 20;
    std::string ret = testObj.getString(data, SigInd_CanRxSRS_CDS_FRONT, "unknown");
    EXPECT_EQ(ret , "unknown");

#endif
}


/**
 *   @brief This is a test script for the CanDataCollector_getString function
 *   @classID CanDataCollector
 *   @methodID getString
 *   @paramList 
 *   @priority P2
 *   @resolution_Method
 *   @test_condition
 *   @test_Coverage_Item
 *   @test_case_ID CanDataCollector_getString_TC006
 *   @test_type functionality
 *   @test_objective
 *   @test_precon
 *   @test_input
 *   @test_expected_result
 *   @test_module
 *   @design_id
 */

TEST_F(CanDataCollectorTest, CanDataCollector_getString_TC006){
// Please enable and make test code here!!
#if 1
    // Please check source file, make mock files and insert EXPECT_CALL for callee functions.
    CanDataCollector::Impl testObj;
    ITest_ServiceManager *svcMgr = new ITest_ServiceManager();
    ON_CALL(*M_MockAndroidService, defaultServiceManager()).WillByDefault(Return(svcMgr));
    testVehicleManagerService *data = new testVehicleManagerService();
    ON_CALL(*M_MockAndroidService, getService(_)).WillByDefault(Return(data));
    sp<VehicleData> vehiData = new VehicleData();
    EXPECT_CALL(*M_testVehicleManagerService, getVehicleValue(_,_)).WillRepeatedly(Return(vehiData));
    vehiData->valType = vehicle_data_type::TYPE_UINT32;
    vehiData->valUint32 = 2;
    std::string ret = testObj.getString(data, SigInd_CanRxSRS_CDS_FRONT, "unknown");
    EXPECT_EQ(ret , "notApplicable");
    
#endif
}

/**
 *   @brief This is a test script for the CanDataCollector_getString function
 *   @classID CanDataCollector
 *   @methodID getString
 *   @paramList 
 *   @priority P2
 *   @resolution_Method
 *   @test_condition
 *   @test_Coverage_Item
 *   @test_case_ID CanDataCollector_getString_TC007
 *   @test_type functionality
 *   @test_objective
 *   @test_precon
 *   @test_input
 *   @test_expected_result
 *   @test_module
 *   @design_id
 */

TEST_F(CanDataCollectorTest, CanDataCollector_getString_TC007){
// Please enable and make test code here!!
#if 1
    // Please check source file, make mock files and insert EXPECT_CALL for callee functions.
    CanDataCollector::Impl testObj;
    ITest_ServiceManager *svcMgr = new ITest_ServiceManager();
    ON_CALL(*M_MockAndroidService, defaultServiceManager()).WillByDefault(Return(svcMgr));
    testVehicleManagerService *data = new testVehicleManagerService();
    ON_CALL(*M_MockAndroidService, getService(_)).WillByDefault(Return(data));
    sp<VehicleData> vehiData = new VehicleData();
    EXPECT_CALL(*M_testVehicleManagerService, getVehicleValue(_,_)).WillRepeatedly(Return(vehiData));
    vehiData->valType = vehicle_data_type::TYPE_UINT32;
    vehiData->valUint32 = 3;
    std::string ret = testObj.getString(data, SigInd_CanRxSRS_CDS_FRONT, "unknown");
    EXPECT_EQ(ret , "unknown");
    
#endif
}

/**
 *   @brief This is a test script for the CanDataCollector_getString function
 *   @classID CanDataCollector
 *   @methodID getString
 *   @paramList 
 *   @priority P2
 *   @resolution_Method
 *   @test_condition
 *   @test_Coverage_Item
 *   @test_case_ID CanDataCollector_getString_TC008
 *   @test_type functionality
 *   @test_objective
 *   @test_precon
 *   @test_input
 *   @test_expected_result
 *   @test_module
 *   @design_id
 */

TEST_F(CanDataCollectorTest, CanDataCollector_getString_TC008){
// Please enable and make test code here!!
#if 0
    // Please check source file, make mock files and insert EXPECT_CALL for callee functions.
    CanDataCollector::Impl testObj;
    ITest_ServiceManager *svcMgr = new ITest_ServiceManager();
    ON_CALL(*M_MockAndroidService, defaultServiceManager()).WillByDefault(Return(svcMgr));
    testVehicleManagerService *data = new testVehicleManagerService();
    ON_CALL(*M_MockAndroidService, getService(_)).WillByDefault(Return(data));
    sp<VehicleData> vehiData = new VehicleData();
    EXPECT_CALL(*M_testVehicleManagerService, getVehicleValue(_,_)).WillRepeatedly(Return(vehiData));
    vehiData->valType = vehicle_data_type::TYPE_UINT32;
    vehiData->valUint32 = 20;
    std::string ret = testObj.getString(data, SigInd_CanRxSRS_CDS_FRONT, "unknown");
    EXPECT_EQ(ret , "unknown");
    
#endif
}

/**
 *   @brief This is a test script for the data_collector_can_decodeBelt function
 *   @classID data_collector_can
 *   @methodID decodeBelt
 *   @paramList 
 *   @priority P2
 *   @resolution_Method
 *   @test_condition
 *   @test_Coverage_Item
 *   @test_case_ID data_collector_can_decodeBelt_TC001
 *   @test_type functionality
 *   @test_objective
 *   @test_precon
 *   @test_input
 *   @test_expected_result
 *   @test_module
 *   @design_id
 */

TEST_F(data_collector_canTest, data_collector_can_decodeBelt_TC001) {
// Please enable and make test code here!!
#if 1
    // Please check source file, make mock files and insert EXPECT_CALL for callee functions.
    CanDataCollector::Impl testObj;
    //ITest_ServiceManager *svcMgr = new ITest_ServiceManager();
    ON_CALL(*M_MockAndroidService, defaultServiceManager()).WillByDefault(Return(nullptr));
    testVehicleManagerService *data = new testVehicleManagerService();
    ON_CALL(*M_MockAndroidService, getService(_)).WillByDefault(Return(data));
    sp<VehicleData> vehiData = new VehicleData();
    EXPECT_CALL(*M_testVehicleManagerService, getVehicleValue(_,_)).WillRepeatedly(Return(vehiData));
    vehiData->valType = vehicle_data_type::TYPE_ERROR;
    vehiData->valUint32 = 200;
    std::string ret = testObj.decodeBelt(data, SigInd_CanRxSRS_CDS_FRONT);
    EXPECT_EQ(ret , "unknown");
    
#endif
}

/**
 *   @brief This is a test script for the data_collector_can_decodeBelt function
 *   @classID data_collector_can
 *   @methodID decodeBelt
 *   @paramList 
 *   @priority P2
 *   @resolution_Method
 *   @test_condition
 *   @test_Coverage_Item
 *   @test_case_ID data_collector_can_decodeBelt_TC002
 *   @test_type functionality
 *   @test_objective
 *   @test_precon
 *   @test_input
 *   @test_expected_result
 *   @test_module
 *   @design_id
 */

TEST_F(data_collector_canTest, data_collector_can_decodeBelt_TC002){
// Please enable and make test code here!!
#if 1
    // Please check source file, make mock files and insert EXPECT_CALL for callee functions.
    CanDataCollector::Impl testObj;
    //ITest_ServiceManager *svcMgr = new ITest_ServiceManager();
    ON_CALL(*M_MockAndroidService, defaultServiceManager()).WillByDefault(Return(nullptr));
    testVehicleManagerService *data = new testVehicleManagerService();
    ON_CALL(*M_MockAndroidService, getService(_)).WillByDefault(Return(data));
    sp<VehicleData> vehiData = new VehicleData();
    EXPECT_CALL(*M_testVehicleManagerService, getVehicleValue(_,_)).WillRepeatedly(Return(vehiData));
    vehiData->valType = vehicle_data_type::TYPE_UINT32;
    vehiData->valUint32 = 200;
    std::string ret = testObj.decodeBelt(data, SigInd_CanRxSRS_CDS_FRONT);
    EXPECT_EQ(ret , "unknown");
    
#endif
}

/**
 *   @brief This is a test script for the data_collector_can_decodeBelt function
 *   @classID data_collector_can
 *   @methodID decodeBelt
 *   @paramList 
 *   @priority P2
 *   @resolution_Method
 *   @test_condition
 *   @test_Coverage_Item
 *   @test_case_ID data_collector_can_decodeBelt_TC003
 *   @test_type functionality
 *   @test_objective
 *   @test_precon
 *   @test_input
 *   @test_expected_result
 *   @test_module
 *   @design_id
 */

TEST_F(data_collector_canTest, data_collector_can_decodeBelt_TC003){
// Please enable and make test code here!!
#if 1
    // Please check source file, make mock files and insert EXPECT_CALL for callee functions.
    CanDataCollector::Impl testObj;
    //ITest_ServiceManager *svcMgr = new ITest_ServiceManager();
    ON_CALL(*M_MockAndroidService, defaultServiceManager()).WillByDefault(Return(nullptr));
    testVehicleManagerService *data = new testVehicleManagerService();
    ON_CALL(*M_MockAndroidService, getService(_)).WillByDefault(Return(data));
    sp<VehicleData> vehiData = new VehicleData();
    EXPECT_CALL(*M_testVehicleManagerService, getVehicleValue(_,_)).WillRepeatedly(Return(vehiData));
    vehiData->valType = vehicle_data_type::TYPE_ERROR;
    vehiData->valUint32 = 200;
    std::string ret = testObj.decodeBelt(data, SigInd_CanRxSRS_CDS_FRONT);
    EXPECT_EQ(ret , "unknown");
    
#endif
}

/**
 *   @brief This is a test script for the data_collector_can_decodeBelt function
 *   @classID data_collector_can
 *   @methodID decodeBelt
 *   @paramList 
 *   @priority P2
 *   @resolution_Method
 *   @test_condition
 *   @test_Coverage_Item
 *   @test_case_ID data_collector_can_decodeBelt_TC004
 *   @test_type functionality
 *   @test_objective
 *   @test_precon
 *   @test_input
 *   @test_expected_result
 *   @test_module
 *   @design_id
 */

TEST_F(data_collector_canTest, data_collector_can_decodeBelt_TC004){
// Please enable and make test code here!!
#if 1
    // Please check source file, make mock files and insert EXPECT_CALL for callee functions.
    CanDataCollector::Impl testObj;
    ITest_ServiceManager *svcMgr = new ITest_ServiceManager();
    ON_CALL(*M_MockAndroidService, defaultServiceManager()).WillByDefault(Return(svcMgr));
    testVehicleManagerService *data = new testVehicleManagerService();
    ON_CALL(*M_MockAndroidService, getService(_)).WillByDefault(Return(data));
    sp<VehicleData> vehiData = new VehicleData();
    EXPECT_CALL(*M_testVehicleManagerService, getVehicleValue(_,_)).WillRepeatedly(Return(vehiData));
    vehiData->valType = vehicle_data_type::TYPE_UINT32;
    vehiData->valUint32 = 0;
    std::string ret = testObj.decodeBelt(data, SigInd_CanRxSRS_CDS_FRONT);
    EXPECT_EQ(ret , "notActivated");
    
#endif
}

/**
 *   @brief This is a test script for the data_collector_can_decodeBelt function
 *   @classID data_collector_can
 *   @methodID decodeBelt
 *   @paramList 
 *   @priority P2
 *   @resolution_Method
 *   @test_condition
 *   @test_Coverage_Item
 *   @test_case_ID data_collector_can_decodeBelt_TC005
 *   @test_type functionality
 *   @test_objective
 *   @test_precon
 *   @test_input
 *   @test_expected_result
 *   @test_module
 *   @design_id
 */

TEST_F(data_collector_canTest, data_collector_can_decodeBelt_TC005){
// Please enable and make test code here!!
#if 1
    // Please check source file, make mock files and insert EXPECT_CALL for callee functions.
    CanDataCollector::Impl testObj;
    ITest_ServiceManager *svcMgr = new ITest_ServiceManager();
    ON_CALL(*M_MockAndroidService, defaultServiceManager()).WillByDefault(Return(svcMgr));
    testVehicleManagerService *data = new testVehicleManagerService();
    ON_CALL(*M_MockAndroidService, getService(_)).WillByDefault(Return(data));
    sp<VehicleData> vehiData = new VehicleData();
    EXPECT_CALL(*M_testVehicleManagerService, getVehicleValue(_,_)).WillRepeatedly(Return(vehiData));
    vehiData->valType = vehicle_data_type::TYPE_UINT32;
    vehiData->valUint32 = 1;
    std::string ret = testObj.decodeBelt(data, SigInd_CanRxSRS_CDS_FRONT);
    EXPECT_EQ(ret , "activated");
    
#endif
}

/**
 *   @brief This is a test script for the data_collector_can_decodeBelt function
 *   @classID data_collector_can
 *   @methodID decodeBelt
 *   @paramList 
 *   @priority P2
 *   @resolution_Method
 *   @test_condition
 *   @test_Coverage_Item
 *   @test_case_ID data_collector_can_decodeBelt_TC006
 *   @test_type functionality
 *   @test_objective
 *   @test_precon
 *   @test_input
 *   @test_expected_result
 *   @test_module
 *   @design_id
 */

TEST_F(data_collector_canTest, data_collector_can_decodeBelt_TC006){
// Please enable and make test code here!!
#if 1
    // Please check source file, make mock files and insert EXPECT_CALL for callee functions.
    CanDataCollector::Impl testObj;
    ITest_ServiceManager *svcMgr = new ITest_ServiceManager();
    ON_CALL(*M_MockAndroidService, defaultServiceManager()).WillByDefault(Return(svcMgr));
    testVehicleManagerService *data = new testVehicleManagerService();
    ON_CALL(*M_MockAndroidService, getService(_)).WillByDefault(Return(data));
    sp<VehicleData> vehiData = new VehicleData();
    EXPECT_CALL(*M_testVehicleManagerService, getVehicleValue(_,_)).WillRepeatedly(Return(vehiData));
    vehiData->valType = vehicle_data_type::TYPE_UINT32;
    vehiData->valUint32 = 2;
    std::string ret = testObj.decodeBelt(data, SigInd_CanRxSRS_CDS_FRONT);
    EXPECT_EQ(ret , "notApplicable");
    
#endif
}

/**
 *   @brief This is a test script for the data_collector_can_decodeBelt function
 *   @classID data_collector_can
 *   @methodID decodeBelt
 *   @paramList 
 *   @priority P2
 *   @resolution_Method
 *   @test_condition
 *   @test_Coverage_Item
 *   @test_case_ID data_collector_can_decodeBelt_TC007
 *   @test_type functionality
 *   @test_objective
 *   @test_precon
 *   @test_input
 *   @test_expected_result
 *   @test_module
 *   @design_id
 */

TEST_F(data_collector_canTest, data_collector_can_decodeBelt_TC007){
// Please enable and make test code here!!
#if 1
    // Please check source file, make mock files and insert EXPECT_CALL for callee functions.
    CanDataCollector::Impl testObj;
    ITest_ServiceManager *svcMgr = new ITest_ServiceManager();
    ON_CALL(*M_MockAndroidService, defaultServiceManager()).WillByDefault(Return(svcMgr));
    testVehicleManagerService *data = new testVehicleManagerService();
    ON_CALL(*M_MockAndroidService, getService(_)).WillByDefault(Return(data));
    sp<VehicleData> vehiData = new VehicleData();
    EXPECT_CALL(*M_testVehicleManagerService, getVehicleValue(_,_)).WillRepeatedly(Return(vehiData));
    vehiData->valType = vehicle_data_type::TYPE_UINT32;
    vehiData->valUint32 = 3;
    std::string ret = testObj.decodeBelt(data, SigInd_CanRxSRS_CDS_FRONT);
    EXPECT_EQ(ret , "unknown");
    
#endif
}

/**
 *   @brief This is a test script for the data_collector_can_decodeBelt function
 *   @classID data_collector_can
 *   @methodID decodeBelt
 *   @paramList 
 *   @priority P2
 *   @resolution_Method
 *   @test_condition
 *   @test_Coverage_Item
 *   @test_case_ID data_collector_can_decodeBelt_TC008
 *   @test_type functionality
 *   @test_objective
 *   @test_precon
 *   @test_input
 *   @test_expected_result
 *   @test_module
 *   @design_id
 */

TEST_F(data_collector_canTest, data_collector_can_decodeBelt_TC008){
// Please enable and make test code here!!
#if 0
    // Please check source file, make mock files and insert EXPECT_CALL for callee functions.
    CanDataCollector::Impl testObj;
    ITest_ServiceManager *svcMgr = new ITest_ServiceManager();
    ON_CALL(*M_MockAndroidService, defaultServiceManager()).WillByDefault(Return(svcMgr));
    testVehicleManagerService *data = new testVehicleManagerService();
    ON_CALL(*M_MockAndroidService, getService(_)).WillByDefault(Return(data));
    sp<VehicleData> vehiData = new VehicleData();
    EXPECT_CALL(*M_testVehicleManagerService, getVehicleValue(_,_)).WillRepeatedly(Return(vehiData));
    vehiData->valType = vehicle_data_type::TYPE_UINT32;
    vehiData->valUint32 = 20;
    std::string ret = testObj.decodeBelt(data, SigInd_CanRxSRS_CDS_FRONT);
    EXPECT_EQ(ret , "unknown");
    
#endif
}


/**
 *   @brief This is a test script for the data_collector_can_dumpData function
 *   @classID data_collector_can
 *   @methodID dumpData
 *   @paramList 
 *   @priority P2
 *   @resolution_Method
 *   @test_condition
 *   @test_Coverage_Item
 *   @test_case_ID data_collector_can_dumpData_TC001
 *   @test_type functionality
 *   @test_objective
 *   @test_precon
 *   @test_input
 *   @test_expected_result
 *   @test_module
 *   @design_id
 */

TEST_F(data_collector_canTest, data_collector_can_dumpData_TC001){
// Please enable and make test code here!!
#if 1
    // Please check source file, make mock files and insert EXPECT_CALL for callee functions.
    CanDataCollector::Impl testObj;
    VehicleData *vehiData = new VehicleData();
    vehiData->valType = TYPE_UINT64;
    vehiData->sigID = SigInd_CanTx_C_RESPA_EF88491;
    testObj.dumpData(vehiData);
    EXPECT_EQ(Bypass , true);
    
#endif
}

/**
 *   @brief This is a test script for the data_collector_can_dumpData function
 *   @classID data_collector_can
 *   @methodID dumpData
 *   @paramList 
 *   @priority P2
 *   @resolution_Method
 *   @test_condition
 *   @test_Coverage_Item
 *   @test_case_ID data_collector_can_dumpData_TC002
 *   @test_type functionality
 *   @test_objective
 *   @test_precon
 *   @test_input
 *   @test_expected_result
 *   @test_module
 *   @design_id
 */

TEST_F(data_collector_canTest, data_collector_can_dumpData_TC002){
// Please enable and make test code here!!
#if 1
    // Please check source file, make mock files and insert EXPECT_CALL for callee functions.
    CanDataCollector::Impl testObj;
    VehicleData *vehiData = new VehicleData();
    vehiData->valType = TYPE_UINT64;
    vehiData->sigID = SigInd_CanTx_C_RESPA_EF88491;
    testObj.dumpData(vehiData);
    EXPECT_EQ(Bypass , true);
    
#endif
}


/**
 *   @brief This is a test script for the data_collector_can_dumpData function
 *   @classID data_collector_can
 *   @methodID dumpData
 *   @paramList 
 *   @priority P2
 *   @resolution_Method
 *   @test_condition
 *   @test_Coverage_Item
 *   @test_case_ID data_collector_can_dumpData_TC003
 *   @test_type functionality
 *   @test_objective
 *   @test_precon
 *   @test_input
 *   @test_expected_result
 *   @test_module
 *   @design_id
 */

TEST_F(data_collector_canTest, data_collector_can_dumpData_TC003){
// Please enable and make test code here!!
#if 1
    // Please check source file, make mock files and insert EXPECT_CALL for callee functions.
    CanDataCollector::Impl testObj;
    VehicleData *vehiData = new VehicleData();
    vehiData->valType = TYPE_UINT64;
    vehiData->sigID = SigInd_CanTx_C_RESPA_EF88491;
    testObj.dumpData(vehiData);
    EXPECT_EQ(Bypass , true);
    
#endif
}



/**
 *   @brief This is a test script for the data_collector_can_toByteArrayString function
 *   @classID data_collector_can
 *   @methodID toByteArrayString
 *   @paramList
 *   @priority P2
 *   @resolution_Method
 *   @test_condition
 *   @test_Coverage_Item
 *   @test_case_ID data_collector_can_toByteArrayString_TC001
 *   @test_type functionality
 *   @test_objective
 *   @test_precon
 *   @test_input
 *   @test_expected_result
 *   @test_module
 *   @design_id
 */

TEST_F(data_collector_canTest, data_collector_can_toByteArrayString_TC001){
// Please enable and make test code here!!
#if 1
    // Please check source file, make mock files and insert EXPECT_CALL for callee functions.
    CanDataCollector::Impl testObj;
    uint8_t* data = new uint8_t;
    uint32_t size = 10;
    testObj.toByteArrayString(data, size);
    EXPECT_EQ(Bypass , true);

#endif
}
