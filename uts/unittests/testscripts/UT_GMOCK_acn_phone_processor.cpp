/*
 * test script file generated by uts
 */

#include "gtest/gtest.h"
#include "gmock/gmock.h"
#include <dlfcn.h>

#undef private
#define private public
#undef protected
#define protected public
#pragma GCC push_options
#pragma GCC optimize("O0")
#pragma GCC optimize("-fno-inline")
// Include Source File for testing!!
#include "../src/processor/acn_phone_processor.cpp"
#pragma GCC pop_options
//DLT_DECLARE_CONTEXT(ctxOEMCall);
//DLT_DECLARE_CONTEXT(ctxOEMCallMASS);
using namespace android;
using namespace oc;
using namespace cv;
using namespace sl;
#include "mock/service/Handler_mock.h"
#include "mock/service/BpBinder_mock.h"
#include "mock/service/IServiceManager_mock.h"
#include "mock/src/receiver/someip_manager_mock.h"
#include "mock/src/processor/processor_base_mock.h"
#include "mock/src/services_adapter/config_manager_adapter_mock.h"
#include "mock/src/services_adapter/hmi_manager_adapter_mock.h"
#include "mock/src/services_adapter/audio_manager_adapter_mock.h"
#include "mock/src/services_adapter/telephone_manager_adapter_mock.h"
#include "mock/src/services_adapter/app_manager_adapter_mock.h"
#include "mock/src/services_adapter/power_manager_adapter_mock.h"
#include "mock/src/services_adapter/rim_adapter_mock.h"
#include "mock/src/services_adapter/comm_manager_adapter_mock.h"
#include "mock/src/services_adapter/vehicle_variation_info_adapter_mock.h"
#include "mock/src/oem_call_handler_mock.h"
#include "mock/src/logger_mock.h"
#include "mock/src/utils/utils_common_mock.h"
#include "mock/src/data/data_builder_us_mock.h"
#include "mock/src/data/i_data_builder_mock.h"
#include <services/ApplicationManagerService/ApplicationManager.h>
#include "mock/service/ApplicationManager_mock.h"
#include "mock/src/oem_call_app_if_mock.h"
#include "mock/src/oem_call_app_constants_mock.h"
/*
 * Define Mock Class / function
*/
class Base_ACNPhoneProcessor {
public:
    virtual ~Base_ACNPhoneProcessor(){ }
};

class Mock_ACNPhoneProcessor : public Base_ACNPhoneProcessor {
public:
};

Mock_ACNPhoneProcessor *M_ACNPhoneProcessor;

using ::testing::Return;
using ::testing::_;
using ::testing::A;
using ::testing::ReturnRef;
using ::testing::Values;
using ::testing::SetArgPointee;
using ::testing::SetArrayArgument;
using ::testing::SaveArg;
using ::testing::SaveArgPointee;
using ::testing::DoAll;
using ::testing::Args;
using ::testing::AllOf;
using ::testing::AtLeast;
using ::testing::Combine;
bool Bypass = true;
class ACNPhoneProcessorTest : public ::testing::Test {
protected:
    virtual void SetUp()
    {
        M_ACNPhoneProcessor = new Mock_ACNPhoneProcessor();
        M_Common = new MockCommon();
        M_AppManagerAdapter = new MockAppManagerAdapter();
        M_someIP_manager = new MocksomeIP_manager();
        M_PowerManagerAdapter = new MockPowerManagerAdapter();
        M_OEMCallAppIF = new MockOEMCallAppIF();
        M_ConfigManager = new MockConfigManager();
        M_IDataBuilder = new MockIDataBuilder();
        M_Handler = new MockHandler();
        M_RIMAdapter = new MockRIMAdapter();
        M_DataBuilderUS = new MockDataBuilderUS();
        ecallapp::M_VehicleVariationAdapter = new ecallapp::MockVehicleVariationAdapter();
    }

    virtual void TearDown(){
        delete M_ACNPhoneProcessor;
        delete M_Common;
        delete M_AppManagerAdapter;
        delete M_someIP_manager;
        delete M_PowerManagerAdapter;
        delete M_ConfigManager;
        delete M_Handler;
        delete M_RIMAdapter;
        delete M_IDataBuilder;
        delete M_DataBuilderUS;
        delete ecallapp::M_VehicleVariationAdapter;
    }
};

/**
 *   @brief This is a test script for the ACNPhoneProcessor_ACNPhoneProcessor function
 *   @classID ACNPhoneProcessor
 *   @methodID ACNPhoneProcessor
 *   @paramList android::sp<OemCallHandler> spHandler, std::shared_ptr< AdapterLocator > adapters
 *   @priority P2
 *   @resolution_Method
 *   @test_condition
 *   @test_Coverage_Item
 *   @test_case_ID ACNPhoneProcessorTest_ACNPhoneProcessor_TC001
 *   @test_type functionality
 *   @test_objective
 *   @test_precon
 *   @test_input
 *   @test_expected_result
 *   @test_module
 *   @design_id
 */
TEST_F(ACNPhoneProcessorTest, ACNPhoneProcessor_ACNPhoneProcessor_TC001){
// Please enable and make test code here!!
#if 1
    // Please check source file, make mock files and insert EXPECT_CALL for callee functions.
    ACNPhoneProcessor *testObj = new ACNPhoneProcessor();
    sp<sl::SLLooper> looper = new sl::SLLooper();
    MockOEMCallAppIF& app_ = *M_OEMCallAppIF;
    android::sp<OemCallHandler> spHandler = new OemCallHandler(looper, app_);
    std::shared_ptr<AdapterLocator> adapters = std::make_shared<AdapterLocator>(spHandler);
    EXPECT_EQ(Bypass, true);
#endif
}

/**
 *   @brief This is a test script for the ACNPhoneProcessor_init function
 *   @classID ACNPhoneProcessor
 *   @methodID init
 *   @paramList android::sp<OemCallHandler> spHandler, std::shared_ptr< AdapterLocator > adapters
 *   @priority P2
 *   @resolution_Method
 *   @test_condition
 *   @test_Coverage_Item
 *   @test_case_ID ACNPhoneProcessorTest_init_TC001
 *   @test_type functionality
 *   @test_objective
 *   @test_precon
 *   @test_input
 *   @test_expected_result
 *   @test_module
 *   @design_id
 */
TEST_F(ACNPhoneProcessorTest, ACNPhoneProcessor_init_TC001){
// Please enable and make test code here!!
#if 1
    // Please check source file, make mock files and insert EXPECT_CALL for callee functions.
    ACNPhoneProcessor *testObj = new ACNPhoneProcessor();
    sp<sl::SLLooper> looper = new sl::SLLooper();
    MockOEMCallAppIF& app_ = *M_OEMCallAppIF;
    android::sp<OemCallHandler> spHandler = new OemCallHandler(looper, app_);
    std::shared_ptr<AdapterLocator> adapters = std::make_shared<AdapterLocator>(spHandler);
    testObj->init(spHandler, adapters);
    EXPECT_EQ(Bypass, true);
#endif
}

/**
 *   @brief This is a test script for the ACNPhoneProcessor_init function
 *   @classID ACNPhoneProcessor
 *   @methodID init
 *   @paramList android::sp<OemCallHandler> spHandler, std::shared_ptr< AdapterLocator > adapters
 *   @priority P2
 *   @resolution_Method
 *   @test_condition
 *   @test_Coverage_Item
 *   @test_case_ID ACNPhoneProcessorTest_init_TC003
 *   @test_type functionality
 *   @test_objective
 *   @test_precon
 *   @test_input
 *   @test_expected_result
 *   @test_module
 *   @design_id
 */
TEST_F(ACNPhoneProcessorTest, ACNPhoneProcessor_init_TC003){
// Please enable and make test code here!!
#if 1
    // Please check source file, make mock files and insert EXPECT_CALL for callee functions.
    ACNPhoneProcessor *testObj = new ACNPhoneProcessor();
    sp<sl::SLLooper> looper = new sl::SLLooper();
    MockOEMCallAppIF& app_ = *M_OEMCallAppIF;
    android::sp<OemCallHandler> spHandler = new OemCallHandler(looper, app_);
    std::shared_ptr<AdapterLocator> adapters = std::make_shared<AdapterLocator>(spHandler);
    testObj->init(spHandler, adapters);
    EXPECT_EQ(Bypass, true);
#endif
}

/**
 *   @brief This is a test script for the ACNPhoneProcessor_sendData function
 *   @classID ACNPhoneProcessor
 *   @methodID sendData
 *   @paramList android::sp<OemCallHandler> spHandler, std::shared_ptr< AdapterLocator > adapters
 *   @priority P2
 *   @resolution_Method
 *   @test_condition
 *   @test_Coverage_Item
 *   @test_case_ID ACNPhoneProcessorTest_sendData_TC001
 *   @test_type functionality
 *   @test_objective
 *   @test_precon
 *   @test_input
 *   @test_expected_result
 *   @test_module
 *   @design_id
 */
TEST_F(ACNPhoneProcessorTest, ACNPhoneProcessor_sendData_TC001){
// Please enable and make test code here!!
#if 1
    // Please check source file, make mock files and insert EXPECT_CALL for callee functions.
    ACNPhoneProcessor *testObj = new ACNPhoneProcessor();
    testObj->impl_->spAdapters = std::make_shared<AdapterLocator>(nullptr);
    ITest_DataBuilder temp;
    EXPECT_CALL(*M_DataBuilderUS, setCDS(_)).WillRepeatedly(ReturnRef((temp)));
    EXPECT_CALL(*M_IDataBuilder, setGPS()).WillRepeatedly(ReturnRef(temp));
    EXPECT_CALL(*M_IDataBuilder, setUtil(_)).WillRepeatedly(ReturnRef(temp));
    EXPECT_CALL(*M_PowerManagerAdapter, getIgnition()).WillRepeatedly(Return("unknown"));
    EXPECT_CALL(*M_IDataBuilder, build()).WillRepeatedly(Return("OK"));
    EXPECT_CALL(*M_RIMAdapter, send(_,_)).WillRepeatedly(Return());
    EXPECT_CALL(*M_PowerManagerAdapter, requestBUBModeACNPhone(_)).WillRepeatedly(Return(true));
    EXPECT_CALL(*M_AppManagerAdapter, getFeatureState(_)).WillRepeatedly(Return(true));
    testObj->impl_->sendData();
    delete testObj;
    EXPECT_EQ(Bypass, true);
#endif
}

/**
 *   @brief This is a test script for the ACNPhoneProcessor_sendData function
 *   @classID ACNPhoneProcessor
 *   @methodID sendData
 *   @paramList android::sp<OemCallHandler> spHandler, std::shared_ptr< AdapterLocator > adapters
 *   @priority P2
 *   @resolution_Method
 *   @test_condition
 *   @test_Coverage_Item
 *   @test_case_ID ACNPhoneProcessorTest_sendData_TC002
 *   @test_type functionality
 *   @test_objective
 *   @test_precon
 *   @test_input
 *   @test_expected_result
 *   @test_module
 *   @design_id
 */
TEST_F(ACNPhoneProcessorTest, ACNPhoneProcessor_sendData_TC002){
// Please enable and make test code here!!
#if 1
    // Please check source file, make mock files and insert EXPECT_CALL for callee functions.
    ACNPhoneProcessor *testObj = new ACNPhoneProcessor();
    testObj->impl_->spAdapters = std::make_shared<AdapterLocator>(nullptr);
    ITest_DataBuilder temp;
    EXPECT_CALL(*M_DataBuilderUS, setCDS(_)).WillRepeatedly(ReturnRef((temp)));
    EXPECT_CALL(*M_IDataBuilder, setGPS()).WillRepeatedly(ReturnRef(temp));
    EXPECT_CALL(*M_IDataBuilder, setUtil(_)).WillRepeatedly(ReturnRef(temp));
    EXPECT_CALL(*M_PowerManagerAdapter, getIgnition()).WillRepeatedly(Return("unknown"));
    EXPECT_CALL(*M_IDataBuilder, build()).WillRepeatedly(Return("OK"));
    EXPECT_CALL(*M_RIMAdapter, send(_,_)).WillRepeatedly(Return());
    EXPECT_CALL(*M_PowerManagerAdapter, requestBUBModeACNPhone(_)).WillRepeatedly(Return(true));
    EXPECT_CALL(*M_AppManagerAdapter, getFeatureState(_)).WillRepeatedly(Return(true));
    testObj->impl_->sendData();
    delete testObj;
    EXPECT_EQ(Bypass, true);
#endif
}


/**
 *   @brief This is a test script for the ACNPhoneProcessor_sendData function
 *   @classID ACNPhoneProcessor
 *   @methodID sendData
 *   @paramList android::sp<OemCallHandler> spHandler, std::shared_ptr< AdapterLocator > adapters
 *   @priority P2
 *   @resolution_Method
 *   @test_condition
 *   @test_Coverage_Item
 *   @test_case_ID ACNPhoneProcessorTest_sendData_TC003
 *   @test_type functionality
 *   @test_objective
 *   @test_precon
 *   @test_input
 *   @test_expected_result
 *   @test_module
 *   @design_id
 */
TEST_F(ACNPhoneProcessorTest, ACNPhoneProcessor_sendData_TC003){
// Please enable and make test code here!!
#if 1
    // Please check source file, make mock files and insert EXPECT_CALL for callee functions.
    ACNPhoneProcessor *testObj = new ACNPhoneProcessor();
    testObj->impl_->spAdapters = std::make_shared<AdapterLocator>(nullptr);
    ITest_DataBuilder temp;
    EXPECT_CALL(*M_DataBuilderUS, setCDS(_)).WillRepeatedly(ReturnRef((temp)));
    EXPECT_CALL(*M_IDataBuilder, setGPS()).WillRepeatedly(ReturnRef(temp));
    EXPECT_CALL(*M_IDataBuilder, setUtil(_)).WillRepeatedly(ReturnRef(temp));
    EXPECT_CALL(*M_PowerManagerAdapter, getIgnition()).WillRepeatedly(Return("unknown"));
    EXPECT_CALL(*M_IDataBuilder, build()).WillRepeatedly(Return("OK"));
    EXPECT_CALL(*M_RIMAdapter, send(_,_)).WillRepeatedly(Return());
    EXPECT_CALL(*M_PowerManagerAdapter, requestBUBModeACNPhone(_)).WillRepeatedly(Return(true));
    EXPECT_CALL(*M_AppManagerAdapter, getFeatureState(_)).WillRepeatedly(Return(true));
    testObj->impl_->sendData();
    delete testObj;
    EXPECT_EQ(Bypass, true);
#endif
}



/**
 *   @brief This is a test script for the ACNPhoneProcessor_onStart function
 *   @classID ACNPhoneProcessor
 *   @methodID onStart
 *   @paramList android::sp<OemCallHandler> spHandler, std::shared_ptr< AdapterLocator > adapters
 *   @priority P2
 *   @resolution_Method
 *   @test_condition
 *   @test_Coverage_Item
 *   @test_case_ID ACNPhoneProcessorTest_onStartt_TC001
 *   @test_type functionality
 *   @test_objective
 *   @test_precon
 *   @test_input
 *   @test_expected_result
 *   @test_module
 *   @design_id
 */
TEST_F(ACNPhoneProcessorTest, ACNPhoneProcessor_onStart_TC001){
// Please enable and make test code here!!
#if 1
    // Please check source file, make mock files and insert EXPECT_CALL for callee functions.
    ACNPhoneProcessor *testObj = new ACNPhoneProcessor();
    testObj->impl_->spAdapters = std::make_shared<AdapterLocator>(nullptr);
    testObj->impl_->state = State::IDLE;
    const std::string type = self::acn_phone_postponse;
    const std::string name = self::feature_acn_phone;
    EXPECT_CALL(*M_AppManagerAdapter, requestActiveFeature(_)).WillRepeatedly(Return(false));
    testObj->impl_->onStart(type, name);
    EXPECT_EQ(Bypass, true);
#endif
}

/**
 *   @brief This is a test script for the ACNPhoneProcessor_onStart function
 *   @classID ACNPhoneProcessor
 *   @methodID onStart
 *   @paramList android::sp<OemCallHandler> spHandler, std::shared_ptr< AdapterLocator > adapters
 *   @priority P2
 *   @resolution_Method
 *   @test_condition
 *   @test_Coverage_Item
 *   @test_case_ID ACNPhoneProcessorTest_onStart_TC002
 *   @test_type functionality
 *   @test_objective
 *   @test_precon
 *   @test_input
 *   @test_expected_result
 *   @test_module
 *   @design_id
 */
TEST_F(ACNPhoneProcessorTest, ACNPhoneProcessor_onStart_TC002){
// Please enable and make test code here!!
#if 1
    // Please check source file, make mock files and insert EXPECT_CALL for callee functions.
    ACNPhoneProcessor *testObj = new ACNPhoneProcessor();
    testObj->impl_->spAdapters = std::make_shared<AdapterLocator>(nullptr);
    testObj->impl_->state = State::IDLE;
    const std::string type = self::acn_phone_postponse;
    const std::string name = self::feature_acn_phone;
    EXPECT_CALL(*M_AppManagerAdapter, requestActiveFeature(_)).WillRepeatedly(Return(true));
    EXPECT_CALL(*M_PowerManagerAdapter, requestBUBModeACNPhone(_)).WillRepeatedly(Return(true));
    testObj->impl_->onStart(type, name);
    EXPECT_EQ(Bypass, true);
#endif
}

/**
 *   @brief This is a test script for the ACNPhoneProcessor_onStart function
 *   @classID ACNPhoneProcessor
 *   @methodID onStart
 *   @paramList android::sp<OemCallHandler> spHandler, std::shared_ptr< AdapterLocator > adapters
 *   @priority P2
 *   @resolution_Method
 *   @test_condition
 *   @test_Coverage_Item
 *   @test_case_ID ACNPhoneProcessorTest_onStart_TC003
 *   @test_type functionality
 *   @test_objective
 *   @test_precon
 *   @test_input
 *   @test_expected_result
 *   @test_module
 *   @design_id
 */
TEST_F(ACNPhoneProcessorTest, ACNPhoneProcessor_onStart_TC003){
// Please enable and make test code here!!
#if 1
    // Please check source file, make mock files and insert EXPECT_CALL for callee functions.
    ACNPhoneProcessor *testObj = new ACNPhoneProcessor();
    testObj->impl_->spAdapters = std::make_shared<AdapterLocator>(nullptr);
    testObj->impl_->state = State::RUNNING;
    const std::string type = self::acn_phone_postponse;
    const std::string name = self::feature_acn_phone;
    testObj->impl_->onStart(type, name);
    EXPECT_EQ(Bypass, true);
#endif
}

/**
 *   @brief This is a test script for the ACNPhoneProcessor_onStart function
 *   @classID ACNPhoneProcessor
 *   @methodID onStart
 *   @paramList android::sp<OemCallHandler> spHandler, std::shared_ptr< AdapterLocator > adapters
 *   @priority P2
 *   @resolution_Method
 *   @test_condition
 *   @test_Coverage_Item
 *   @test_case_ID ACNPhoneProcessorTest_onStart_TC004
 *   @test_type functionality
 *   @test_objective
 *   @test_precon
 *   @test_input
 *   @test_expected_result
 *   @test_module
 *   @design_id
 */
TEST_F(ACNPhoneProcessorTest, ACNPhoneProcessor_onStart_TC004){
// Please enable and make test code here!!
#if 1
    // Please check source file, make mock files and insert EXPECT_CALL for callee functions.
    ACNPhoneProcessor *testObj = new ACNPhoneProcessor();
    testObj->impl_->spAdapters = std::make_shared<AdapterLocator>(nullptr);
    testObj->impl_->state = State::IDLE;
    const std::string type = self::acn_phone_postponse;
    const std::string name = self::feature_ecall_us;
    testObj->impl_->onUpgrade(type, name);
    EXPECT_EQ(Bypass, true);
#endif
}


/**
 *   @brief This is a test script for the ACNPhoneProcessor_onStart function
 *   @classID ACNPhoneProcessor
 *   @methodID onStart
 *   @paramList android::sp<OemCallHandler> spHandler, std::shared_ptr< AdapterLocator > adapters
 *   @priority P2
 *   @resolution_Method
 *   @test_condition
 *   @test_Coverage_Item
 *   @test_case_ID ACNPhoneProcessorTest_onStart_TC005
 *   @test_type functionality
 *   @test_objective
 *   @test_precon
 *   @test_input
 *   @test_expected_result
 *   @test_module
 *   @design_id
 */
TEST_F(ACNPhoneProcessorTest, ACNPhoneProcessor_onStart_TC005){
// Please enable and make test code here!!
#if 1
    // Please check source file, make mock files and insert EXPECT_CALL for callee functions.
    ACNPhoneProcessor *testObj = new ACNPhoneProcessor();
    testObj->impl_->spAdapters = std::make_shared<AdapterLocator>(nullptr);
    testObj->impl_->state = State::IDLE;
    const std::string type = self::acn_phone_type_1;
    const std::string name = self::feature_acn_phone;
    EXPECT_CALL(*M_AppManagerAdapter, requestActiveFeature(_)).WillRepeatedly(Return(true));
    EXPECT_CALL(*M_PowerManagerAdapter, requestBUBModeACNPhone(_)).WillRepeatedly(Return(true));
    EXPECT_CALL(*M_PowerManagerAdapter, acquirePowerLock()).WillRepeatedly(Return());
    EXPECT_CALL(*M_ConfigManager, getPrivacy(_,_)).WillRepeatedly(Return(true));
    EXPECT_CALL(*M_ConfigManager, isSubscripted(_)).WillRepeatedly(Return(true));
    EXPECT_CALL(*M_PowerManagerAdapter, getACCStatus()).WillRepeatedly(Return(MCU_VALUE_STATUS::MCU_STATUS_ON));
    EXPECT_CALL(*M_PowerManagerAdapter, getIGStatus()).WillRepeatedly(Return(MCU_VALUE_STATUS::MCU_STATUS_ON));
    ITest_DataBuilder temp;
    EXPECT_CALL(*M_DataBuilderUS, setCDS(_)).WillRepeatedly(ReturnRef((temp)));
    EXPECT_CALL(*M_IDataBuilder, setGPS()).WillRepeatedly(ReturnRef(temp));
    EXPECT_CALL(*M_IDataBuilder, setUtil(_)).WillRepeatedly(ReturnRef(temp));
    EXPECT_CALL(*M_PowerManagerAdapter, getIgnition()).WillRepeatedly(Return("unknown"));
    EXPECT_CALL(*M_IDataBuilder, build()).WillRepeatedly(Return("OK"));
    EXPECT_CALL(*M_RIMAdapter, send(_,_)).WillRepeatedly(Return());
    testObj->impl_->onStart(type, name);
    EXPECT_EQ(Bypass, true);
#endif
}

/**
 *   @brief This is a test script for the ACNPhoneProcessor_onStart function
 *   @classID ACNPhoneProcessor
 *   @methodID onStart
 *   @paramList android::sp<OemCallHandler> spHandler, std::shared_ptr< AdapterLocator > adapters
 *   @priority P2
 *   @resolution_Method
 *   @test_condition
 *   @test_Coverage_Item
 *   @test_case_ID ACNPhoneProcessorTest_onStart_TC006
 *   @test_type functionality
 *   @test_objective
 *   @test_precon
 *   @test_input
 *   @test_expected_result
 *   @test_module
 *   @design_id
 */
TEST_F(ACNPhoneProcessorTest, ACNPhoneProcessor_onStart_TC006){
// Please enable and make test code here!!
#if 1
    // Please check source file, make mock files and insert EXPECT_CALL for callee functions.
    ACNPhoneProcessor *testObj = new ACNPhoneProcessor();
    testObj->impl_->spAdapters = std::make_shared<AdapterLocator>(nullptr);
    testObj->impl_->state = State::RUNNING;
    const std::string type = self::acn_phone_postponse;
    const std::string name = self::feature_ecall_us;
    testObj->impl_->onUpgrade(type, name);
    EXPECT_EQ(Bypass, true);
#endif
}

/**
 *   @brief This is a test script for the ACNPhoneProcessor_onStart function
 *   @classID ACNPhoneProcessor
 *   @methodID onStart
 *   @paramList android::sp<OemCallHandler> spHandler, std::shared_ptr< AdapterLocator > adapters
 *   @priority P2
 *   @resolution_Method
 *   @test_condition
 *   @test_Coverage_Item
 *   @test_case_ID ACNPhoneProcessorTest_onStartt_TC007
 *   @test_type functionality
 *   @test_objective
 *   @test_precon
 *   @test_input
 *   @test_expected_result
 *   @test_module
 *   @design_id
 */
TEST_F(ACNPhoneProcessorTest, ACNPhoneProcessor_onStart_TC007){
// Please enable and make test code here!!
#if 1
    // Please check source file, make mock files and insert EXPECT_CALL for callee functions.
    ACNPhoneProcessor *testObj = new ACNPhoneProcessor();
    testObj->impl_->spAdapters = std::make_shared<AdapterLocator>(nullptr);
    testObj->impl_->state = State::IDLE;
    const std::string type = self::acn_phone_postponse;
    const std::string name = self::feature_ecall_us;
    EXPECT_CALL(*M_AppManagerAdapter, requestActiveFeature(_)).WillRepeatedly(Return(false));
    testObj->impl_->onStart(type, name);
    EXPECT_EQ(Bypass, true);
#endif
}

/**
 *   @brief This is a test script for the ACNPhoneProcessor_startAcnPhone function
 *   @classID ACNPhoneProcessor
 *   @methodID startAcnPhone
 *   @paramList android::sp<OemCallHandler> spHandler, std::shared_ptr< AdapterLocator > adapters
 *   @priority P2
 *   @resolution_Method
 *   @test_condition
 *   @test_Coverage_Item
 *   @test_case_ID ACNPhoneProcessorTest_startAcnPhone_TC001
 *   @test_type functionality
 *   @test_objective
 *   @test_precon
 *   @test_input
 *   @test_expected_result
 *   @test_module
 *   @design_id
 */
TEST_F(ACNPhoneProcessorTest, ACNPhoneProcessor_startAcnPhone_TC001){
// Please enable and make test code here!!
#if 1
    // Please check source file, make mock files and insert EXPECT_CALL for callee functions.
    ACNPhoneProcessor *testObj = new ACNPhoneProcessor();
    testObj->impl_->spAdapters = std::make_shared<AdapterLocator>(nullptr);
    std::string requestType = self::acn_phone_type_1;
    EXPECT_CALL(*M_PowerManagerAdapter, requestBUBModeACNPhone(_)).WillRepeatedly(Return(true));
    EXPECT_CALL(*M_PowerManagerAdapter, acquirePowerLock()).Times(1);
    EXPECT_CALL(*M_ConfigManager, getPrivacy(_,_)).WillRepeatedly(Return(false));
    testObj->impl_->startAcnPhone(requestType);
    EXPECT_EQ(Bypass, true);

#endif
}

/**
 *   @brief This is a test script for the ACNPhoneProcessor_startAcnPhone function
 *   @classID ACNPhoneProcessor
 *   @methodID startAcnPhone
 *   @paramList android::sp<OemCallHandler> spHandler, std::shared_ptr< AdapterLocator > adapters
 *   @priority P2
 *   @resolution_Method
 *   @test_condition
 *   @test_Coverage_Item
 *   @test_case_ID ACNPhoneProcessorTest_startAcnPhone_TC002
 *   @test_type functionality
 *   @test_objective
 *   @test_precon
 *   @test_input
 *   @test_expected_result
 *   @test_module
 *   @design_id
 */
TEST_F(ACNPhoneProcessorTest, ACNPhoneProcessor_startAcnPhone_TC002){
// Please enable and make test code here!!
#if 1
    // Please check source file, make mock files and insert EXPECT_CALL for callee functions.
    ACNPhoneProcessor *testObj = new ACNPhoneProcessor();
    testObj->impl_->spAdapters = std::make_shared<AdapterLocator>(nullptr);
    std::string requestType = self::acn_phone_type_1;
    EXPECT_CALL(*M_PowerManagerAdapter, requestBUBModeACNPhone(_)).WillRepeatedly(Return(true));
    testObj->impl_->startAcnPhone(requestType);
    EXPECT_EQ(Bypass, true);

#endif
}

/**
 *   @brief This is a test script for the ACNPhoneProcessor_startAcnPhone function
 *   @classID ACNPhoneProcessor
 *   @methodID startAcnPhone
 *   @paramList android::sp<OemCallHandler> spHandler, std::shared_ptr< AdapterLocator > adapters
 *   @priority P2
 *   @resolution_Method
 *   @test_condition
 *   @test_Coverage_Item
 *   @test_case_ID ACNPhoneProcessorTest_startAcnPhone_TC003
 *   @test_type functionality
 *   @test_objective
 *   @test_precon
 *   @test_input
 *   @test_expected_result
 *   @test_module
 *   @design_id
 */
TEST_F(ACNPhoneProcessorTest, ACNPhoneProcessor_startAcnPhone_TC003){
// Please enable and make test code here!!
#if 1
    // Please check source file, make mock files and insert EXPECT_CALL for callee functions.
    ACNPhoneProcessor *testObj = new ACNPhoneProcessor();
    testObj->impl_->spAdapters = std::make_shared<AdapterLocator>(nullptr);
    std::string requestType = self::acn_phone_type_1;
    EXPECT_CALL(*M_PowerManagerAdapter, requestBUBModeACNPhone(_)).WillRepeatedly(Return(true));
    EXPECT_CALL(*M_PowerManagerAdapter, acquirePowerLock()).Times(1);
    EXPECT_CALL(*M_ConfigManager, getPrivacy(_,_)).WillRepeatedly(Return(true));
    testObj->impl_->startAcnPhone(requestType);
    EXPECT_EQ(Bypass, true);

#endif
}

/**
 *   @brief This is a test script for the ACNPhoneProcessor_startAcnPhone function
 *   @classID ACNPhoneProcessor
 *   @methodID startAcnPhone
 *   @paramList android::sp<OemCallHandler> spHandler, std::shared_ptr< AdapterLocator > adapters
 *   @priority P2
 *   @resolution_Method
 *   @test_condition
 *   @test_Coverage_Item
 *   @test_case_ID ACNPhoneProcessorTest_startAcnPhone_TC004
 *   @test_type functionality
 *   @test_objective
 *   @test_precon
 *   @test_input
 *   @test_expected_result
 *   @test_module
 *   @design_id
 */
TEST_F(ACNPhoneProcessorTest, ACNPhoneProcessor_startAcnPhone_TC004){
// Please enable and make test code here!!
#if 1
    // Please check source file, make mock files and insert EXPECT_CALL for callee functions.
    ACNPhoneProcessor *testObj = new ACNPhoneProcessor();
    testObj->impl_->spAdapters = std::make_shared<AdapterLocator>(nullptr);
    std::string requestType = self::acn_phone_type_1;
    EXPECT_CALL(*M_PowerManagerAdapter, requestBUBModeACNPhone(_)).WillRepeatedly(Return(true));
    EXPECT_CALL(*M_PowerManagerAdapter, acquirePowerLock()).Times(1);
    EXPECT_CALL(*M_ConfigManager, getPrivacy(_,_)).WillRepeatedly(Return(true));
    EXPECT_CALL(*M_ConfigManager, isSubscripted(_)).WillRepeatedly(Return(true));
    EXPECT_CALL(*M_PowerManagerAdapter, getACCStatus()).WillRepeatedly(Return(MCU_VALUE_STATUS::MCU_STATUS_OFF));
    testObj->impl_->startAcnPhone(requestType);
    EXPECT_EQ(Bypass, true);

#endif
}

/**
 *   @brief This is a test script for the ACNPhoneProcessor_startAcnPhone function
 *   @classID ACNPhoneProcessor
 *   @methodID startAcnPhone
 *   @paramList android::sp<OemCallHandler> spHandler, std::shared_ptr< AdapterLocator > adapters
 *   @priority P2
 *   @resolution_Method
 *   @test_condition
 *   @test_Coverage_Item
 *   @test_case_ID ACNPhoneProcessorTest_startAcnPhone_TC005
 *   @test_type functionality
 *   @test_objective
 *   @test_precon
 *   @test_input
 *   @test_expected_result
 *   @test_module
 *   @design_id
 */
TEST_F(ACNPhoneProcessorTest, ACNPhoneProcessor_startAcnPhone_TC005){
// Please enable and make test code here!!
#if 1
    // Please check source file, make mock files and insert EXPECT_CALL for callee functions.
    ACNPhoneProcessor *testObj = new ACNPhoneProcessor();
    testObj->impl_->spAdapters = std::make_shared<AdapterLocator>(nullptr);
    std::string requestType = self::acn_phone_type_1;
    EXPECT_CALL(*M_PowerManagerAdapter, requestBUBModeACNPhone(_)).WillRepeatedly(Return(true));
    EXPECT_CALL(*M_PowerManagerAdapter, acquirePowerLock()).Times(1);
    EXPECT_CALL(*M_ConfigManager, getPrivacy(_,_)).WillRepeatedly(Return(true));
    EXPECT_CALL(*M_ConfigManager, isSubscripted(_)).WillRepeatedly(Return(true));
    EXPECT_CALL(*M_PowerManagerAdapter, getACCStatus()).WillRepeatedly(Return(MCU_VALUE_STATUS::MCU_STATUS_ON));
    EXPECT_CALL(*M_PowerManagerAdapter, getIGStatus()).WillRepeatedly(Return(MCU_VALUE_STATUS::MCU_STATUS_OFF));
    testObj->impl_->startAcnPhone(requestType);
    EXPECT_EQ(Bypass, true);

#endif
}

/**
 *   @brief This is a test script for the ACNPhoneProcessor_startAcnPhone function
 *   @classID ACNPhoneProcessor
 *   @methodID startAcnPhone
 *   @paramList android::sp<OemCallHandler> spHandler, std::shared_ptr< AdapterLocator > adapters
 *   @priority P2
 *   @resolution_Method
 *   @test_condition
 *   @test_Coverage_Item
 *   @test_case_ID ACNPhoneProcessorTest_startAcnPhone_TC006
 *   @test_type functionality
 *   @test_objective
 *   @test_precon
 *   @test_input
 *   @test_expected_result
 *   @test_module
 *   @design_id
 */
TEST_F(ACNPhoneProcessorTest, ACNPhoneProcessor_startAcnPhone_TC006){
// Please enable and make test code here!!
#if 1
    // Please check source file, make mock files and insert EXPECT_CALL for callee functions.
    ACNPhoneProcessor *testObj = new ACNPhoneProcessor();
    testObj->impl_->spAdapters = std::make_shared<AdapterLocator>(nullptr);
    std::string requestType = self::acn_phone_type_1;
    EXPECT_CALL(*M_PowerManagerAdapter, requestBUBModeACNPhone(_)).WillRepeatedly(Return(true));
    EXPECT_CALL(*M_PowerManagerAdapter, acquirePowerLock()).Times(1);
    EXPECT_CALL(*M_ConfigManager, getPrivacy(_,_)).WillRepeatedly(Return(true));
    EXPECT_CALL(*M_ConfigManager, isSubscripted(_)).WillRepeatedly(Return(true));
    EXPECT_CALL(*M_PowerManagerAdapter, getACCStatus()).WillRepeatedly(Return(MCU_VALUE_STATUS::MCU_STATUS_ON));
    EXPECT_CALL(*M_PowerManagerAdapter, getIGStatus()).WillRepeatedly(Return(MCU_VALUE_STATUS::MCU_STATUS_ON));
    ITest_DataBuilder temp;
    ITest_DataBuilder temp1;
    ITest_DataBuilder temp2;
    EXPECT_CALL(*M_DataBuilderUS, setCDS(_)).WillRepeatedly(ReturnRef((temp)));
    EXPECT_CALL(*M_IDataBuilder, setGPS()).WillRepeatedly(ReturnRef(temp1));
    EXPECT_CALL(*M_IDataBuilder, setUtil(_)).WillRepeatedly(ReturnRef(temp2));
    EXPECT_CALL(*M_PowerManagerAdapter, getIgnition()).WillRepeatedly(Return("unknown"));
    EXPECT_CALL(*M_IDataBuilder, build()).WillRepeatedly(Return("OK"));
    EXPECT_CALL(*M_RIMAdapter, send(_,_)).WillRepeatedly(Return());
    testObj->impl_->startAcnPhone(requestType);
    EXPECT_EQ(Bypass, true);

#endif
}

/**
 *   @brief This is a test script for the ACNPhoneProcessor_onTrigger function
 *   @classID ACNPhoneProcessor
 *   @methodID onTrigger
 *   @paramList android::sp<OemCallHandler> spHandler, std::shared_ptr< AdapterLocator > adapters
 *   @priority P2
 *   @resolution_Method
 *   @test_condition
 *   @test_Coverage_Item
 *   @test_case_ID ACNPhoneProcessorTest_onTrigger_TC001
 *   @test_type functionality
 *   @test_objective
 *   @test_precon
 *   @test_input
 *   @test_expected_result
 *   @test_module
 *   @design_id
 */
TEST_F(ACNPhoneProcessorTest, ACNPhoneProcessor_onTrigger_TC001){
// Please enable and make test code here!!
#if 1
    // Please check source file, make mock files and insert EXPECT_CALL for callee functions.
    ACNPhoneProcessor *testObj = new ACNPhoneProcessor();
    testObj->impl_->spAdapters = std::make_shared<AdapterLocator>(nullptr);
    const std::string type = self::acn_phone_type_1;
    const std::string name = self::feature_acn_phone;
    sp<sl::Message> ret_param_0 = sp<sl::Message>(new sl::Message);
    EXPECT_CALL(*M_Handler, obtainMessage_002(_)).WillRepeatedly(Return(ret_param_0));
    testObj->impl_->onTrigger(type, name);
    EXPECT_EQ(Bypass, true);

#endif
}

/**
 *   @brief This is a test script for the ACNPhoneProcessor_onTrigger function
 *   @classID ACNPhoneProcessor
 *   @methodID onTrigger
 *   @paramList android::sp<OemCallHandler> spHandler, std::shared_ptr< AdapterLocator > adapters
 *   @priority P2
 *   @resolution_Method
 *   @test_condition
 *   @test_Coverage_Item
 *   @test_case_ID ACNPhoneProcessorTest_onTrigger_TC002
 *   @test_type functionality
 *   @test_objective
 *   @test_precon
 *   @test_input
 *   @test_expected_result
 *   @test_module
 *   @design_id
 */
TEST_F(ACNPhoneProcessorTest, ACNPhoneProcessor_onTrigger_TC002){
// Please enable and make test code here!!
#if 1
    // Please check source file, make mock files and insert EXPECT_CALL for callee functions.
    ACNPhoneProcessor *testObj = new ACNPhoneProcessor();
    testObj->impl_->spAdapters = std::make_shared<AdapterLocator>(nullptr);
    const std::string type = self::acn_phone_type_2;
    const std::string name = self::feature_acn_phone;
    sp<sl::Message> ret_param_0 = sp<sl::Message>(new sl::Message);
    EXPECT_CALL(*M_Handler, obtainMessage_002(_)).WillRepeatedly(Return(ret_param_0));
    testObj->impl_->onTrigger(type, name);
    EXPECT_EQ(Bypass, true);

#endif
}

/**
 *   @brief This is a test script for the ACNPhoneProcessor_onTrigger function
 *   @classID ACNPhoneProcessor
 *   @methodID onTrigger
 *   @paramList android::sp<OemCallHandler> spHandler, std::shared_ptr< AdapterLocator > adapters
 *   @priority P2
 *   @resolution_Method
 *   @test_condition
 *   @test_Coverage_Item
 *   @test_case_ID ACNPhoneProcessorTest_onTrigger_TC003
 *   @test_type functionality
 *   @test_objective
 *   @test_precon
 *   @test_input
 *   @test_expected_result
 *   @test_module
 *   @design_id
 */
TEST_F(ACNPhoneProcessorTest, ACNPhoneProcessor_onTrigger_TC003){
// Please enable and make test code here!!
#if 1
    // Please check source file, make mock files and insert EXPECT_CALL for callee functions.
    ACNPhoneProcessor *testObj = new ACNPhoneProcessor();
    testObj->impl_->spAdapters = std::make_shared<AdapterLocator>(nullptr);
    const std::string type = self::acn_phone_postponse;
    const std::string name = self::feature_acn_phone;
    sp<sl::Message> ret_param_0 = sp<sl::Message>(new sl::Message);
    EXPECT_CALL(*M_Handler, obtainMessage_002(_)).WillRepeatedly(Return(ret_param_0));
    testObj->impl_->onTrigger(type, name);
    EXPECT_EQ(Bypass, true);

#endif
}

/**
 *   @brief This is a test script for the ACNPhoneProcessor_onUpgrade function
 *   @classID ACNPhoneProcessor
 *   @methodID onUpgrade
 *   @paramList android::sp<OemCallHandler> spHandler, std::shared_ptr< AdapterLocator > adapters
 *   @priority P2
 *   @resolution_Method
 *   @test_condition
 *   @test_Coverage_Item
 *   @test_case_ID ACNPhoneProcessorTest_onUpgrade_TC001
 *   @test_type functionality
 *   @test_objective
 *   @test_precon
 *   @test_input
 *   @test_expected_result
 *   @test_module
 *   @design_id
 */
TEST_F(ACNPhoneProcessorTest, ACNPhoneProcessor_onUpgrade_TC001){
// Please enable and make test code here!!
#if 1
    // Please check source file, make mock files and insert EXPECT_CALL for callee functions.
    ACNPhoneProcessor *testObj = new ACNPhoneProcessor();
    testObj->impl_->spAdapters = std::make_shared<AdapterLocator>(nullptr);
    testObj->impl_->state = State::IDLE;
    const std::string type = self::acn_phone_postponse;
    const std::string name = self::feature_acn_phone;
    EXPECT_CALL(*M_AppManagerAdapter, requestActiveFeature(_)).WillRepeatedly(Return(false));
    testObj->impl_->onUpgrade(type, name);
    EXPECT_EQ(Bypass, true);
#endif
}

/**
 *   @brief This is a test script for the ACNPhoneProcessor_onUpgrade function
 *   @classID ACNPhoneProcessor
 *   @methodID onUpgrade
 *   @paramList android::sp<OemCallHandler> spHandler, std::shared_ptr< AdapterLocator > adapters
 *   @priority P2
 *   @resolution_Method
 *   @test_condition
 *   @test_Coverage_Item
 *   @test_case_ID ACNPhoneProcessorTest_onUpgrade_TC002
 *   @test_type functionality
 *   @test_objective
 *   @test_precon
 *   @test_input
 *   @test_expected_result
 *   @test_module
 *   @design_id
 */
TEST_F(ACNPhoneProcessorTest, ACNPhoneProcessor_onUpgrade_TC002){
// Please enable and make test code here!!
#if 1
    // Please check source file, make mock files and insert EXPECT_CALL for callee functions.
    ACNPhoneProcessor *testObj = new ACNPhoneProcessor();
    testObj->impl_->spAdapters = std::make_shared<AdapterLocator>(nullptr);
    testObj->impl_->state = State::IDLE;
    const std::string type = self::acn_phone_postponse;
    const std::string name = self::feature_acn_phone;
    EXPECT_CALL(*M_AppManagerAdapter, requestActiveFeature(_)).WillRepeatedly(Return(true));
    EXPECT_CALL(*M_PowerManagerAdapter, requestBUBModeACNPhone(_)).WillRepeatedly(Return(true));
    testObj->impl_->onUpgrade(type, name);
    EXPECT_EQ(Bypass, true);
#endif
}

/**
 *   @brief This is a test script for the ACNPhoneProcessor_onUpgrade function
 *   @classID ACNPhoneProcessor
 *   @methodID onUpgrade
 *   @paramList android::sp<OemCallHandler> spHandler, std::shared_ptr< AdapterLocator > adapters
 *   @priority P2
 *   @resolution_Method
 *   @test_condition
 *   @test_Coverage_Item
 *   @test_case_ID ACNPhoneProcessorTest_onUpgrade_TC003
 *   @test_type functionality
 *   @test_objective
 *   @test_precon
 *   @test_input
 *   @test_expected_result
 *   @test_module
 *   @design_id
 */
TEST_F(ACNPhoneProcessorTest, ACNPhoneProcessor_onUpgrade_TC003){
// Please enable and make test code here!!
#if 1
    // Please check source file, make mock files and insert EXPECT_CALL for callee functions.
    ACNPhoneProcessor *testObj = new ACNPhoneProcessor();
    testObj->impl_->spAdapters = std::make_shared<AdapterLocator>(nullptr);
    testObj->impl_->state = State::RUNNING;
    const std::string type = self::acn_phone_postponse;
    const std::string name = self::feature_acn_phone;
    testObj->impl_->onUpgrade(type, name);
    EXPECT_EQ(Bypass, true);
#endif
}

/**
 *   @brief This is a test script for the ACNPhoneProcessor_onUpgrade function
 *   @classID ACNPhoneProcessor
 *   @methodID onUpgrade
 *   @paramList android::sp<OemCallHandler> spHandler, std::shared_ptr< AdapterLocator > adapters
 *   @priority P2
 *   @resolution_Method
 *   @test_condition
 *   @test_Coverage_Item
 *   @test_case_ID ACNPhoneProcessorTest_onUpgrade_TC004
 *   @test_type functionality
 *   @test_objective
 *   @test_precon
 *   @test_input
 *   @test_expected_result
 *   @test_module
 *   @design_id
 */
TEST_F(ACNPhoneProcessorTest, ACNPhoneProcessor_onUpgrade_TC004){
// Please enable and make test code here!!
#if 1
    // Please check source file, make mock files and insert EXPECT_CALL for callee functions.
    ACNPhoneProcessor *testObj = new ACNPhoneProcessor();
    testObj->impl_->spAdapters = std::make_shared<AdapterLocator>(nullptr);
    testObj->impl_->state = State::IDLE;
    const std::string type = self::acn_phone_postponse;
    const std::string name = self::feature_ecall_us;
    testObj->impl_->onUpgrade(type, name);
    EXPECT_EQ(Bypass, true);
#endif
}

/**
 *   @brief This is a test script for the ACNPhoneProcessor_onUpgrade function
 *   @classID ACNPhoneProcessor
 *   @methodID onUpgrade
 *   @paramList android::sp<OemCallHandler> spHandler, std::shared_ptr< AdapterLocator > adapters
 *   @priority P2
 *   @resolution_Method
 *   @test_condition
 *   @test_Coverage_Item
 *   @test_case_ID ACNPhoneProcessorTest_onUpgrade_TC005
 *   @test_type functionality
 *   @test_objective
 *   @test_precon
 *   @test_input
 *   @test_expected_result
 *   @test_module
 *   @design_id
 */
TEST_F(ACNPhoneProcessorTest, ACNPhoneProcessor_onUpgrade_TC005){
// Please enable and make test code here!!
#if 1
    // Please check source file, make mock files and insert EXPECT_CALL for callee functions.
    ACNPhoneProcessor *testObj = new ACNPhoneProcessor();
    testObj->impl_->spAdapters = std::make_shared<AdapterLocator>(nullptr);
    testObj->impl_->state = State::IDLE;
    const std::string type = self::acn_phone_type_1;
    const std::string name = self::feature_acn_phone;
    EXPECT_CALL(*M_AppManagerAdapter, requestActiveFeature(_)).WillRepeatedly(Return(true));
    EXPECT_CALL(*M_PowerManagerAdapter, requestBUBModeACNPhone(_)).WillRepeatedly(Return(true));
    EXPECT_CALL(*M_PowerManagerAdapter, acquirePowerLock()).WillRepeatedly(Return());
    EXPECT_CALL(*M_ConfigManager, getPrivacy(_,_)).WillRepeatedly(Return(true));
    EXPECT_CALL(*M_ConfigManager, isSubscripted(_)).WillRepeatedly(Return(true));
    EXPECT_CALL(*M_PowerManagerAdapter, getACCStatus()).WillRepeatedly(Return(MCU_VALUE_STATUS::MCU_STATUS_ON));
    EXPECT_CALL(*M_PowerManagerAdapter, getIGStatus()).WillRepeatedly(Return(MCU_VALUE_STATUS::MCU_STATUS_ON));
    ITest_DataBuilder temp;
    ITest_DataBuilder temp1;
    ITest_DataBuilder temp2;
    EXPECT_CALL(*M_DataBuilderUS, setCDS(_)).WillRepeatedly(ReturnRef((temp)));
    EXPECT_CALL(*M_IDataBuilder, setGPS()).WillRepeatedly(ReturnRef(temp1));
    EXPECT_CALL(*M_IDataBuilder, setUtil(_)).WillRepeatedly(ReturnRef(temp2));
    EXPECT_CALL(*M_PowerManagerAdapter, getIgnition()).WillRepeatedly(Return("unknown"));
    EXPECT_CALL(*M_IDataBuilder, build()).WillRepeatedly(Return("OK"));
    EXPECT_CALL(*M_RIMAdapter, send(_,_)).WillRepeatedly(Return());
    testObj->impl_->onUpgrade(type, name);
    EXPECT_EQ(Bypass, true);
#endif
}


/**
 *   @brief This is a test script for the ACNPhoneProcessor_onPostponed function
 *   @classID ACNPhoneProcessor
 *   @methodID onPostponed
 *   @paramList android::sp<OemCallHandler> spHandler, std::shared_ptr< AdapterLocator > adapters
 *   @priority P2
 *   @resolution_Method
 *   @test_condition
 *   @test_Coverage_Item
 *   @test_case_ID ACNPhoneProcessorTest_onPostponed_TC001
 *   @test_type functionality
 *   @test_objective
 *   @test_precon
 *   @test_input
 *   @test_expected_result
 *   @test_module
 *   @design_id
 */
TEST_F(ACNPhoneProcessorTest, ACNPhoneProcessor_onPostponed_TC001){
// Please enable and make test code here!!
#if 1
    // Please check source file, make mock files and insert EXPECT_CALL for callee functions.
    ACNPhoneProcessor *testObj = new ACNPhoneProcessor();
    const std::string type = self::acn_phone_postponse;
    const std::string name = self::feature_acn_phone;
    testObj->impl_->onPostponed(type, name);
    EXPECT_EQ(Bypass, true);
#endif
}



/**
 *   @brief This is a test script for the ACNPhoneProcessor_onStop function
 *   @classID ACNPhoneProcessor
 *   @methodID onStop
 *   @paramList android::sp<OemCallHandler> spHandler, std::shared_ptr< AdapterLocator > adapters
 *   @priority P2
 *   @resolution_Method
 *   @test_condition
 *   @test_Coverage_Item
 *   @test_case_ID ACNPhoneProcessorTest_onStop_TC001
 *   @test_type functionality
 *   @test_objective
 *   @test_precon
 *   @test_input
 *   @test_expected_result
 *   @test_module
 *   @design_id
 */
TEST_F(ACNPhoneProcessorTest, ACNPhoneProcessor_onStop_TC001){
// Please enable and make test code here!!
#if 1
    // Please check source file, make mock files and insert EXPECT_CALL for callee functions.
    ACNPhoneProcessor *testObj = new ACNPhoneProcessor();
    testObj->impl_->spAdapters = std::make_shared<AdapterLocator>(nullptr);
    testObj->impl_->state = State::RUNNING;
    const std::string type = self::acn_phone_postponse;
    const std::string name = self::feature_acn_phone;
    testObj->impl_->onStop(type, name);
    EXPECT_EQ(Bypass, true);
#endif
}

/**
 *   @brief This is a test script for the ACNPhoneProcessor_onStop function
 *   @classID ACNPhoneProcessor
 *   @methodID onStop
 *   @paramList android::sp<OemCallHandler> spHandler, std::shared_ptr< AdapterLocator > adapters
 *   @priority P2
 *   @resolution_Method
 *   @test_condition
 *   @test_Coverage_Item
 *   @test_case_ID ACNPhoneProcessorTest_onStop_TC002
 *   @test_type functionality
 *   @test_objective
 *   @test_precon
 *   @test_input
 *   @test_expected_result
 *   @test_module
 *   @design_id
 */
TEST_F(ACNPhoneProcessorTest, ACNPhoneProcessor_onStop_TC002){
// Please enable and make test code here!!
#if 1
    // Please check source file, make mock files and insert EXPECT_CALL for callee functions.
    ACNPhoneProcessor *testObj = new ACNPhoneProcessor();
    testObj->impl_->spAdapters = std::make_shared<AdapterLocator>(nullptr);
    testObj->impl_->state = State::IDLE;
    const std::string type = self::acn_phone_postponse;
    const std::string name = self::feature_acn_phone;
    testObj->impl_->onStop(type, name);
    EXPECT_EQ(Bypass, true);
#endif
}

/**
 *   @brief This is a test script for the ACNPhoneProcessor_onStop function
 *   @classID ACNPhoneProcessor
 *   @methodID onStop
 *   @paramList android::sp<OemCallHandler> spHandler, std::shared_ptr< AdapterLocator > adapters
 *   @priority P2
 *   @resolution_Method
 *   @test_condition
 *   @test_Coverage_Item
 *   @test_case_ID ACNPhoneProcessorTest_onStop_TC003
 *   @test_type functionality
 *   @test_objective
 *   @test_precon
 *   @test_input
 *   @test_expected_result
 *   @test_module
 *   @design_id
 */
TEST_F(ACNPhoneProcessorTest, ACNPhoneProcessor_onStop_TC003){
// Please enable and make test code here!!
#if 1
    // Please check source file, make mock files and insert EXPECT_CALL for callee functions.
    ACNPhoneProcessor *testObj = new ACNPhoneProcessor();
    testObj->impl_->state = State::IDLE;
    const std::string type = self::acn_phone_postponse;
    const std::string name = self::feature_acn_phone;
    auto ret = testObj->impl_->onStop(type, name);
    EXPECT_EQ(ret, true);
#endif
}

/**
 *   @brief This is a test script for the ACNPhoneProcessor_onStop function
 *   @classID ACNPhoneProcessor
 *   @methodID onStop
 *   @paramList android::sp<OemCallHandler> spHandler, std::shared_ptr< AdapterLocator > adapters
 *   @priority P2
 *   @resolution_Method
 *   @test_condition
 *   @test_Coverage_Item
 *   @test_case_ID ACNPhoneProcessorTest_onStop_TC004
 *   @test_type functionality
 *   @test_objective
 *   @test_precon
 *   @test_input
 *   @test_expected_result
 *   @test_module
 *   @design_id
 */
TEST_F(ACNPhoneProcessorTest, ACNPhoneProcessor_onStop_TC004){
// Please enable and make test code here!!
#if 1
    // Please check source file, make mock files and insert EXPECT_CALL for callee functions.
    ACNPhoneProcessor *testObj = new ACNPhoneProcessor();
    testObj->impl_->spAdapters = std::make_shared<AdapterLocator>(nullptr);
    testObj->impl_->state = State::RUNNING;
    const std::string type = self::acn_phone_postponse;
    const std::string name = self::feature_acn_phone;
    EXPECT_CALL(*M_PowerManagerAdapter, requestBUBModeACNPhone(_)).Times(1);
    EXPECT_CALL(*M_AppManagerAdapter, getFeatureState(_)).WillRepeatedly(Return(true));
    //EXPECT_CALL(*M_PowerManagerAdapter, releasePowerLock()).Times(1);
    EXPECT_CALL(*M_AppManagerAdapter, requestDeactiveFeature(_)).Times(1);
    auto ret = testObj->impl_->onStop(type, name);
    EXPECT_EQ(ret, false);
#endif
}

/**
 *   @brief This is a test script for the ACNPhoneProcessor_onIgnore function
 *   @classID ACNPhoneProcessor
 *   @methodID onIgnore
 *   @paramList android::sp<OemCallHandler> spHandler, std::shared_ptr< AdapterLocator > adapters
 *   @priority P2
 *   @resolution_Method
 *   @test_condition
 *   @test_Coverage_Item
 *   @test_case_ID ACNPhoneProcessorTest_onIgnore_TC001
 *   @test_type functionality
 *   @test_objective
 *   @test_precon
 *   @test_input
 *   @test_expected_result
 *   @test_module
 *   @design_id
 */
TEST_F(ACNPhoneProcessorTest, ACNPhoneProcessor_onIgnore_TC001){
// Please enable and make test code here!!
#if 1
    // Please check source file, make mock files and insert EXPECT_CALL for callee functions.
    ACNPhoneProcessor *testObj = new ACNPhoneProcessor();
    testObj->impl_->spAdapters = std::make_shared<AdapterLocator>(nullptr);
    testObj->impl_->state = State::IDLE;
    const std::string type = self::acn_phone_postponse;
    const std::string name = self::feature_acn_phone;
    testObj->impl_->onIgnore(type, name);
    EXPECT_EQ(Bypass, true);
#endif
}

/**
 *   @brief This is a test script for the ACNPhoneProcessor_onIgnore function
 *   @classID ACNPhoneProcessor
 *   @methodID onIgnore
 *   @paramList android::sp<OemCallHandler> spHandler, std::shared_ptr< AdapterLocator > adapters
 *   @priority P2
 *   @resolution_Method
 *   @test_condition
 *   @test_Coverage_Item
 *   @test_case_ID ACNPhoneProcessorTest_onIgnore_TC002
 *   @test_type functionality
 *   @test_objective
 *   @test_precon
 *   @test_input
 *   @test_expected_result
 *   @test_module
 *   @design_id
 */
TEST_F(ACNPhoneProcessorTest, ACNPhoneProcessor_onIgnore_TC002){
// Please enable and make test code here!!
#if 1
    // Please check source file, make mock files and insert EXPECT_CALL for callee functions.
    ACNPhoneProcessor *testObj = new ACNPhoneProcessor();
    const std::string type = self::acn_phone_postponse;
    const std::string name = self::feature_acn_phone;
    auto ret = testObj->impl_->onIgnore(type, name);
    EXPECT_EQ(ret, true);
#endif
}

/**
 *   @brief This is a test script for the ACNPhoneProcessor_onIgnore function
 *   @classID ACNPhoneProcessor
 *   @methodID onIgnore
 *   @paramList android::sp<OemCallHandler> spHandler, std::shared_ptr< AdapterLocator > adapters
 *   @priority P2
 *   @resolution_Method
 *   @test_condition
 *   @test_Coverage_Item
 *   @test_case_ID ACNPhoneProcessorTest_onIgnore_TC003
 *   @test_type functionality
 *   @test_objective
 *   @test_precon
 *   @test_input
 *   @test_expected_result
 *   @test_module
 *   @design_id
 */
TEST_F(ACNPhoneProcessorTest, ACNPhoneProcessor_onIgnore_TC003){
// Please enable and make test code here!!
#if 1
    // Please check source file, make mock files and insert EXPECT_CALL for callee functions.
    ACNPhoneProcessor *testObj = new ACNPhoneProcessor();
    const std::string type = self::acn_phone_postponse;
    const std::string name = self::feature_acn_phone;
    auto ret = testObj->impl_->onIgnore(type, name);
    EXPECT_EQ(ret, true);
#endif
}

/**
 *   @brief This is a test script for the ACNPhoneProcessor_updateState function
 *   @classID ACNPhoneProcessor
 *   @methodID updateState
 *   @paramList android::sp<OemCallHandler> spHandler, std::shared_ptr< AdapterLocator > adapters
 *   @priority P2
 *   @resolution_Method
 *   @test_condition
 *   @test_Coverage_Item
 *   @test_case_ID ACNPhoneProcessorTest_updateState_TC001
 *   @test_type functionality
 *   @test_objective
 *   @test_precon
 *   @test_input
 *   @test_expected_result
 *   @test_module
 *   @design_id
 */
TEST_F(ACNPhoneProcessorTest, ACNPhoneProcessor_updateState_TC001){
// Please enable and make test code here!!
#if 1
    // Please check source file, make mock files and insert EXPECT_CALL for callee functions.
    ACNPhoneProcessor *testObj = new ACNPhoneProcessor();
    testObj->impl_->updateState(State::IDLE);
    EXPECT_EQ(Bypass, true);
#endif
}

/**
 *   @brief This is a test script for the ACNPhoneProcessor_updateState function
 *   @classID ACNPhoneProcessor
 *   @methodID updateState
 *   @paramList android::sp<OemCallHandler> spHandler, std::shared_ptr< AdapterLocator > adapters
 *   @priority P2
 *   @resolution_Method
 *   @test_condition
 *   @test_Coverage_Item
 *   @test_case_ID ACNPhoneProcessorTest_updateState_TC002
 *   @test_type functionality
 *   @test_objective
 *   @test_precon
 *   @test_input
 *   @test_expected_result
 *   @test_module
 *   @design_id
 */
TEST_F(ACNPhoneProcessorTest, ACNPhoneProcessor_updateState_TC002){
// Please enable and make test code here!!
#if 1
    // Please check source file, make mock files and insert EXPECT_CALL for callee functions.
    ACNPhoneProcessor *testObj = new ACNPhoneProcessor();
    testObj->impl_->updateState(State::IDLE);
    EXPECT_EQ(Bypass, true);
#endif
}

/**
 *   @brief This is a test script for the ACNPhoneProcessor_updateState function
 *   @classID ACNPhoneProcessor
 *   @methodID updateState
 *   @paramList android::sp<OemCallHandler> spHandler, std::shared_ptr< AdapterLocator > adapters
 *   @priority P2
 *   @resolution_Method
 *   @test_condition
 *   @test_Coverage_Item
 *   @test_case_ID ACNPhoneProcessorTest_updateState_TC003
 *   @test_type functionality
 *   @test_objective
 *   @test_precon
 *   @test_input
 *   @test_expected_result
 *   @test_module
 *   @design_id
 */
TEST_F(ACNPhoneProcessorTest, ACNPhoneProcessor_updateState_TC003){
// Please enable and make test code here!!
#if 1
    // Please check source file, make mock files and insert EXPECT_CALL for callee functions.
    ACNPhoneProcessor *testObj = new ACNPhoneProcessor();
    testObj->impl_->updateState(State::IDLE);
    EXPECT_EQ(Bypass, true);
#endif
}




/**
 *   @brief This is a test script for the ACNPhoneProcessor_onPostponed function
 *   @classID ACNPhoneProcessor
 *   @methodID onPostponed
 *   @paramList android::sp<OemCallHandler> spHandler, std::shared_ptr< AdapterLocator > adapters
 *   @priority P2
 *   @resolution_Method
 *   @test_condition
 *   @test_Coverage_Item
 *   @test_case_ID ACNPhoneProcessorTest_onPostponed_TC002
 *   @test_type functionality
 *   @test_objective
 *   @test_precon
 *   @test_input
 *   @test_expected_result
 *   @test_module
 *   @design_id
 */
TEST_F(ACNPhoneProcessorTest, ACNPhoneProcessor_onPostponed_TC002){
// Please enable and make test code here!!
#if 1
    // Please check source file, make mock files and insert EXPECT_CALL for callee functions.
    ACNPhoneProcessor *testObj = new ACNPhoneProcessor();
    const std::string type = self::acn_phone_postponse;
    const std::string name = self::feature_acn_phone;
    testObj->impl_->onPostponed(type, name);
    EXPECT_EQ(Bypass, true);
#endif
}


/**
 *   @brief This is a test script for the ACNPhoneProcessor_onPostponed function
 *   @classID ACNPhoneProcessor
 *   @methodID onPostponed
 *   @paramList android::sp<OemCallHandler> spHandler, std::shared_ptr< AdapterLocator > adapters
 *   @priority P2
 *   @resolution_Method
 *   @test_condition
 *   @test_Coverage_Item
 *   @test_case_ID ACNPhoneProcessorTest_onPostponed_TC003
 *   @test_type functionality
 *   @test_objective
 *   @test_precon
 *   @test_input
 *   @test_expected_result
 *   @test_module
 *   @design_id
 */
TEST_F(ACNPhoneProcessorTest, ACNPhoneProcessor_onPostponed_TC003){
// Please enable and make test code here!!
#if 1
    // Please check source file, make mock files and insert EXPECT_CALL for callee functions.
    ACNPhoneProcessor *testObj = new ACNPhoneProcessor();
    const std::string type = self::acn_phone_postponse;
    const std::string name = self::feature_acn_phone;
    testObj->impl_->onPostponed(type, name);
    EXPECT_EQ(Bypass, true);
#endif
}





/**
 *   @brief This is a test script for the ACNPhoneProcessor_onSeverResponse function
 *   @classID ACNPhoneProcessor
 *   @methodID onSeverResponse
 *   @paramList android::sp<OemCallHandler> spHandler, std::shared_ptr< AdapterLocator > adapters
 *   @priority P2
 *   @resolution_Method
 *   @test_condition
 *   @test_Coverage_Item
 *   @test_case_ID ACNPhoneProcessorTest_onSeverResponse_TC001
 *   @test_type functionality
 *   @test_objective
 *   @test_precon
 *   @test_input
 *   @test_expected_result
 *   @test_module
 *   @design_id
 */
TEST_F(ACNPhoneProcessorTest, ACNPhoneProcessor_onSeverResponse_TC001){
// Please enable and make test code here!!
#if 1
    // Please check source file, make mock files and insert EXPECT_CALL for callee functions.
    ACNPhoneProcessor *testObj = new ACNPhoneProcessor();
    testObj->impl_->spAdapters = std::make_shared<AdapterLocator>(nullptr);
    testObj->impl_->state = State::RUNNING;
    sp<RIMResponseType> resp = new RIMResponseType();
    resp->serverResponse = serviceinfo::DataResResult::SUCCESS;
    EXPECT_CALL(*M_PowerManagerAdapter, requestBUBModeACNPhone(_)).Times(1);
    EXPECT_CALL(*M_AppManagerAdapter, getFeatureState(_)).WillRepeatedly(Return(true));
    //EXPECT_CALL(*M_PowerManagerAdapter, releasePowerLock()).Times(1);
    EXPECT_CALL(*M_AppManagerAdapter, requestDeactiveFeature(_)).Times(1);
    testObj->impl_->onSeverResponse(resp);
    EXPECT_EQ(Bypass, true);
#endif
}

/**
 *   @brief This is a test script for the ACNPhoneProcessor_onSeverResponse function
 *   @classID ACNPhoneProcessor
 *   @methodID onSeverResponse
 *   @paramList android::sp<OemCallHandler> spHandler, std::shared_ptr< AdapterLocator > adapters
 *   @priority P2
 *   @resolution_Method
 *   @test_condition
 *   @test_Coverage_Item
 *   @test_case_ID ACNPhoneProcessorTest_onSeverResponse_TC002
 *   @test_type functionality
 *   @test_objective
 *   @test_precon
 *   @test_input
 *   @test_expected_result
 *   @test_module
 *   @design_id
 */
TEST_F(ACNPhoneProcessorTest, ACNPhoneProcessor_onSeverResponse_TC002){
// Please enable and make test code here!!
#if 1
    // Please check source file, make mock files and insert EXPECT_CALL for callee functions.
    ACNPhoneProcessor *testObj = new ACNPhoneProcessor();
    testObj->impl_->spAdapters = std::make_shared<AdapterLocator>(nullptr);
    testObj->impl_->state = State::RUNNING;
    sp<RIMResponseType> resp = new RIMResponseType();
    resp->serverResponse = serviceinfo::DataResResult::FAILURE;
    EXPECT_CALL(*M_PowerManagerAdapter, requestBUBModeACNPhone(_)).Times(1);
    EXPECT_CALL(*M_AppManagerAdapter, getFeatureState(_)).WillRepeatedly(Return(true));
    //EXPECT_CALL(*M_PowerManagerAdapter, releasePowerLock()).Times(1);
    EXPECT_CALL(*M_AppManagerAdapter, requestDeactiveFeature(_)).Times(1);
    testObj->impl_->onSeverResponse(resp);
    EXPECT_EQ(Bypass, true);
#endif
}

/**
 *   @brief This is a test script for the ACNPhoneProcessor_onSeverResponse function
 *   @classID ACNPhoneProcessor
 *   @methodID onSeverResponse
 *   @paramList android::sp<OemCallHandler> spHandler, std::shared_ptr< AdapterLocator > adapters
 *   @priority P2
 *   @resolution_Method
 *   @test_condition
 *   @test_Coverage_Item
 *   @test_case_ID ACNPhoneProcessorTest_onSeverResponse_TC003
 *   @test_type functionality
 *   @test_objective
 *   @test_precon
 *   @test_input
 *   @test_expected_result
 *   @test_module
 *   @design_id
 */
TEST_F(ACNPhoneProcessorTest, ACNPhoneProcessor_onSeverResponse_TC003){
// Please enable and make test code here!!
#if 1
    // Please check source file, make mock files and insert EXPECT_CALL for callee functions.
    ACNPhoneProcessor *testObj = new ACNPhoneProcessor();
    testObj->impl_->spAdapters = std::make_shared<AdapterLocator>(nullptr);
    testObj->impl_->state = State::RUNNING;
    sp<RIMResponseType> resp = new RIMResponseType();
    resp->serverResponse = serviceinfo::DataResResult::FAILURE_RETRY;
    EXPECT_CALL(*M_PowerManagerAdapter, requestBUBModeACNPhone(_)).Times(1);
    EXPECT_CALL(*M_AppManagerAdapter, getFeatureState(_)).WillRepeatedly(Return(true));
    //EXPECT_CALL(*M_PowerManagerAdapter, releasePowerLock()).Times(1);
    EXPECT_CALL(*M_AppManagerAdapter, requestDeactiveFeature(_)).Times(1);
    testObj->impl_->onSeverResponse(resp);
    EXPECT_EQ(Bypass, true);
#endif
}

/**
 *   @brief This is a test script for the ACNPhoneProcessor_onSeverResponse function
 *   @classID ACNPhoneProcessor
 *   @methodID onSeverResponse
 *   @paramList android::sp<OemCallHandler> spHandler, std::shared_ptr< AdapterLocator > adapters
 *   @priority P2
 *   @resolution_Method
 *   @test_condition
 *   @test_Coverage_Item
 *   @test_case_ID ACNPhoneProcessorTest_onSeverResponse_TC004
 *   @test_type functionality
 *   @test_objective
 *   @test_precon
 *   @test_input
 *   @test_expected_result
 *   @test_module
 *   @design_id
 */
TEST_F(ACNPhoneProcessorTest, ACNPhoneProcessor_onSeverResponse_TC004){
// Please enable and make test code here!!
#if 1
    // Please check source file, make mock files and insert EXPECT_CALL for callee functions.
    ACNPhoneProcessor *testObj = new ACNPhoneProcessor();
    testObj->impl_->spAdapters = std::make_shared<AdapterLocator>(nullptr);
    testObj->impl_->state = State::RUNNING;
    sp<RIMResponseType> resp = new RIMResponseType();
    resp->serverResponse =  5;
    testObj->impl_->onSeverResponse(resp);
    EXPECT_EQ(Bypass, true);
#endif
}

/**
 *   @brief This is a test script for the ACNPhoneProcessor_onSeverResponse function
 *   @classID ACNPhoneProcessor
 *   @methodID onSeverResponse
 *   @paramList android::sp<OemCallHandler> spHandler, std::shared_ptr< AdapterLocator > adapters
 *   @priority P2
 *   @resolution_Method
 *   @test_condition
 *   @test_Coverage_Item
 *   @test_case_ID ACNPhoneProcessorTest_onSeverResponse_TC005
 *   @test_type functionality
 *   @test_objective
 *   @test_precon
 *   @test_input
 *   @test_expected_result
 *   @test_module
 *   @design_id
 */
TEST_F(ACNPhoneProcessorTest, ACNPhoneProcessor_onSeverResponse_TC005){
// Please enable and make test code here!!
#if 1
    // Please check source file, make mock files and insert EXPECT_CALL for callee functions.
    ACNPhoneProcessor *testObj = new ACNPhoneProcessor();
    testObj->impl_->spAdapters = std::make_shared<AdapterLocator>(nullptr);
    testObj->impl_->state = State::IDLE;
    sp<RIMResponseType> resp = new RIMResponseType();
    resp->serverResponse =  serviceinfo::DataResResult::FAILURE_RETRY;
    testObj->impl_->onSeverResponse(resp);
    EXPECT_EQ(Bypass, true);
#endif
}

/**
 *   @brief This is a test script for the ACNPhoneProcessor_onSeverResponse function
 *   @classID ACNPhoneProcessor
 *   @methodID onSeverResponse
 *   @paramList android::sp<OemCallHandler> spHandler, std::shared_ptr< AdapterLocator > adapters
 *   @priority P2
 *   @resolution_Method
 *   @test_condition
 *   @test_Coverage_Item
 *   @test_case_ID ACNPhoneProcessorTest_onSeverResponse_TC006
 *   @test_type functionality
 *   @test_objective
 *   @test_precon
 *   @test_input
 *   @test_expected_result
 *   @test_module
 *   @design_id
 */
TEST_F(ACNPhoneProcessorTest, ACNPhoneProcessor_onSeverResponse_TC006){
// Please enable and make test code here!!
#if 1
    // Please check source file, make mock files and insert EXPECT_CALL for callee functions.
    ACNPhoneProcessor *testObj = new ACNPhoneProcessor();
    testObj->impl_->spAdapters = std::make_shared<AdapterLocator>(nullptr);
    testObj->impl_->state = State::NOT_INIT;
    sp<RIMResponseType> resp = new RIMResponseType();
    resp->serverResponse =  serviceinfo::DataResResult::FAILURE_RETRY;
    testObj->impl_->onSeverResponse(resp);
    EXPECT_EQ(Bypass, true);
#endif
}


/**
 *   @brief This is a test script for the ACNPhoneProcessor_init function
 *   @classID ACNPhoneProcessor
 *   @methodID init
 *   @paramList android::sp<OemCallHandler> spHandler, std::shared_ptr< AdapterLocator > adapters
 *   @priority P2
 *   @resolution_Method
 *   @test_condition
 *   @test_Coverage_Item
 *   @test_case_ID ACNPhoneProcessorTest_init_TC002
 *   @test_type functionality
 *   @test_objective
 *   @test_precon
 *   @test_input
 *   @test_expected_result
 *   @test_module
 *   @design_id
 */
TEST_F(ACNPhoneProcessorTest, ACNPhoneProcessor_init_TC002){
// Please enable and make test code here!!
#if 1
    // Please check source file, make mock files and insert EXPECT_CALL for callee functions.
    ACNPhoneProcessor *testObj = new ACNPhoneProcessor();
    testObj->impl_->spAdapters = std::make_shared<AdapterLocator>(nullptr);
    //delete testObj->impl_;
    EXPECT_CALL(*M_AppManagerAdapter, getFeatureState(_)).WillRepeatedly(Return(true));
    delete testObj;
    EXPECT_EQ(Bypass, true);
#endif
}

/**
 *   @brief This is a test script for the ACNPhoneProcessor_isAvailable function
 *   @classID ACNPhoneProcessor
 *   @methodID isAvailable
 *   @paramList
 *   @priority P2
 *   @resolution_Method
 *   @test_condition
 *   @test_Coverage_Item
 *   @test_case_ID ACNPhoneProcessorTest_isAvailable_TC001
 *   @test_type functionality
 *   @test_objective
 *   @test_precon
 *   @test_input
 *   @test_expected_result
 *   @test_module
 *   @design_id
 */
TEST_F(ACNPhoneProcessorTest, ACNPhoneProcessor_isAvailable_TC001){
// Please enable and make test code here!!
#if 1
    // Please check source file, make mock files and insert EXPECT_CALL for callee functions.
    ACNPhoneProcessor *testObj = new ACNPhoneProcessor();
    EXPECT_CALL(*ecallapp::M_VehicleVariationAdapter, isFeatureAvailableInRegion(_)).WillRepeatedly(Return(false));
    auto ret = testObj->isAvailable();
    EXPECT_EQ(ret, false);
    //delete testObj;
#endif
}

/**
 *   @brief This is a test script for the ACNPhoneProcessor_isAvailable function
 *   @classID ACNPhoneProcessor
 *   @methodID isAvailable
 *   @paramList
 *   @priority P2
 *   @resolution_Method
 *   @test_condition
 *   @test_Coverage_Item
 *   @test_case_ID ACNPhoneProcessorTest_isAvailable_TC002
 *   @test_type functionality
 *   @test_objective
 *   @test_precon
 *   @test_input
 *   @test_expected_result
 *   @test_module
 *   @design_id
 */
TEST_F(ACNPhoneProcessorTest, ACNPhoneProcessor_isAvailable_TC002){
// Please enable and make test code here!!
#if 1
    // Please check source file, make mock files and insert EXPECT_CALL for callee functions.
    ACNPhoneProcessor *testObj = new ACNPhoneProcessor();
    EXPECT_CALL(*ecallapp::M_VehicleVariationAdapter, isFeatureAvailableInRegion(_)).WillRepeatedly(Return(false));
    auto ret = testObj->isAvailable();
    EXPECT_EQ(ret, false);
    //delete testObj;
#endif
}

/**
 *   @brief This is a test script for the ACNPhoneProcessor_isAvailable function
 *   @classID ACNPhoneProcessor
 *   @methodID isAvailable
 *   @paramList
 *   @priority P2
 *   @resolution_Method
 *   @test_condition
 *   @test_Coverage_Item
 *   @test_case_ID ACNPhoneProcessorTest_isAvailable_TC003
 *   @test_type functionality
 *   @test_objective
 *   @test_precon
 *   @test_input
 *   @test_expected_result
 *   @test_module
 *   @design_id
 */
TEST_F(ACNPhoneProcessorTest, ACNPhoneProcessor_isAvailable_TC003){
// Please enable and make test code here!!
#if 1
    // Please check source file, make mock files and insert EXPECT_CALL for callee functions.
    ACNPhoneProcessor *testObj = new ACNPhoneProcessor();
    EXPECT_CALL(*ecallapp::M_VehicleVariationAdapter, isFeatureAvailableInRegion(_)).WillRepeatedly(Return(false));
    auto ret = testObj->isAvailable();
    EXPECT_EQ(ret, false);
    //delete testObj;
#endif
}

/**
 *   @brief This is a test script for the ACNPhoneProcessor_doProcessorHandler function
 *   @classID ACNPhoneProcessor
 *   @methodID doProcessorHandler
 *   @paramList uint32_t what, const sp<sl::Message>& msg
 *   @priority P2
 *   @resolution_Method
 *   @test_condition
 *   @test_Coverage_Item
 *   @test_case_ID ACNPhoneProcessorTest_doProcessorHandler_TC001
 *   @test_type functionality
 *   @test_objective
 *   @test_precon
 *   @test_input
 *   @test_expected_result
 *   @test_module
 *   @design_id
 */
TEST_F(ACNPhoneProcessorTest, ACNPhoneProcessor_doProcessorHandler_TC001){
// Please enable and make test code here!!
#if 1
    // Please check source file, make mock files and insert EXPECT_CALL for callee functions.
    ACNPhoneProcessor *testObj = new ACNPhoneProcessor();
    sl::Message *msg = new sl::Message();
    testObj->doProcessorHandler(msg::MSG_CDS_TRIGGER_AFTER_WAITING, msg);
    EXPECT_EQ(Bypass, true);
#endif
}

/**
 *   @brief This is a test script for the ACNPhoneProcessor_doProcessorHandler function
 *   @classID ACNPhoneProcessor
 *   @methodID doProcessorHandler
 *   @paramList uint32_t what, const sp<sl::Message>& msg
 *   @priority P2
 *   @resolution_Method
 *   @test_condition
 *   @test_Coverage_Item
 *   @test_case_ID ACNPhoneProcessorTest_doProcessorHandler_TC002
 *   @test_type functionality
 *   @test_objective
 *   @test_precon
 *   @test_input
 *   @test_expected_result
 *   @test_module
 *   @design_id
 */
TEST_F(ACNPhoneProcessorTest, ACNPhoneProcessor_doProcessorHandler_TC002){
// Please enable and make test code here!!
#if 1
    // Please check source file, make mock files and insert EXPECT_CALL for callee functions.
    ACNPhoneProcessor *testObj = new ACNPhoneProcessor();
    testObj->impl_->state = State::RUNNING;
    testObj->impl_->country = 1;
    sl::Message *msg = new sl::Message();
    testObj->doProcessorHandler(msg::MSG_CDS_TRIGGER_AFTER_WAITING, msg);
    EXPECT_EQ(Bypass, true);
#endif
}

/**
 *   @brief This is a test script for the ACNPhoneProcessor_doProcessorHandler function
 *   @classID ACNPhoneProcessor
 *   @methodID doProcessorHandler
 *   @paramList uint32_t what, const sp<sl::Message>& msg
 *   @priority P2
 *   @resolution_Method
 *   @test_condition
 *   @test_Coverage_Item
 *   @test_case_ID ACNPhoneProcessorTest_doProcessorHandler_TC003
 *   @test_type functionality
 *   @test_objective
 *   @test_precon
 *   @test_input
 *   @test_expected_result
 *   @test_module
 *   @design_id
 */
TEST_F(ACNPhoneProcessorTest, ACNPhoneProcessor_doProcessorHandler_TC003){
// Please enable and make test code here!!
#if 1
    // Please check source file, make mock files and insert EXPECT_CALL for callee functions.
    ACNPhoneProcessor *testObj = new ACNPhoneProcessor();
    testObj->impl_->spAdapters = std::make_shared<AdapterLocator>(nullptr);
    testObj->impl_->state = State::RUNNING;
    testObj->impl_->country = 2;
    sl::Message *msg = new sl::Message();
    testObj->doProcessorHandler(msg::MSG_CDS_TRIGGER_AFTER_WAITING, msg);
    EXPECT_EQ(Bypass, true);
#endif
}

/**
 *   @brief This is a test script for the ACNPhoneProcessor_doProcessorHandler function
 *   @classID ACNPhoneProcessor
 *   @methodID doProcessorHandler
 *   @paramList uint32_t what, const sp<sl::Message>& msg
 *   @priority P2
 *   @resolution_Method
 *   @test_condition
 *   @test_Coverage_Item
 *   @test_case_ID ACNPhoneProcessorTest_doProcessorHandler_TC004
 *   @test_type functionality
 *   @test_objective
 *   @test_precon
 *   @test_input
 *   @test_expected_result
 *   @test_module
 *   @design_id
 */
TEST_F(ACNPhoneProcessorTest, ACNPhoneProcessor_doProcessorHandler_TC004){
// Please enable and make test code here!!
#if 1
    // Please check source file, make mock files and insert EXPECT_CALL for callee functions.
    ACNPhoneProcessor *testObj = new ACNPhoneProcessor();
    testObj->impl_->spAdapters = std::make_shared<AdapterLocator>(nullptr);
    testObj->impl_->state = State::RUNNING;
    testObj->impl_->country = 3;
    sl::Message *msg = new sl::Message();
    testObj->doProcessorHandler(msg::MSG_CDS_TRIGGER_AFTER_WAITING, msg);
    EXPECT_EQ(Bypass, true);
#endif
}

/**
 *   @brief This is a test script for the ACNPhoneProcessor_doProcessorHandler function
 *   @classID ACNPhoneProcessor
 *   @methodID doProcessorHandler
 *   @paramList uint32_t what, const sp<sl::Message>& msg
 *   @priority P2
 *   @resolution_Method
 *   @test_condition
 *   @test_Coverage_Item
 *   @test_case_ID ACNPhoneProcessorTest_doProcessorHandler_TC005
 *   @test_type functionality
 *   @test_objective
 *   @test_precon
 *   @test_input
 *   @test_expected_result
 *   @test_module
 *   @design_id
 */
TEST_F(ACNPhoneProcessorTest, ACNPhoneProcessor_doProcessorHandler_TC005){
// Please enable and make test code here!!
#if 1
    // Please check source file, make mock files and insert EXPECT_CALL for callee functions.
    ACNPhoneProcessor *testObj = new ACNPhoneProcessor();
    testObj->impl_->spAdapters = std::make_shared<AdapterLocator>(nullptr);
    testObj->impl_->state = State::RUNNING;
    testObj->impl_->country = 6;
    EXPECT_CALL(*M_AppManagerAdapter, getFeatureState(_)).WillRepeatedly(Return(true));
    sl::Message *msg = new sl::Message();
    testObj->doProcessorHandler(msg::MSG_CDS_TRIGGER_AFTER_WAITING, msg);
    EXPECT_EQ(Bypass, true);
#endif
}

/**
 *   @brief This is a test script for the ACNPhoneProcessor_doProcessorHandler function
 *   @classID ACNPhoneProcessor
 *   @methodID doProcessorHandler
 *   @paramList uint32_t what, const sp<sl::Message>& msg
 *   @priority P2
 *   @resolution_Method
 *   @test_condition
 *   @test_Coverage_Item
 *   @test_case_ID ACNPhoneProcessorTest_doProcessorHandler_TC006
 *   @test_type functionality
 *   @test_objective
 *   @test_precon
 *   @test_input
 *   @test_expected_result
 *   @test_module
 *   @design_id
 */
TEST_F(ACNPhoneProcessorTest, ACNPhoneProcessor_doProcessorHandler_TC006){
// Please enable and make test code here!!
#if 1
    // Please check source file, make mock files and insert EXPECT_CALL for callee functions.
    ACNPhoneProcessor *testObj = new ACNPhoneProcessor();
    testObj->impl_->spAdapters = std::make_shared<AdapterLocator>(nullptr);
    testObj->impl_->state = State::RUNNING;
    testObj->impl_->country = 5;
    EXPECT_CALL(*M_AppManagerAdapter, getFeatureState(_)).WillRepeatedly(Return(true));
    sl::Message *msg = new sl::Message();
    testObj->doProcessorHandler(msg::MSG_COMM_WPHONE_CDS_LIGHT_TRIGGER, msg);
    EXPECT_EQ(Bypass, true);
#endif
}

/**
 *   @brief This is a test script for the ACNPhoneProcessor_doProcessorHandler function
 *   @classID ACNPhoneProcessor
 *   @methodID doProcessorHandler
 *   @paramList uint32_t what, const sp<sl::Message>& msg
 *   @priority P2
 *   @resolution_Method
 *   @test_condition
 *   @test_Coverage_Item
 *   @test_case_ID ACNPhoneProcessorTest_doProcessorHandler_TC007
 *   @test_type functionality
 *   @test_objective
 *   @test_precon
 *   @test_input
 *   @test_expected_result
 *   @test_module
 *   @design_id
 */
TEST_F(ACNPhoneProcessorTest, ACNPhoneProcessor_doProcessorHandler_TC007){
// Please enable and make test code here!!
#if 1
    // Please check source file, make mock files and insert EXPECT_CALL for callee functions.
    ACNPhoneProcessor *testObj = new ACNPhoneProcessor();
    testObj->impl_->spAdapters = std::make_shared<AdapterLocator>(nullptr);
    testObj->impl_->state = State::RUNNING;
    testObj->impl_->country = 6;
    sl::Message *msg = new sl::Message();
    testObj->doProcessorHandler(msg::MSG_COMM_WPHONE_CDS_LIGHT_TRIGGER, msg);
    EXPECT_EQ(Bypass, true);
#endif
}

/**
 *   @brief This is a test script for the ACNPhoneProcessor_doProcessorHandler function
 *   @classID ACNPhoneProcessor
 *   @methodID doProcessorHandler
 *   @paramList uint32_t what, const sp<sl::Message>& msg
 *   @priority P2
 *   @resolution_Method
 *   @test_condition
 *   @test_Coverage_Item
 *   @test_case_ID ACNPhoneProcessorTest_doProcessorHandler_TC008
 *   @test_type functionality
 *   @test_objective
 *   @test_precon
 *   @test_input
 *   @test_expected_result
 *   @test_module
 *   @design_id
 */
TEST_F(ACNPhoneProcessorTest, ACNPhoneProcessor_doProcessorHandler_TC008){
// Please enable and make test code here!!
#if 1
    // Please check source file, make mock files and insert EXPECT_CALL for callee functions.
    ACNPhoneProcessor *testObj = new ACNPhoneProcessor();
    testObj->impl_->spAdapters = std::make_shared<AdapterLocator>(nullptr);
    testObj->impl_->state = State::RUNNING;
    sl::Message *msg = new sl::Message();
    msg->arg1 = self::ServiceId::RIM;
    EXPECT_CALL(*M_AppManagerAdapter, getFeatureState(_)).WillRepeatedly(Return(false));
    testObj->doProcessorHandler(msg::MSG_CM_BINDER_DIED, msg);
    EXPECT_EQ(Bypass, true);
#endif
}

/**
 *   @brief This is a test script for the ACNPhoneProcessor_doProcessorHandler function
 *   @classID ACNPhoneProcessor
 *   @methodID doProcessorHandler
 *   @paramList uint32_t what, const sp<sl::Message>& msg
 *   @priority P2
 *   @resolution_Method
 *   @test_condition
 *   @test_Coverage_Item
 *   @test_case_ID ACNPhoneProcessorTest_doProcessorHandler_TC009
 *   @test_type functionality
 *   @test_objective
 *   @test_precon
 *   @test_input
 *   @test_expected_result
 *   @test_module
 *   @design_id
 */
TEST_F(ACNPhoneProcessorTest, ACNPhoneProcessor_doProcessorHandler_TC009){
// Please enable and make test code here!!
#if 1
    // Please check source file, make mock files and insert EXPECT_CALL for callee functions.
    ACNPhoneProcessor *testObj = new ACNPhoneProcessor();
    testObj->impl_->spAdapters = std::make_shared<AdapterLocator>(nullptr);
    testObj->impl_->state = State::RUNNING;
    sl::Message *msg = new sl::Message();
    testObj->doProcessorHandler(msg::MSG_CM_BINDER_DIED, msg);
    EXPECT_EQ(Bypass, true);
#endif
}

/**
 *   @brief This is a test script for the ACNPhoneProcessor_doProcessorHandler function
 *   @classID ACNPhoneProcessor
 *   @methodID doProcessorHandler
 *   @paramList uint32_t what, const sp<sl::Message>& msg
 *   @priority P2
 *   @resolution_Method
 *   @test_condition
 *   @test_Coverage_Item
 *   @test_case_ID ACNPhoneProcessorTest_doProcessorHandler_TC013
 *   @test_type functionality
 *   @test_objective
 *   @test_precon
 *   @test_input
 *   @test_expected_result
 *   @test_module
 *   @design_id
 */
TEST_F(ACNPhoneProcessorTest, ACNPhoneProcessor_doProcessorHandler_TC013){
// Please enable and make test code here!!
#if 1
    // Please check source file, make mock files and insert EXPECT_CALL for callee functions.
    ACNPhoneProcessor *testObj = new ACNPhoneProcessor();
    testObj->impl_->spAdapters = std::make_shared<AdapterLocator>(nullptr);
    testObj->impl_->state = State::IDLE;
    sl::Message *msg = new sl::Message();
    testObj->doProcessorHandler(msg::MSG_CM_BINDER_DIED, msg);
    EXPECT_EQ(Bypass, true);
#endif
}

/**
 *   @brief This is a test script for the ACNPhoneProcessor_doProcessorHandler function
 *   @classID ACNPhoneProcessor
 *   @methodID doProcessorHandler
 *   @paramList uint32_t what, const sp<sl::Message>& msg
 *   @priority P2
 *   @resolution_Method
 *   @test_condition
 *   @test_Coverage_Item
 *   @test_case_ID ACNPhoneProcessorTest_doProcessorHandler_TC010
 *   @test_type functionality
 *   @test_objective
 *   @test_precon
 *   @test_input
 *   @test_expected_result
 *   @test_module
 *   @design_id
 */
TEST_F(ACNPhoneProcessorTest, ACNPhoneProcessor_doProcessorHandler_TC010){
// Please enable and make test code here!!
#if 1
    // Please check source file, make mock files and insert EXPECT_CALL for callee functions.
    ACNPhoneProcessor *testObj = new ACNPhoneProcessor();
    testObj->impl_->spAdapters = std::make_shared<AdapterLocator>(nullptr);
    testObj->impl_->state = State::RUNNING;
    sl::Message *msg = new sl::Message();
    EXPECT_CALL(*M_PowerManagerAdapter, resetIsLocked()).Times(1);
    EXPECT_CALL(*M_PowerManagerAdapter, acquirePowerLock()).Times(1);
    testObj->doProcessorHandler(msg::MSG_POWER_LOCK_CALLBACK, msg);
    EXPECT_EQ(Bypass, true);
#endif
}

/**
 *   @brief This is a test script for the ACNPhoneProcessor_doProcessorHandler function
 *   @classID ACNPhoneProcessor
 *   @methodID doProcessorHandler
 *   @paramList uint32_t what, const sp<sl::Message>& msg
 *   @priority P2
 *   @resolution_Method
 *   @test_condition
 *   @test_Coverage_Item
 *   @test_case_ID ACNPhoneProcessorTest_doProcessorHandler_TC011
 *   @test_type functionality
 *   @test_objective
 *   @test_precon
 *   @test_input
 *   @test_expected_result
 *   @test_module
 *   @design_id
 */
TEST_F(ACNPhoneProcessorTest, ACNPhoneProcessor_doProcessorHandler_TC011){
// Please enable and make test code here!!
#if 1
    // Please check source file, make mock files and insert EXPECT_CALL for callee functions.
    ACNPhoneProcessor *testObj = new ACNPhoneProcessor();
    testObj->impl_->spAdapters = std::make_shared<AdapterLocator>(nullptr);
    testObj->impl_->state = State::RUNNING;
    sl::Message *msg = new sl::Message();
    testObj->doProcessorHandler(msg::MSG_RIM_GTC_RESPONSE, msg);
    EXPECT_EQ(Bypass, true);
#endif
}

/**
 *   @brief This is a test script for the ACNPhoneProcessor_doProcessorHandler function
 *   @classID ACNPhoneProcessor
 *   @methodID doProcessorHandler
 *   @paramList uint32_t what, const sp<sl::Message>& msg
 *   @priority P2
 *   @resolution_Method
 *   @test_condition
 *   @test_Coverage_Item
 *   @test_case_ID ACNPhoneProcessorTest_doProcessorHandler_TC015
 *   @test_type functionality
 *   @test_objective
 *   @test_precon
 *   @test_input
 *   @test_expected_result
 *   @test_module
 *   @design_id
 */
TEST_F(ACNPhoneProcessorTest, ACNPhoneProcessor_doProcessorHandler_TC015){
// Please enable and make test code here!!
#if 1
    // Please check source file, make mock files and insert EXPECT_CALL for callee functions.
    ACNPhoneProcessor *testObj = new ACNPhoneProcessor();
    testObj->impl_->spAdapters = std::make_shared<AdapterLocator>(nullptr);
    testObj->impl_->state = State::IDLE;
    sp<RIMResponseType> resp = new RIMResponseType();
    resp->serverResponse = serviceinfo::DataResResult::SUCCESS;
    sl::Message *msg = new sl::Message();
    msg->spRef = resp;
    testObj->doProcessorHandler(msg::MSG_RIM_GTC_RESPONSE, msg);
    EXPECT_EQ(Bypass, true);
#endif
}

/**
 *   @brief This is a test script for the ACNPhoneProcessor_doProcessorHandler function
 *   @classID ACNPhoneProcessor
 *   @methodID doProcessorHandler
 *   @paramList uint32_t what, const sp<sl::Message>& msg
 *   @priority P2
 *   @resolution_Method
 *   @test_condition
 *   @test_Coverage_Item
 *   @test_case_ID ACNPhoneProcessorTest_doProcessorHandler_TC012
 *   @test_type functionality
 *   @test_objective
 *   @test_precon
 *   @test_input
 *   @test_expected_result
 *   @test_module
 *   @design_id
 */
TEST_F(ACNPhoneProcessorTest, ACNPhoneProcessor_doProcessorHandler_TC012){
// Please enable and make test code here!!
#if 1
    // Please check source file, make mock files and insert EXPECT_CALL for callee functions.
    ACNPhoneProcessor *testObj = new ACNPhoneProcessor();
    testObj->impl_->spAdapters = std::make_shared<AdapterLocator>(nullptr);
    testObj->impl_->state = State::RUNNING;
    sl::Message *msg = new sl::Message();
    testObj->doProcessorHandler(msg::MSG_CM_TEAR_DOWN, msg);
    EXPECT_EQ(Bypass, true);
#endif
}

/**
 *   @brief This is a test script for the ACNPhoneProcessor_doProcessorHandler function
 *   @classID ACNPhoneProcessor
 *   @methodID doProcessorHandler
 *   @paramList uint32_t what, const sp<sl::Message>& msg
 *   @priority P2
 *   @resolution_Method
 *   @test_condition
 *   @test_Coverage_Item
 *   @test_case_ID ACNPhoneProcessorTest_doProcessorHandler_TC014
 *   @test_type functionality
 *   @test_objective
 *   @test_precon
 *   @test_input
 *   @test_expected_result
 *   @test_module
 *   @design_id
 */
TEST_F(ACNPhoneProcessorTest, ACNPhoneProcessor_doProcessorHandler_TC014){
// Please enable and make test code here!!
#if 1
    // Please check source file, make mock files and insert EXPECT_CALL for callee functions.
    ACNPhoneProcessor *testObj = new ACNPhoneProcessor();
    testObj->impl_->spAdapters = std::make_shared<AdapterLocator>(nullptr);
    testObj->impl_->state = State::IDLE;
    sl::Message *msg = new sl::Message();
    testObj->doProcessorHandler(msg::MSG_POWER_LOCK_CALLBACK, msg);
    EXPECT_EQ(Bypass, true);
#endif
}

/**
 *   @brief This is a test script for the ACNPhoneProcessor_doProcessorHandler function
 *   @classID ACNPhoneProcessor
 *   @methodID doProcessorHandler
 *   @paramList uint32_t what, const sp<sl::Message>& msg
 *   @priority P2
 *   @resolution_Method
 *   @test_condition
 *   @test_Coverage_Item
 *   @test_case_ID ACNPhoneProcessorTest_doProcessorHandler_TC016
 *   @test_type functionality
 *   @test_objective
 *   @test_precon
 *   @test_input
 *   @test_expected_result
 *   @test_module
 *   @design_id
 */
TEST_F(ACNPhoneProcessorTest, ACNPhoneProcessor_doProcessorHandler_TC016){
// Please enable and make test code here!!
#if 1
    // Please check source file, make mock files and insert EXPECT_CALL for callee functions.
    ACNPhoneProcessor *testObj = new ACNPhoneProcessor();
    testObj->impl_->spAdapters = std::make_shared<AdapterLocator>(nullptr);
    testObj->impl_->state = State::IDLE;
    sl::Message *msg = new sl::Message();
    testObj->doProcessorHandler(msg::MSG_CM_WPHONE_TIMER_EXPIRED, msg);
    EXPECT_EQ(Bypass, true);
#endif
}

/**
 *   @brief This is a test script for the ACNPhoneProcessor_doProcessorHandler function
 *   @classID ACNPhoneProcessor
 *   @methodID doProcessorHandler
 *   @paramList uint32_t what, const sp<sl::Message>& msg
 *   @priority P2
 *   @resolution_Method
 *   @test_condition
 *   @test_Coverage_Item
 *   @test_case_ID ACNPhoneProcessorTest_doProcessorHandler_TC017
 *   @test_type functionality
 *   @test_objective
 *   @test_precon
 *   @test_input
 *   @test_expected_result
 *   @test_module
 *   @design_id
 */
TEST_F(ACNPhoneProcessorTest, ACNPhoneProcessor_doProcessorHandler_TC017){
// Please enable and make test code here!!
#if 1
    // Please check source file, make mock files and insert EXPECT_CALL for callee functions.
    ACNPhoneProcessor *testObj = new ACNPhoneProcessor();
    testObj->impl_->state = State::RUNNING;
    testObj->impl_->country = 101;
    sl::Message *msg = new sl::Message();
    testObj->doProcessorHandler(msg::MSG_CDS_TRIGGER_AFTER_WAITING, msg);
    EXPECT_EQ(Bypass, true);
#endif
}

/**
 *   @brief This is a test script for the ACNPhoneProcessor_doProcessorHandler function
 *   @classID ACNPhoneProcessor
 *   @methodID doProcessorHandler
 *   @paramList uint32_t what, const sp<sl::Message>& msg
 *   @priority P2
 *   @resolution_Method
 *   @test_condition
 *   @test_Coverage_Item
 *   @test_case_ID ACNPhoneProcessorTest_doProcessorHandler_TC018
 *   @test_type functionality
 *   @test_objective
 *   @test_precon
 *   @test_input
 *   @test_expected_result
 *   @test_module
 *   @design_id
 */
TEST_F(ACNPhoneProcessorTest, ACNPhoneProcessor_doProcessorHandler_TC018){
// Please enable and make test code here!!
#if 1
    // Please check source file, make mock files and insert EXPECT_CALL for callee functions.
    ACNPhoneProcessor *testObj = new ACNPhoneProcessor();
    testObj->impl_->state = State::RUNNING;
    testObj->impl_->country = 102;
    sl::Message *msg = new sl::Message();
    testObj->doProcessorHandler(msg::MSG_CDS_TRIGGER_AFTER_WAITING, msg);
    EXPECT_EQ(Bypass, true);
#endif
}


/**
 *   @brief This is a test script for the ACNPhoneProcessor_doProcessorHandler function
 *   @classID ACNPhoneProcessor
 *   @methodID doProcessorHandler
 *   @paramList uint32_t what, const sp<sl::Message>& msg
 *   @priority P2
 *   @resolution_Method
 *   @test_condition
 *   @test_Coverage_Item
 *   @test_case_ID ACNPhoneProcessorTest_doProcessorHandler_TC019
 *   @test_type functionality
 *   @test_objective
 *   @test_precon
 *   @test_input
 *   @test_expected_result
 *   @test_module
 *   @design_id
 */
TEST_F(ACNPhoneProcessorTest, ACNPhoneProcessor_doProcessorHandler_TC019){
// Please enable and make test code here!!
#if 1
    // Please check source file, make mock files and insert EXPECT_CALL for callee functions.
    ACNPhoneProcessor *testObj = new ACNPhoneProcessor();
    testObj->impl_->state = State::RUNNING;
    testObj->impl_->country = 121;
    sl::Message *msg = new sl::Message();
    testObj->doProcessorHandler(msg::MSG_CDS_TRIGGER_AFTER_WAITING, msg);
    EXPECT_EQ(Bypass, true);
#endif
}

/**
 *   @brief This is a test script for the ACNPhoneProcessor_doProcessorHandler function
 *   @classID ACNPhoneProcessor
 *   @methodID doProcessorHandler
 *   @paramList uint32_t what, const sp<sl::Message>& msg
 *   @priority P2
 *   @resolution_Method
 *   @test_condition
 *   @test_Coverage_Item
 *   @test_case_ID ACNPhoneProcessorTest_doProcessorHandler_TC020
 *   @test_type functionality
 *   @test_objective
 *   @test_precon
 *   @test_input
 *   @test_expected_result
 *   @test_module
 *   @design_id
 */
TEST_F(ACNPhoneProcessorTest, ACNPhoneProcessor_doProcessorHandler_TC020){
// Please enable and make test code here!!
#if 1
    // Please check source file, make mock files and insert EXPECT_CALL for callee functions.
    ACNPhoneProcessor *testObj = new ACNPhoneProcessor();
    testObj->impl_->state = State::RUNNING;
    testObj->impl_->country = 122;
    sl::Message *msg = new sl::Message();
    testObj->doProcessorHandler(msg::MSG_CDS_TRIGGER_AFTER_WAITING, msg);
    EXPECT_EQ(Bypass, true);
#endif
}

/**
 *   @brief This is a test script for the ACNPhoneProcessor_doProcessorHandler function
 *   @classID ACNPhoneProcessor
 *   @methodID doProcessorHandler
 *   @paramList uint32_t what, const sp<sl::Message>& msg
 *   @priority P2
 *   @resolution_Method
 *   @test_condition
 *   @test_Coverage_Item
 *   @test_case_ID ACNPhoneProcessorTest_doProcessorHandler_TC021
 *   @test_type functionality
 *   @test_objective
 *   @test_precon
 *   @test_input
 *   @test_expected_result
 *   @test_module
 *   @design_id
 */
TEST_F(ACNPhoneProcessorTest, ACNPhoneProcessor_doProcessorHandler_TC021){
// Please enable and make test code here!!
#if 1
    // Please check source file, make mock files and insert EXPECT_CALL for callee functions.
    ACNPhoneProcessor *testObj = new ACNPhoneProcessor();
    testObj->impl_->state = State::RUNNING;
    testObj->impl_->country = 123;
    sl::Message *msg = new sl::Message();
    testObj->doProcessorHandler(msg::MSG_CDS_TRIGGER_AFTER_WAITING, msg);
    EXPECT_EQ(Bypass, true);
#endif
}

/**
 *   @brief This is a test script for the ACNPhoneProcessor_doProcessorHandler function
 *   @classID ACNPhoneProcessor
 *   @methodID doProcessorHandler
 *   @paramList uint32_t what, const sp<sl::Message>& msg
 *   @priority P2
 *   @resolution_Method
 *   @test_condition
 *   @test_Coverage_Item
 *   @test_case_ID ACNPhoneProcessorTest_doProcessorHandler_TC022
 *   @test_type functionality
 *   @test_objective
 *   @test_precon
 *   @test_input
 *   @test_expected_result
 *   @test_module
 *   @design_id
 */
TEST_F(ACNPhoneProcessorTest, ACNPhoneProcessor_doProcessorHandler_TC022){
// Please enable and make test code here!!
#if 1
    // Please check source file, make mock files and insert EXPECT_CALL for callee functions.
    ACNPhoneProcessor *testObj = new ACNPhoneProcessor();
    testObj->impl_->state = State::RUNNING;
    testObj->impl_->country = 58;
    sl::Message *msg = new sl::Message();
    testObj->doProcessorHandler(msg::MSG_CDS_TRIGGER_AFTER_WAITING, msg);
    EXPECT_EQ(Bypass, true);
#endif
}

/**
 *   @brief This is a test script for the ACNPhoneProcessor_doProcessorHandler function
 *   @classID ACNPhoneProcessor
 *   @methodID doProcessorHandler
 *   @paramList uint32_t what, const sp<sl::Message>& msg
 *   @priority P2
 *   @resolution_Method
 *   @test_condition
 *   @test_Coverage_Item
 *   @test_case_ID ACNPhoneProcessorTest_doProcessorHandler_TC023
 *   @test_type functionality
 *   @test_objective
 *   @test_precon
 *   @test_input
 *   @test_expected_result
 *   @test_module
 *   @design_id
 */
TEST_F(ACNPhoneProcessorTest, ACNPhoneProcessor_doProcessorHandler_TC023){
// Please enable and make test code here!!
#if 1
    // Please check source file, make mock files and insert EXPECT_CALL for callee functions.
    ACNPhoneProcessor *testObj = new ACNPhoneProcessor();
    testObj->impl_->state = State::RUNNING;
    testObj->impl_->country = 59;
    sl::Message *msg = new sl::Message();
    testObj->doProcessorHandler(msg::MSG_CDS_TRIGGER_AFTER_WAITING, msg);
    EXPECT_EQ(Bypass, true);
#endif
}

/**
 *   @brief This is a test script for the ACNPhoneProcessor_doProcessorHandler function
 *   @classID ACNPhoneProcessor
 *   @methodID doProcessorHandler
 *   @paramList uint32_t what, const sp<sl::Message>& msg
 *   @priority P2
 *   @resolution_Method
 *   @test_condition
 *   @test_Coverage_Item
 *   @test_case_ID ACNPhoneProcessorTest_doProcessorHandler_TC024
 *   @test_type functionality
 *   @test_objective
 *   @test_precon
 *   @test_input
 *   @test_expected_result
 *   @test_module
 *   @design_id
 */
TEST_F(ACNPhoneProcessorTest, ACNPhoneProcessor_doProcessorHandler_TC024){
// Please enable and make test code here!!
#if 1
    // Please check source file, make mock files and insert EXPECT_CALL for callee functions.
    ACNPhoneProcessor *testObj = new ACNPhoneProcessor();
    testObj->impl_->state = State::RUNNING;
    testObj->impl_->country = 60;
    sl::Message *msg = new sl::Message();
    testObj->doProcessorHandler(msg::MSG_CDS_TRIGGER_AFTER_WAITING, msg);
    EXPECT_EQ(Bypass, true);
#endif
}

/**
 *   @brief This is a test script for the ACNPhoneProcessor_doProcessorHandler function
 *   @classID ACNPhoneProcessor
 *   @methodID doProcessorHandler
 *   @paramList uint32_t what, const sp<sl::Message>& msg
 *   @priority P2
 *   @resolution_Method
 *   @test_condition
 *   @test_Coverage_Item
 *   @test_case_ID ACNPhoneProcessorTest_doProcessorHandler_TC025
 *   @test_type functionality
 *   @test_objective
 *   @test_precon
 *   @test_input
 *   @test_expected_result
 *   @test_module
 *   @design_id
 */
TEST_F(ACNPhoneProcessorTest, ACNPhoneProcessor_doProcessorHandler_TC025){
// Please enable and make test code here!!
#if 1
    // Please check source file, make mock files and insert EXPECT_CALL for callee functions.
    ACNPhoneProcessor *testObj = new ACNPhoneProcessor();
    testObj->impl_->state = State::RUNNING;
    testObj->impl_->country = 61;
    sl::Message *msg = new sl::Message();
    testObj->doProcessorHandler(msg::MSG_CDS_TRIGGER_AFTER_WAITING, msg);
    EXPECT_EQ(Bypass, true);
#endif
}

/**
 *   @brief This is a test script for the ACNPhoneProcessor_doProcessorHandler function
 *   @classID ACNPhoneProcessor
 *   @methodID doProcessorHandler
 *   @paramList uint32_t what, const sp<sl::Message>& msg
 *   @priority P2
 *   @resolution_Method
 *   @test_condition
 *   @test_Coverage_Item
 *   @test_case_ID ACNPhoneProcessorTest_doProcessorHandler_TC026
 *   @test_type functionality
 *   @test_objective
 *   @test_precon
 *   @test_input
 *   @test_expected_result
 *   @test_module
 *   @design_id
 */
TEST_F(ACNPhoneProcessorTest, ACNPhoneProcessor_doProcessorHandler_TC026){
// Please enable and make test code here!!
#if 1
    // Please check source file, make mock files and insert EXPECT_CALL for callee functions.
    ACNPhoneProcessor *testObj = new ACNPhoneProcessor();
    testObj->impl_->state = State::RUNNING;
    testObj->impl_->country = 34;
    sl::Message *msg = new sl::Message();
    testObj->doProcessorHandler(msg::MSG_CDS_TRIGGER_AFTER_WAITING, msg);
    EXPECT_EQ(Bypass, true);
#endif
}

/**
 *   @brief This is a test script for the ACNPhoneProcessor_doProcessorHandler function
 *   @classID ACNPhoneProcessor
 *   @methodID doProcessorHandler
 *   @paramList uint32_t what, const sp<sl::Message>& msg
 *   @priority P2
 *   @resolution_Method
 *   @test_condition
 *   @test_Coverage_Item
 *   @test_case_ID ACNPhoneProcessorTest_doProcessorHandler_TC027
 *   @test_type functionality
 *   @test_objective
 *   @test_precon
 *   @test_input
 *   @test_expected_result
 *   @test_module
 *   @design_id
 */
TEST_F(ACNPhoneProcessorTest, ACNPhoneProcessor_doProcessorHandler_TC027){
// Please enable and make test code here!!
#if 1
    // Please check source file, make mock files and insert EXPECT_CALL for callee functions.
    ACNPhoneProcessor *testObj = new ACNPhoneProcessor();
    testObj->impl_->spAdapters = std::make_shared<AdapterLocator>(nullptr);
    testObj->impl_->state = State::RUNNING;
    testObj->impl_->country = 9;
    EXPECT_CALL(*M_AppManagerAdapter, getFeatureState(_)).WillRepeatedly(Return(true));
    sl::Message *msg = new sl::Message();
    testObj->doProcessorHandler(msg::MSG_COMM_WPHONE_CDS_LIGHT_TRIGGER, msg);
    EXPECT_EQ(Bypass, true);
#endif
}


/**
 *   @brief This is a test script for the ACNPhoneProcessor_doProcessorHandler function
 *   @classID ACNPhoneProcessor
 *   @methodID doProcessorHandler
 *   @paramList uint32_t what, const sp<sl::Message>& msg
 *   @priority P2
 *   @resolution_Method
 *   @test_condition
 *   @test_Coverage_Item
 *   @test_case_ID ACNPhoneProcessorTest_doProcessorHandler_TC028
 *   @test_type functionality
 *   @test_objective
 *   @test_precon
 *   @test_input
 *   @test_expected_result
 *   @test_module
 *   @design_id
 */
TEST_F(ACNPhoneProcessorTest, ACNPhoneProcessor_doProcessorHandler_TC028){
// Please enable and make test code here!!
#if 1
    // Please check source file, make mock files and insert EXPECT_CALL for callee functions.
    ACNPhoneProcessor *testObj = new ACNPhoneProcessor();
    testObj->impl_->spAdapters = std::make_shared<AdapterLocator>(nullptr);
    testObj->impl_->state = State::RUNNING;
    testObj->impl_->country = 103;
    EXPECT_CALL(*M_AppManagerAdapter, getFeatureState(_)).WillRepeatedly(Return(true));
    sl::Message *msg = new sl::Message();
    testObj->doProcessorHandler(msg::MSG_CDS_TRIGGER_AFTER_WAITING, msg);
    EXPECT_EQ(Bypass, true);
#endif
}

/**
 *   @brief This is a test script for the ACNPhoneProcessor_doProcessorHandler function
 *   @classID ACNPhoneProcessor
 *   @methodID doProcessorHandler
 *   @paramList uint32_t what, const sp<sl::Message>& msg
 *   @priority P2
 *   @resolution_Method
 *   @test_condition
 *   @test_Coverage_Item
 *   @test_case_ID ACNPhoneProcessorTest_doProcessorHandler_TC029
 *   @test_type functionality
 *   @test_objective
 *   @test_precon
 *   @test_input
 *   @test_expected_result
 *   @test_module
 *   @design_id
 */
TEST_F(ACNPhoneProcessorTest, ACNPhoneProcessor_doProcessorHandler_TC029){
// Please enable and make test code here!!
#if 1
    // Please check source file, make mock files and insert EXPECT_CALL for callee functions.
    ACNPhoneProcessor *testObj = new ACNPhoneProcessor();
    testObj->impl_->spAdapters = std::make_shared<AdapterLocator>(nullptr);
    testObj->impl_->state = State::RUNNING;
    testObj->impl_->country = 104;
    EXPECT_CALL(*M_AppManagerAdapter, getFeatureState(_)).WillRepeatedly(Return(true));
    sl::Message *msg = new sl::Message();
    testObj->doProcessorHandler(msg::MSG_CDS_TRIGGER_AFTER_WAITING, msg);
    EXPECT_EQ(Bypass, true);
#endif
}


/**
 *   @brief This is a test script for the ACNPhoneProcessor_doProcessorHandler function
 *   @classID ACNPhoneProcessor
 *   @methodID doProcessorHandler
 *   @paramList uint32_t what, const sp<sl::Message>& msg
 *   @priority P2
 *   @resolution_Method
 *   @test_condition
 *   @test_Coverage_Item
 *   @test_case_ID ACNPhoneProcessorTest_doProcessorHandler_TC030
 *   @test_type functionality
 *   @test_objective
 *   @test_precon
 *   @test_input
 *   @test_expected_result
 *   @test_module
 *   @design_id
 */
TEST_F(ACNPhoneProcessorTest, ACNPhoneProcessor_doProcessorHandler_TC030){
// Please enable and make test code here!!
#if 1
    // Please check source file, make mock files and insert EXPECT_CALL for callee functions.
    ACNPhoneProcessor *testObj = new ACNPhoneProcessor();
    testObj->impl_->spAdapters = std::make_shared<AdapterLocator>(nullptr);
    testObj->impl_->state = State::RUNNING;
    testObj->impl_->country = 105;
    EXPECT_CALL(*M_AppManagerAdapter, getFeatureState(_)).WillRepeatedly(Return(true));
    sl::Message *msg = new sl::Message();
    testObj->doProcessorHandler(msg::MSG_CDS_TRIGGER_AFTER_WAITING, msg);
    EXPECT_EQ(Bypass, true);
#endif
}

/**
 *   @brief This is a test script for the ACNPhoneProcessor_doProcessorHandler function
 *   @classID ACNPhoneProcessor
 *   @methodID doProcessorHandler
 *   @paramList uint32_t what, const sp<sl::Message>& msg
 *   @priority P2
 *   @resolution_Method
 *   @test_condition
 *   @test_Coverage_Item
 *   @test_case_ID ACNPhoneProcessorTest_doProcessorHandler_TC031
 *   @test_type functionality
 *   @test_objective
 *   @test_precon
 *   @test_input
 *   @test_expected_result
 *   @test_module
 *   @design_id
 */
TEST_F(ACNPhoneProcessorTest, ACNPhoneProcessor_doProcessorHandler_TC031){
// Please enable and make test code here!!
#if 1
    // Please check source file, make mock files and insert EXPECT_CALL for callee functions.
    ACNPhoneProcessor *testObj = new ACNPhoneProcessor();
    testObj->impl_->spAdapters = std::make_shared<AdapterLocator>(nullptr);
    testObj->impl_->state = State::RUNNING;
    testObj->impl_->country = 106;
    EXPECT_CALL(*M_AppManagerAdapter, getFeatureState(_)).WillRepeatedly(Return(true));
    sl::Message *msg = new sl::Message();
    testObj->doProcessorHandler(msg::MSG_CDS_TRIGGER_AFTER_WAITING, msg);
    EXPECT_EQ(Bypass, true);
#endif
}


/**
 *   @brief This is a test script for the ACNPhoneProcessor_doProcessorHandler function
 *   @classID ACNPhoneProcessor
 *   @methodID doProcessorHandler
 *   @paramList uint32_t what, const sp<sl::Message>& msg
 *   @priority P2
 *   @resolution_Method
 *   @test_condition
 *   @test_Coverage_Item
 *   @test_case_ID ACNPhoneProcessorTest_doProcessorHandler_TC032
 *   @test_type functionality
 *   @test_objective
 *   @test_precon
 *   @test_input
 *   @test_expected_result
 *   @test_module
 *   @design_id
 */
TEST_F(ACNPhoneProcessorTest, ACNPhoneProcessor_doProcessorHandler_TC032){
// Please enable and make test code here!!
#if 1
    // Please check source file, make mock files and insert EXPECT_CALL for callee functions.
    ACNPhoneProcessor *testObj = new ACNPhoneProcessor();
    testObj->impl_->spAdapters = std::make_shared<AdapterLocator>(nullptr);
    testObj->impl_->state = State::RUNNING;
    testObj->impl_->country = 107;
    EXPECT_CALL(*M_AppManagerAdapter, getFeatureState(_)).WillRepeatedly(Return(true));
    sl::Message *msg = new sl::Message();
    testObj->doProcessorHandler(msg::MSG_CDS_TRIGGER_AFTER_WAITING, msg);
    EXPECT_EQ(Bypass, true);
#endif
}

/**
 *   @brief This is a test script for the ACNPhoneProcessor_doProcessorHandler function
 *   @classID ACNPhoneProcessor
 *   @methodID doProcessorHandler
 *   @paramList uint32_t what, const sp<sl::Message>& msg
 *   @priority P2
 *   @resolution_Method
 *   @test_condition
 *   @test_Coverage_Item
 *   @test_case_ID ACNPhoneProcessorTest_doProcessorHandler_TC033
 *   @test_type functionality
 *   @test_objective
 *   @test_precon
 *   @test_input
 *   @test_expected_result
 *   @test_module
 *   @design_id
 */
TEST_F(ACNPhoneProcessorTest, ACNPhoneProcessor_doProcessorHandler_TC033){
// Please enable and make test code here!!
#if 1
    // Please check source file, make mock files and insert EXPECT_CALL for callee functions.
    ACNPhoneProcessor *testObj = new ACNPhoneProcessor();
    testObj->impl_->spAdapters = std::make_shared<AdapterLocator>(nullptr);
    testObj->impl_->state = State::RUNNING;
    testObj->impl_->country = 108;
    EXPECT_CALL(*M_AppManagerAdapter, getFeatureState(_)).WillRepeatedly(Return(true));
    sl::Message *msg = new sl::Message();
    testObj->doProcessorHandler(msg::MSG_CDS_TRIGGER_AFTER_WAITING, msg);
    EXPECT_EQ(Bypass, true);
#endif
}

/**
 *   @brief This is a test script for the ACNPhoneProcessor_doProcessorHandler function
 *   @classID ACNPhoneProcessor
 *   @methodID doProcessorHandler
 *   @paramList uint32_t what, const sp<sl::Message>& msg
 *   @priority P2
 *   @resolution_Method
 *   @test_condition
 *   @test_Coverage_Item
 *   @test_case_ID ACNPhoneProcessorTest_doProcessorHandler_TC034
 *   @test_type functionality
 *   @test_objective
 *   @test_precon
 *   @test_input
 *   @test_expected_result
 *   @test_module
 *   @design_id
 */
TEST_F(ACNPhoneProcessorTest, ACNPhoneProcessor_doProcessorHandler_TC034){
// Please enable and make test code here!!
#if 1
    // Please check source file, make mock files and insert EXPECT_CALL for callee functions.
    ACNPhoneProcessor *testObj = new ACNPhoneProcessor();
    testObj->impl_->spAdapters = std::make_shared<AdapterLocator>(nullptr);
    testObj->impl_->state = State::RUNNING;
    testObj->impl_->country = 109;
    EXPECT_CALL(*M_AppManagerAdapter, getFeatureState(_)).WillRepeatedly(Return(true));
    sl::Message *msg = new sl::Message();
    testObj->doProcessorHandler(msg::MSG_CDS_TRIGGER_AFTER_WAITING, msg);
    EXPECT_EQ(Bypass, true);
#endif
}


/**
 *   @brief This is a test script for the ACNPhoneProcessor_doProcessorHandler function
 *   @classID ACNPhoneProcessor
 *   @methodID doProcessorHandler
 *   @paramList uint32_t what, const sp<sl::Message>& msg
 *   @priority P2
 *   @resolution_Method
 *   @test_condition
 *   @test_Coverage_Item
 *   @test_case_ID ACNPhoneProcessorTest_doProcessorHandler_TC035
 *   @test_type functionality
 *   @test_objective
 *   @test_precon
 *   @test_input
 *   @test_expected_result
 *   @test_module
 *   @design_id
 */
TEST_F(ACNPhoneProcessorTest, ACNPhoneProcessor_doProcessorHandler_TC035){
// Please enable and make test code here!!
#if 1
    // Please check source file, make mock files and insert EXPECT_CALL for callee functions.
    ACNPhoneProcessor *testObj = new ACNPhoneProcessor();
    testObj->impl_->spAdapters = std::make_shared<AdapterLocator>(nullptr);
    testObj->impl_->state = State::RUNNING;
    testObj->impl_->country = 124;
    EXPECT_CALL(*M_AppManagerAdapter, getFeatureState(_)).WillRepeatedly(Return(true));
    sl::Message *msg = new sl::Message();
    testObj->doProcessorHandler(msg::MSG_CDS_TRIGGER_AFTER_WAITING, msg);
    EXPECT_EQ(Bypass, true);
#endif
}

/**
 *   @brief This is a test script for the ACNPhoneProcessor_doProcessorHandler function
 *   @classID ACNPhoneProcessor
 *   @methodID doProcessorHandler
 *   @paramList uint32_t what, const sp<sl::Message>& msg
 *   @priority P2
 *   @resolution_Method
 *   @test_condition
 *   @test_Coverage_Item
 *   @test_case_ID ACNPhoneProcessorTest_doProcessorHandler_TC036
 *   @test_type functionality
 *   @test_objective
 *   @test_precon
 *   @test_input
 *   @test_expected_result
 *   @test_module
 *   @design_id
 */
TEST_F(ACNPhoneProcessorTest, ACNPhoneProcessor_doProcessorHandler_TC036){
// Please enable and make test code here!!
#if 1
    // Please check source file, make mock files and insert EXPECT_CALL for callee functions.
    ACNPhoneProcessor *testObj = new ACNPhoneProcessor();
    testObj->impl_->spAdapters = std::make_shared<AdapterLocator>(nullptr);
    testObj->impl_->state = State::RUNNING;
    testObj->impl_->country = 125;
    EXPECT_CALL(*M_AppManagerAdapter, getFeatureState(_)).WillRepeatedly(Return(true));
    sl::Message *msg = new sl::Message();
    testObj->doProcessorHandler(msg::MSG_CDS_TRIGGER_AFTER_WAITING, msg);
    EXPECT_EQ(Bypass, true);
#endif
}


/**
 *   @brief This is a test script for the ACNPhoneProcessor_doProcessorHandler function
 *   @classID ACNPhoneProcessor
 *   @methodID doProcessorHandler
 *   @paramList uint32_t what, const sp<sl::Message>& msg
 *   @priority P2
 *   @resolution_Method
 *   @test_condition
 *   @test_Coverage_Item
 *   @test_case_ID ACNPhoneProcessorTest_doProcessorHandler_TC037
 *   @test_type functionality
 *   @test_objective
 *   @test_precon
 *   @test_input
 *   @test_expected_result
 *   @test_module
 *   @design_id
 */
TEST_F(ACNPhoneProcessorTest, ACNPhoneProcessor_doProcessorHandler_TC037){
// Please enable and make test code here!!
#if 1
    // Please check source file, make mock files and insert EXPECT_CALL for callee functions.
    ACNPhoneProcessor *testObj = new ACNPhoneProcessor();
    testObj->impl_->spAdapters = std::make_shared<AdapterLocator>(nullptr);
    testObj->impl_->state = State::RUNNING;
    testObj->impl_->country = 53;
    EXPECT_CALL(*M_AppManagerAdapter, getFeatureState(_)).WillRepeatedly(Return(true));
    sl::Message *msg = new sl::Message();
    testObj->doProcessorHandler(msg::MSG_COMM_WPHONE_CDS_LIGHT_TRIGGER, msg);
    EXPECT_EQ(Bypass, true);
#endif
}

/**
 *   @brief This is a test script for the ACNPhoneProcessor_onTimerEvent function
 *   @classID ACNPhoneProcessor
 *   @methodID onTimerEvent
 *   @paramList uint32_t timerId
 *   @priority P2
 *   @resolution_Method
 *   @test_condition
 *   @test_Coverage_Item
 *   @test_case_ID ACNPhoneProcessorTest_onTimerEvent_TC001
 *   @test_type functionality
 *   @test_objective
 *   @test_precon
 *   @test_input
 *   @test_expected_result
 *   @test_module
 *   @design_id
 */
TEST_F(ACNPhoneProcessorTest, ACNPhoneProcessor_onTimerEvent_TC001){
// Please enable and make test code here!!
#if 1
    // Please check source file, make mock files and insert EXPECT_CALL for callee functions.
    ACNPhoneProcessor *testObj = new ACNPhoneProcessor();
    testObj->onTimerEvent(0);
    EXPECT_EQ(Bypass, true);
#endif
}

/**
 *   @brief This is a test script for the ACNPhoneProcessor_onTimerEvent function
 *   @classID ACNPhoneProcessor
 *   @methodID onTimerEvent
 *   @paramList uint32_t timerId
 *   @priority P2
 *   @resolution_Method
 *   @test_condition
 *   @test_Coverage_Item
 *   @test_case_ID ACNPhoneProcessorTest_onTimerEvent_TC002
 *   @test_type functionality
 *   @test_objective
 *   @test_precon
 *   @test_input
 *   @test_expected_result
 *   @test_module
 *   @design_id
 */
TEST_F(ACNPhoneProcessorTest, ACNPhoneProcessor_onTimerEvent_TC002){
// Please enable and make test code here!!
#if 1
    // Please check source file, make mock files and insert EXPECT_CALL for callee functions.
    ACNPhoneProcessor *testObj = new ACNPhoneProcessor();
    testObj->onTimerEvent(0);
    EXPECT_EQ(Bypass, true);
#endif
}

/**
 *   @brief This is a test script for the ACNPhoneProcessor_onTimerEvent function
 *   @classID ACNPhoneProcessor
 *   @methodID onTimerEvent
 *   @paramList uint32_t timerId
 *   @priority P2
 *   @resolution_Method
 *   @test_condition
 *   @test_Coverage_Item
 *   @test_case_ID ACNPhoneProcessorTest_onTimerEvent_TC003
 *   @test_type functionality
 *   @test_objective
 *   @test_precon
 *   @test_input
 *   @test_expected_result
 *   @test_module
 *   @design_id
 */
TEST_F(ACNPhoneProcessorTest, ACNPhoneProcessor_onTimerEvent_TC003){
// Please enable and make test code here!!
#if 1
    // Please check source file, make mock files and insert EXPECT_CALL for callee functions.
    ACNPhoneProcessor *testObj = new ACNPhoneProcessor();
    testObj->onTimerEvent(0);
    EXPECT_EQ(Bypass, true);
#endif
}

/**
 *   @brief This is a test script for the ACNPhoneProcessor_checkSubcription function
 *   @classID ACNPhoneProcessor
 *   @methodID checkSubcription
 *   @paramList uint32_t timerId
 *   @priority P2
 *   @resolution_Method
 *   @test_condition
 *   @test_Coverage_Item
 *   @test_case_ID ACNPhoneProcessorTest_checkSubcription_TC001
 *   @test_type functionality
 *   @test_objective
 *   @test_precon
 *   @test_input
 *   @test_expected_result
 *   @test_module
 *   @design_id
 */
TEST_F(ACNPhoneProcessorTest, ACNPhoneProcessor_checkSubcription_TC001){
// Please enable and make test code here!!
#if 1
    // Please check source file, make mock files and insert EXPECT_CALL for callee functions.
    ACNPhoneProcessor *testObj = new ACNPhoneProcessor();
    testObj->impl_->spAdapters = std::make_shared<AdapterLocator>(nullptr);
    EXPECT_CALL(*M_ConfigManager, isSubscripted(_)).WillRepeatedly(Return(true));
    testObj->impl_->checkSubcription(self::acn_phone_type_2);
    EXPECT_EQ(Bypass, true);
#endif
}

/**
 *   @brief This is a test script for the ACNPhoneProcessor_checkSubcription function
 *   @classID ACNPhoneProcessor
 *   @methodID checkSubcription
 *   @paramList uint32_t timerId
 *   @priority P2
 *   @resolution_Method
 *   @test_condition
 *   @test_Coverage_Item
 *   @test_case_ID ACNPhoneProcessorTest_checkSubcription_TC002
 *   @test_type functionality
 *   @test_objective
 *   @test_precon
 *   @test_input
 *   @test_expected_result
 *   @test_module
 *   @design_id
 */
TEST_F(ACNPhoneProcessorTest, ACNPhoneProcessor_checkSubcription_TC002){
// Please enable and make test code here!!
#if 1
    // Please check source file, make mock files and insert EXPECT_CALL for callee functions.
    ACNPhoneProcessor *testObj = new ACNPhoneProcessor();
    testObj->impl_->spAdapters = std::make_shared<AdapterLocator>(nullptr);
    EXPECT_CALL(*M_ConfigManager, isSubscripted(_)).WillRepeatedly(Return(true));
    testObj->impl_->checkSubcription(self::acn_phone_type_2);
    EXPECT_EQ(Bypass, true);
#endif
}

/**
 *   @brief This is a test script for the ACNPhoneProcessor_checkSubcription function
 *   @classID ACNPhoneProcessor
 *   @methodID checkSubcription
 *   @paramList uint32_t timerId
 *   @priority P2
 *   @resolution_Method
 *   @test_condition
 *   @test_Coverage_Item
 *   @test_case_ID ACNPhoneProcessorTest_checkSubcription_TC003
 *   @test_type functionality
 *   @test_objective
 *   @test_precon
 *   @test_input
 *   @test_expected_result
 *   @test_module
 *   @design_id
 */
TEST_F(ACNPhoneProcessorTest, ACNPhoneProcessor_checkSubcription_TC003){
// Please enable and make test code here!!
#if 1
    // Please check source file, make mock files and insert EXPECT_CALL for callee functions.
    ACNPhoneProcessor *testObj = new ACNPhoneProcessor();
    testObj->impl_->spAdapters = std::make_shared<AdapterLocator>(nullptr);
    EXPECT_CALL(*M_ConfigManager, isSubscripted(_)).WillRepeatedly(Return(true));
    testObj->impl_->checkSubcription(self::acn_phone_type_2);
    EXPECT_EQ(Bypass, true);
#endif
}


/**
 *   @brief This is a test script for the ACNPhoneProcessor_checkSubcription function
 *   @classID ACNPhoneProcessor
 *   @methodID checkSubcription
 *   @paramList uint32_t timerId
 *   @priority P2
 *   @resolution_Method
 *   @test_condition
 *   @test_Coverage_Item
 *   @test_case_ID ACNPhoneProcessorTest_checkSubcription_TC004
 *   @test_type functionality
 *   @test_objective
 *   @test_precon
 *   @test_input
 *   @test_expected_result
 *   @test_module
 *   @design_id
 */
TEST_F(ACNPhoneProcessorTest, ACNPhoneProcessor_checkSubcription_TC004){
// Please enable and make test code here!!
#if 1
    // Please check source file, make mock files and insert EXPECT_CALL for callee functions.
    ACNPhoneProcessor *testObj = new ACNPhoneProcessor();
    testObj->impl_->spAdapters = std::make_shared<AdapterLocator>(nullptr);
    EXPECT_CALL(*M_ConfigManager, isSubscripted(_)).WillRepeatedly(Return(true));
    testObj->impl_->checkSubcription("");
    EXPECT_EQ(Bypass, true);
#endif
}

/**
 *   @brief This is a test script for the ACNPhoneProcessor_doHandleCdsTrigger function
 *   @classID ACNPhoneProcessor
 *   @methodID doHandleCdsTrigger
 *   @paramList const android::sp<sl::Message>& msg
 *   @priority P2
 *   @resolution_Method
 *   @test_condition
 *   @test_Coverage_Item
 *   @test_case_ID ACNPhoneProcessorTest_doHandleCdsTrigger_TC001
 *   @test_type functionality
 *   @test_objective
 *   @test_precon
 *   @test_input
 *   @test_expected_result
 *   @test_module
 *   @design_id
 */
TEST_F(ACNPhoneProcessorTest, ACNPhoneProcessor_doHandleCdsTrigger_TC001){
// Please enable and make test code here!!
#if 1
    // Please check source file, make mock files and insert EXPECT_CALL for callee functions.
    ACNPhoneProcessor *testObj = new ACNPhoneProcessor();
    testObj->impl_->spAdapters = std::make_shared<AdapterLocator>(nullptr);
    EXPECT_CALL(*M_AppManagerAdapter, getFeatureState(_)).WillRepeatedly(Return(false));
    EXPECT_CALL(*M_AppManagerAdapter, queryActionForFeature(_,_)).Times(1);
    sl::Message *msg = new sl::Message();
    testObj->impl_->doHandleCdsTrigger(msg);
    EXPECT_EQ(Bypass, true);
#endif
}


/**
 *   @brief This is a test script for the ACNPhoneProcessor_doHandleCdsTrigger function
 *   @classID ACNPhoneProcessor
 *   @methodID doHandleCdsTrigger
 *   @paramList const android::sp<sl::Message>& msg
 *   @priority P2
 *   @resolution_Method
 *   @test_condition
 *   @test_Coverage_Item
 *   @test_case_ID ACNPhoneProcessorTest_doHandleCdsTrigger_TC002
 *   @test_type functionality
 *   @test_objective
 *   @test_precon
 *   @test_input
 *   @test_expected_result
 *   @test_module
 *   @design_id
 */
TEST_F(ACNPhoneProcessorTest, ACNPhoneProcessor_doHandleCdsTrigger_TC002){
// Please enable and make test code here!!
#if 1
    // Please check source file, make mock files and insert EXPECT_CALL for callee functions.
    ACNPhoneProcessor *testObj = new ACNPhoneProcessor();
    testObj->impl_->spAdapters = std::make_shared<AdapterLocator>(nullptr);
    EXPECT_CALL(*M_AppManagerAdapter, getFeatureState(_)).WillRepeatedly(Return(false));
    EXPECT_CALL(*M_AppManagerAdapter, queryActionForFeature(_,_)).Times(1);
    sl::Message *msg = new sl::Message();
    testObj->impl_->doHandleCdsTrigger(msg);
    EXPECT_EQ(Bypass, true);
#endif
}

/**
 *   @brief This is a test script for the ACNPhoneProcessor_doHandleCdsTrigger function
 *   @classID ACNPhoneProcessor
 *   @methodID doHandleCdsTrigger
 *   @paramList const android::sp<sl::Message>& msg
 *   @priority P2
 *   @resolution_Method
 *   @test_condition
 *   @test_Coverage_Item
 *   @test_case_ID ACNPhoneProcessorTest_doHandleCdsTrigger_TC003
 *   @test_type functionality
 *   @test_objective
 *   @test_precon
 *   @test_input
 *   @test_expected_result
 *   @test_module
 *   @design_id
 */
TEST_F(ACNPhoneProcessorTest, ACNPhoneProcessor_doHandleCdsTrigger_TC003){
// Please enable and make test code here!!
#if 1
    // Please check source file, make mock files and insert EXPECT_CALL for callee functions.
    ACNPhoneProcessor *testObj = new ACNPhoneProcessor();
    testObj->impl_->spAdapters = std::make_shared<AdapterLocator>(nullptr);
    EXPECT_CALL(*M_AppManagerAdapter, getFeatureState(_)).WillRepeatedly(Return(false));
    EXPECT_CALL(*M_AppManagerAdapter, queryActionForFeature(_,_)).Times(1);
    sl::Message *msg = new sl::Message();
    testObj->impl_->doHandleCdsTrigger(msg);
    EXPECT_EQ(Bypass, true);
#endif
}

/**
 *   @brief This is a test script for the ACNPhoneProcessor_doHandleLightCds function
 *   @classID ACNPhoneProcessor
 *   @methodID doHandleLightCds
 *   @paramList const android::sp<sl::Message>& msg
 *   @priority P2
 *   @resolution_Method
 *   @test_condition
 *   @test_Coverage_Item
 *   @test_case_ID ACNPhoneProcessorTest_doHandleLightCds_TC001
 *   @test_type functionality
 *   @test_objective
 *   @test_precon
 *   @test_input
 *   @test_expected_result
 *   @test_module
 *   @design_id
 */
TEST_F(ACNPhoneProcessorTest, ACNPhoneProcessor_doHandleLightCds_TC001){
// Please enable and make test code here!!
#if 1
    // Please check source file, make mock files and insert EXPECT_CALL for callee functions.
    ACNPhoneProcessor *testObj = new ACNPhoneProcessor();
    testObj->impl_->spAdapters = std::make_shared<AdapterLocator>(nullptr);
    EXPECT_CALL(*M_AppManagerAdapter, getFeatureState(_)).WillRepeatedly(Return(false));
    EXPECT_CALL(*M_AppManagerAdapter, queryActionForFeature(_,_)).Times(1);
    sl::Message *msg = new sl::Message();
    testObj->impl_->doHandleLightCds(msg);
    EXPECT_EQ(Bypass, true);
#endif
}


/**
 *   @brief This is a test script for the ACNPhoneProcessor_doHandleLightCds function
 *   @classID ACNPhoneProcessor
 *   @methodID doHandleLightCds
 *   @paramList const android::sp<sl::Message>& msg
 *   @priority P2
 *   @resolution_Method
 *   @test_condition
 *   @test_Coverage_Item
 *   @test_case_ID ACNPhoneProcessorTest_doHandleLightCds_TC002
 *   @test_type functionality
 *   @test_objective
 *   @test_precon
 *   @test_input
 *   @test_expected_result
 *   @test_module
 *   @design_id
 */
TEST_F(ACNPhoneProcessorTest, ACNPhoneProcessor_doHandleLightCds_TC002){
// Please enable and make test code here!!
#if 1
    // Please check source file, make mock files and insert EXPECT_CALL for callee functions.
    ACNPhoneProcessor *testObj = new ACNPhoneProcessor();
    testObj->impl_->spAdapters = std::make_shared<AdapterLocator>(nullptr);
    EXPECT_CALL(*M_AppManagerAdapter, getFeatureState(_)).WillRepeatedly(Return(false));
    EXPECT_CALL(*M_AppManagerAdapter, queryActionForFeature(_,_)).Times(1);
    sl::Message *msg = new sl::Message();
    testObj->impl_->doHandleLightCds(msg);
    EXPECT_EQ(Bypass, true);
#endif
}


/**
 *   @brief This is a test script for the ACNPhoneProcessor_doHandleLightCds function
 *   @classID ACNPhoneProcessor
 *   @methodID doHandleLightCds
 *   @paramList const android::sp<sl::Message>& msg
 *   @priority P2
 *   @resolution_Method
 *   @test_condition
 *   @test_Coverage_Item
 *   @test_case_ID ACNPhoneProcessorTest_doHandleLightCds_TC003
 *   @test_type functionality
 *   @test_objective
 *   @test_precon
 *   @test_input
 *   @test_expected_result
 *   @test_module
 *   @design_id
 */
TEST_F(ACNPhoneProcessorTest, ACNPhoneProcessor_doHandleLightCds_TC003){
// Please enable and make test code here!!
#if 1
    // Please check source file, make mock files and insert EXPECT_CALL for callee functions.
    ACNPhoneProcessor *testObj = new ACNPhoneProcessor();
    testObj->impl_->spAdapters = std::make_shared<AdapterLocator>(nullptr);
    EXPECT_CALL(*M_AppManagerAdapter, getFeatureState(_)).WillRepeatedly(Return(false));
    EXPECT_CALL(*M_AppManagerAdapter, queryActionForFeature(_,_)).Times(1);
    sl::Message *msg = new sl::Message();
    testObj->impl_->doHandleLightCds(msg);
    EXPECT_EQ(Bypass, true);
#endif
}

/**
 *   @brief This is a test script for the ACNPhoneProcessor_onTerminate function
 *   @classID ACNPhoneProcessor
 *   @methodID onTerminate
 *   @paramList const android::sp<sl::Message>& msg
 *   @priority P2
 *   @resolution_Method
 *   @test_condition
 *   @test_Coverage_Item
 *   @test_case_ID ACNPhoneProcessorTest_onTerminate_TC001
 *   @test_type functionality
 *   @test_objective
 *   @test_precon
 *   @test_input
 *   @test_expected_result
 *   @test_module
 *   @design_id
 */
TEST_F(ACNPhoneProcessorTest, ACNPhoneProcessor_onTerminate_TC001){
// Please enable and make test code here!!
#if 1
    // Please check source file, make mock files and insert EXPECT_CALL for callee functions.
    ACNPhoneProcessor *testObj = new ACNPhoneProcessor();
    testObj->impl_->spAdapters = std::make_shared<AdapterLocator>(nullptr);
    EXPECT_CALL(*M_AppManagerAdapter, getFeatureState(_)).WillRepeatedly(Return(false));
    const std::string type = "";
    const std::string name = "";
    testObj->impl_->onTerminate(type, name);
    EXPECT_EQ(Bypass, true);
#endif
}


/**
 *   @brief This is a test script for the ACNPhoneProcessor_reset function
 *   @classID ACNPhoneProcessor
 *   @methodID reset
 *   @paramList const android::sp<sl::Message>& msg
 *   @priority P2
 *   @resolution_Method
 *   @test_condition
 *   @test_Coverage_Item
 *   @test_case_ID ACNPhoneProcessorTest_reset_TC001
 *   @test_type functionality
 *   @test_objective
 *   @test_precon
 *   @test_input
 *   @test_expected_result
 *   @test_module
 *   @design_id
 */
TEST_F(ACNPhoneProcessorTest, ACNPhoneProcessor_reset_TC001){
// Please enable and make test code here!!
#if 1
    // Please check source file, make mock files and insert EXPECT_CALL for callee functions.
    ACNPhoneProcessor *testObj = new ACNPhoneProcessor();
    testObj->impl_->spAdapters = std::make_shared<AdapterLocator>(nullptr);
    EXPECT_CALL(*M_AppManagerAdapter, getFeatureState(_)).WillRepeatedly(Return(false));
    testObj->impl_->reset();
    EXPECT_EQ(Bypass, true);
#endif
}


/**
 *   @brief This is a test script for the ACNPhoneProcessor_reset function
 *   @classID ACNPhoneProcessor
 *   @methodID reset
 *   @paramList const android::sp<sl::Message>& msg
 *   @priority P2
 *   @resolution_Method
 *   @test_condition
 *   @test_Coverage_Item
 *   @test_case_ID ACNPhoneProcessorTest_reset_TC002
 *   @test_type functionality
 *   @test_objective
 *   @test_precon
 *   @test_input
 *   @test_expected_result
 *   @test_module
 *   @design_id
 */
TEST_F(ACNPhoneProcessorTest, ACNPhoneProcessor_reset_TC002){
// Please enable and make test code here!!
#if 1
    // Please check source file, make mock files and insert EXPECT_CALL for callee functions.
    ACNPhoneProcessor *testObj = new ACNPhoneProcessor();
    testObj->impl_->spAdapters = std::make_shared<AdapterLocator>(nullptr);
    EXPECT_CALL(*M_AppManagerAdapter, getFeatureState(_)).Times(2).WillOnce(Return(false))
                                                                  .WillOnce(Return(true));
    testObj->impl_->reset();
    EXPECT_EQ(Bypass, true);
#endif
}


/**
 *   @brief This is a test script for the ACNPhoneProcessor_reset function
 *   @classID ACNPhoneProcessor
 *   @methodID reset
 *   @paramList const android::sp<sl::Message>& msg
 *   @priority P2
 *   @resolution_Method
 *   @test_condition
 *   @test_Coverage_Item
 *   @test_case_ID ACNPhoneProcessorTest_reset_TC003
 *   @test_type functionality
 *   @test_objective
 *   @test_precon
 *   @test_input
 *   @test_expected_result
 *   @test_module
 *   @design_id
 */
TEST_F(ACNPhoneProcessorTest, ACNPhoneProcessor_reset_TC003){
// Please enable and make test code here!!
#if 1
    // Please check source file, make mock files and insert EXPECT_CALL for callee functions.
    ACNPhoneProcessor *testObj = new ACNPhoneProcessor();
    testObj->impl_->spAdapters = std::make_shared<AdapterLocator>(nullptr);
    EXPECT_CALL(*M_AppManagerAdapter, getFeatureState(_)).Times(3).WillOnce(Return(false))
                                                                  .WillOnce(Return(false))
                                                                  .WillOnce(Return(true));
    testObj->impl_->reset();
    EXPECT_EQ(Bypass, true);
#endif
}


/**
 *   @brief This is a test script for the ACNPhoneProcessor_reset function
 *   @classID ACNPhoneProcessor
 *   @methodID reset
 *   @paramList const android::sp<sl::Message>& msg
 *   @priority P2
 *   @resolution_Method
 *   @test_condition
 *   @test_Coverage_Item
 *   @test_case_ID ACNPhoneProcessorTest_reset_TC004
 *   @test_type functionality
 *   @test_objective
 *   @test_precon
 *   @test_input
 *   @test_expected_result
 *   @test_module
 *   @design_id
 */
TEST_F(ACNPhoneProcessorTest, ACNPhoneProcessor_reset_TC004){
// Please enable and make test code here!!
#if 1
    // Please check source file, make mock files and insert EXPECT_CALL for callee functions.
    ACNPhoneProcessor *testObj = new ACNPhoneProcessor();
    testObj->impl_->spAdapters = std::make_shared<AdapterLocator>(nullptr);
    EXPECT_CALL(*M_AppManagerAdapter, getFeatureState(_)).Times(4).WillOnce(Return(false))
                                                                  .WillOnce(Return(false))
                                                                  .WillOnce(Return(false))
                                                                  .WillOnce(Return(true));
    testObj->impl_->reset();
    EXPECT_EQ(Bypass, true);
#endif
}


/**
 *   @brief This is a test script for the ACNPhoneProcessor_reset function
 *   @classID ACNPhoneProcessor
 *   @methodID reset
 *   @paramList const android::sp<sl::Message>& msg
 *   @priority P2
 *   @resolution_Method
 *   @test_condition
 *   @test_Coverage_Item
 *   @test_case_ID ACNPhoneProcessorTest_reset_TC005
 *   @test_type functionality
 *   @test_objective
 *   @test_precon
 *   @test_input
 *   @test_expected_result
 *   @test_module
 *   @design_id
 */
TEST_F(ACNPhoneProcessorTest, ACNPhoneProcessor_reset_TC005){
// Please enable and make test code here!!
#if 1
    // Please check source file, make mock files and insert EXPECT_CALL for callee functions.
    ACNPhoneProcessor *testObj = new ACNPhoneProcessor();
    testObj->impl_->spAdapters = std::make_shared<AdapterLocator>(nullptr);
    EXPECT_CALL(*M_AppManagerAdapter, getFeatureState(_)).Times(5).WillOnce(Return(false))
                                                                  .WillOnce(Return(false))
                                                                  .WillOnce(Return(false))
                                                                  .WillOnce(Return(false))
                                                                   .WillOnce(Return(true));
    testObj->impl_->reset();
    EXPECT_EQ(Bypass, true);
#endif
}


/**
 *   @brief This is a test script for the ACNPhoneProcessor_reset function
 *   @classID ACNPhoneProcessor
 *   @methodID reset
 *   @paramList const android::sp<sl::Message>& msg
 *   @priority P2
 *   @resolution_Method
 *   @test_condition
 *   @test_Coverage_Item
 *   @test_case_ID ACNPhoneProcessorTest_reset_TC006
 *   @test_type functionality
 *   @test_objective
 *   @test_precon
 *   @test_input
 *   @test_expected_result
 *   @test_module
 *   @design_id
 */
TEST_F(ACNPhoneProcessorTest, ACNPhoneProcessor_reset_TC006){
// Please enable and make test code here!!
#if 1
    // Please check source file, make mock files and insert EXPECT_CALL for callee functions.
    ACNPhoneProcessor *testObj = new ACNPhoneProcessor();
    testObj->impl_->spAdapters = std::make_shared<AdapterLocator>(nullptr);
    EXPECT_CALL(*M_AppManagerAdapter, getFeatureState(_)).Times(6).WillOnce(Return(false))
                                                                  .WillOnce(Return(false))
                                                                  .WillOnce(Return(false))
                                                                  .WillOnce(Return(false))
                                                                   .WillOnce(Return(false))
                                                                   .WillOnce(Return(true));
    testObj->impl_->reset();
    EXPECT_EQ(Bypass, true);
#endif
}


/**
 *   @brief This is a test script for the ACNPhoneProcessor_reset function
 *   @classID ACNPhoneProcessor
 *   @methodID reset
 *   @paramList const android::sp<sl::Message>& msg
 *   @priority P2
 *   @resolution_Method
 *   @test_condition
 *   @test_Coverage_Item
 *   @test_case_ID ACNPhoneProcessorTest_reset_TC007
 *   @test_type functionality
 *   @test_objective
 *   @test_precon
 *   @test_input
 *   @test_expected_result
 *   @test_module
 *   @design_id
 */
TEST_F(ACNPhoneProcessorTest, ACNPhoneProcessor_reset_TC007){
// Please enable and make test code here!!
#if 1
    // Please check source file, make mock files and insert EXPECT_CALL for callee functions.
    ACNPhoneProcessor *testObj = new ACNPhoneProcessor();
    testObj->impl_->spAdapters = std::make_shared<AdapterLocator>(nullptr);
    EXPECT_CALL(*M_AppManagerAdapter, getFeatureState(_)).Times(6).WillOnce(Return(false))
                                                                  .WillOnce(Return(false))
                                                                  .WillOnce(Return(false))
                                                                  .WillOnce(Return(false))
                                                                   .WillOnce(Return(false))
                                                                   .WillOnce(Return(false));
    testObj->impl_->reset();
    EXPECT_EQ(Bypass, true);
#endif
}

/**
 *   @brief This is a test script for the ACNPhoneProcessor_doHandleBinderDied function
 *   @classID ACNPhoneProcessor
 *   @methodID doHandleBinderDied
 *   @paramList uint32_t who
 *   @priority P1
 *   @resolution_Method
 *   @test_condition
 *   @test_Coverage_Item
 *   @test_case_ID ACNPhoneProcessorTest_doHandleBinderDied_TC001
 *   @test_type functionality
 *   @test_objective
 *   @test_precon
 *   @test_input
 *   @test_expected_result
 *   @test_module
 *   @design_id
 */
TEST_F(ACNPhoneProcessorTest, ACNPhoneProcessor_doHandleBinderDied_TC001){
// Please enable and make test code here!!
#if 1
    // Please check source file, make mock files and insert EXPECT_CALL for callee functions.
    ACNPhoneProcessor *testObj = new ACNPhoneProcessor();
    uint32_t who = self::ServiceId::RIM;
    testObj->impl_->state = State::IDLE;
    testObj->impl_->doHandleBinderDied(who);
#endif
}

/**
 *   @brief This is a test script for the ACNPhoneProcessor_doHandleBinderDied function
 *   @classID ACNPhoneProcessor
 *   @methodID doHandleBinderDied
 *   @paramList uint32_t who
 *   @priority P1
 *   @resolution_Method
 *   @test_condition
 *   @test_Coverage_Item
 *   @test_case_ID ACNPhoneProcessorTest_doHandleBinderDied_TC002
 *   @test_type functionality
 *   @test_objective
 *   @test_precon
 *   @test_input
 *   @test_expected_result
 *   @test_module
 *   @design_id
 */
TEST_F(ACNPhoneProcessorTest, ACNPhoneProcessor_doHandleBinderDied_TC002){
// Please enable and make test code here!!
#if 1
    // Please check source file, make mock files and insert EXPECT_CALL for callee functions.
    ACNPhoneProcessor *testObj = new ACNPhoneProcessor();
    uint32_t who = self::ServiceId::RIM;
    testObj->impl_->state = State::NOT_INIT;
    testObj->impl_->doHandleBinderDied(who);
#endif
}

/**
 *   @brief This is a test script for the ACNPhoneProcessor_doHandleBinderDied function
 *   @classID ACNPhoneProcessor
 *   @methodID doHandleBinderDied
 *   @paramList uint32_t who
 *   @priority P1
 *   @resolution_Method
 *   @test_condition
 *   @test_Coverage_Item
 *   @test_case_ID ACNPhoneProcessorTest_doHandleBinderDied_TC003
 *   @test_type functionality
 *   @test_objective
 *   @test_precon
 *   @test_input
 *   @test_expected_result
 *   @test_module
 *   @design_id
 */
TEST_F(ACNPhoneProcessorTest, ACNPhoneProcessor_doHandleBinderDied_TC003){
// Please enable and make test code here!!
#if 1
    // Please check source file, make mock files and insert EXPECT_CALL for callee functions.
    ACNPhoneProcessor *testObj = new ACNPhoneProcessor();
    uint32_t who = self::ServiceId::RIM;
    testObj->impl_->state = State::RUNNING;
    testObj->impl_->doHandleBinderDied(who);
#endif
}