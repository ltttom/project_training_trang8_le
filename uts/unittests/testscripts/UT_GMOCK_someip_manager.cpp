/*
 * test script file generated by uts
 */

#include "gtest/gtest.h"
#include "gmock/gmock.h"
#include <dlfcn.h>



#define private public

#pragma GCC push_options
#pragma GCC optimize("O3")
#pragma GCC optimize("-fno-inline")
// Include Source File for testing!!
#include "../src/services_adapter/someip_manager.cpp"
#pragma GCC pop_options
using namespace android;
using namespace oc;
using namespace sl;
// Include MOCK FILES!!

#include <application/Application.h>
#include "mock/src/logger_mock.h"
#include "mock/src/oem_call_app_constants_mock.h"
#include "mock/service/BpBinder_mock.h"
#include "mock/service/IServiceManager_mock.h"
#include "mock/service/Handler_mock.h"
// #include "mock/service/AppManager_mock.h"
#include "mock/service/IInterface_mock.h"
#include "mock/service/Binder_mock.h"
#include "mock/service/Buffer_mock.h"
#include "mock/service/ISomeipProviderManagerService_mock.h"
/*
 * Define Mock Class / function
*/
class Base_someIP_manager {
public:
    virtual ~Base_someIP_manager(){ }
};

class Mock_someIP_manager : public Base_someIP_manager {
public:
};

Mock_someIP_manager *M_someIP_manager;

using ::testing::Return;
using ::testing::_;
using ::testing::A;
using ::testing::ReturnRef;
using ::testing::Values;
using ::testing::SetArgPointee;
using ::testing::SetArrayArgument;
using ::testing::SaveArg;
using ::testing::SaveArgPointee;
using ::testing::DoAll;
using ::testing::Args;
using ::testing::AllOf;
using ::testing::AtLeast;
using ::testing::Combine;
bool Bypass = true;
class someIP_managerTest : public ::testing::Test {
protected:
    virtual void SetUp(){
        M_someIP_manager = new Mock_someIP_manager();
        M_IServiceManager = new MockIServiceManager();
        M_Handler = new MockHandler();
        // M_AppManager = new MockAppManager();
        M_IInterface = new MockIInterface();
        M_BBinder = new MockBBinder();
        M_ISomeipProviderManagerService = new MockISomeipProviderManagerService();
       M_Buffer = new MockBuffer();
    }
    virtual void TearDown(){
        delete M_someIP_manager;
        delete M_IServiceManager;
        delete M_Handler;
        // delete M_AppManager;
        delete M_IInterface;
        delete M_BBinder;
        delete M_ISomeipProviderManagerService;
       delete M_Buffer;
    }
};

/**
 *   @brief This is a test script for the someIP_manager_someIP_manager function
 *   @classID someIP_manager
 *   @methodID someIP_manager
 *   @paramList android::sp<OemCallHandler> handler
 *   @priority P2
 *   @resolution_Method
 *   @test_condition
 *   @test_Coverage_Item
 *   @test_case_ID someIP_managerTest_someIP_manager_TC001
 *   @test_type functionality
 *   @test_objective
 *   @test_precon
 *   @test_input
 *   @test_expected_result
 *   @test_module
 *   @design_id
 */
TEST_F(someIP_managerTest, someIP_manager_someIP_manager_TC001){
// Please enable and make test code here!!
#if 1
    // Please check source file, make mock files and insert EXPECT_CALL for callee functions.
    someIP_manager *testObj = new someIP_manager();
    EXPECT_EQ(Bypass, true);
#endif
}

/**
 *   @brief This is a test script for the someIP_manager_initHandle function
 *   @classID someIP_manager
 *   @methodID initHandle
 *   @paramList android::sp<OemCallHandler> handler
 *   @priority P2
 *   @resolution_Method
 *   @test_condition
 *   @test_Coverage_Item
 *   @test_case_ID someIP_managerTest_initHandle_TC001
 *   @test_type functionality
 *   @test_objective
 *   @test_precon
 *   @test_input
 *   @test_expected_result
 *   @test_module
 *   @design_id
 */
TEST_F(someIP_managerTest, someIP_manager_initHandle_TC001){
// Please enable and make test code here!!
#if 1
    // Please check source file, make mock files and insert EXPECT_CALL for callee functions.
    someIP_manager *testObj = new someIP_manager();
    testObj->initHandle(nullptr);
    EXPECT_EQ(Bypass, true);
#endif
}

/**
 *   @brief This is a test script for the someIP_manager_initHandle function
 *   @classID someIP_manager
 *   @methodID initHandle
 *   @paramList android::sp<OemCallHandler> handler
 *   @priority P2
 *   @resolution_Method
 *   @test_condition
 *   @test_Coverage_Item
 *   @test_case_ID someIP_managerTest_initHandle_TC002
 *   @test_type functionality
 *   @test_objective
 *   @test_precon
 *   @test_input
 *   @test_expected_result
 *   @test_module
 *   @design_id
 */
TEST_F(someIP_managerTest, someIP_manager_initHandle_TC002){
// Please enable and make test code here!!
#if 1
    // Please check source file, make mock files and insert EXPECT_CALL for callee functions.
    someIP_manager *testObj = new someIP_manager();
    testObj->initHandle(nullptr);
    EXPECT_EQ(Bypass, true);
#endif
}


/**
 *   @brief This is a test script for the someIP_manager_initHandle function
 *   @classID someIP_manager
 *   @methodID initHandle
 *   @paramList android::sp<OemCallHandler> handler
 *   @priority P2
 *   @resolution_Method
 *   @test_condition
 *   @test_Coverage_Item
 *   @test_case_ID someIP_managerTest_initHandle_TC003
 *   @test_type functionality
 *   @test_objective
 *   @test_precon
 *   @test_input
 *   @test_expected_result
 *   @test_module
 *   @design_id
 */
TEST_F(someIP_managerTest, someIP_manager_initHandle_TC003){
// Please enable and make test code here!!
#if 1
    // Please check source file, make mock files and insert EXPECT_CALL for callee functions.
    someIP_manager *testObj = new someIP_manager();
    testObj->initHandle(nullptr);
    EXPECT_EQ(Bypass, true);
#endif
}

/**
 *   @brief This is a test script for the someIP_manager_registerSomeipProviderReceiver function
 *   @classID someIP_manager
 *   @methodID registerSomeipProviderReceiver
 *   @paramList 
 *   @priority P2
 *   @resolution_Method
 *   @test_condition
 *   @test_Coverage_Item
 *   @test_case_ID someIP_managerTest_registerSomeipProviderReceiver_TC001
 *   @test_type functionality
 *   @test_objective
 *   @test_precon
 *   @test_input
 *   @test_expected_result
 *   @test_module
 *   @design_id
 */
TEST_F(someIP_managerTest, someIP_manager_registerSomeipProviderReceiver_TC001){
// Please enable and make test code here!!
#if 1
    // Please check source file, make mock files and insert EXPECT_CALL for callee functions.
    someIP_manager *testObj = new someIP_manager();
    EXPECT_CALL(*M_IServiceManager, getService(_)).WillRepeatedly(Return(nullptr));;
    EXPECT_CALL(*M_Handler, sendMessageDelayed(_,_)).WillRepeatedly(Return(true));
    testObj->registerSomeipProviderReceiver();
    EXPECT_EQ(Bypass, true);

#endif
}

/**
 *   @brief This is a test script for the someIP_manager_registerSomeipProviderReceiver function
 *   @classID someIP_manager
 *   @methodID registerSomeipProviderReceiver
 *   @paramList 
 *   @priority P2
 *   @resolution_Method
 *   @test_condition
 *   @test_Coverage_Item
 *   @test_case_ID someIP_managerTest_registerSomeipProviderReceiver_TC002
 *   @test_type functionality
 *   @test_objective
 *   @test_precon
 *   @test_input
 *   @test_expected_result
 *   @test_module
 *   @design_id
 */
TEST_F(someIP_managerTest, someIP_manager_registerSomeipProviderReceiver_TC002){
// Please enable and make test code here!!
#if 1
    // Please check source file, make mock files and insert EXPECT_CALL for callee functions.
    someIP_manager *testObj = new someIP_manager();
    bool ret_param_0 = false;
    // EXPECT_CALL(*M_AppManager, getBootCompleted(_)).WillRepeatedly(Return(ret_param_0));
    error_t ret_param_2 = E_OK;
    // EXPECT_CALL(*M_AppManager, registerSystemPostReceiver(_,_)).WillRepeatedly(Return(ret_param_2));

    ITestISomeipProviderManagerService *testSomeip = new ITestISomeipProviderManagerService();
    sp<IBinder> pBinder = sp<IBinder>(testSomeip);
    EXPECT_CALL(*M_IServiceManager, getService(_)).WillRepeatedly(Return(pBinder));

    BBinder * pBBinder = new BBinder();
    sp<IBinder> pInterface = sp<IBinder>(pBBinder);
    EXPECT_CALL(*M_IInterface, asBinder_004(_)).WillRepeatedly(Return(pInterface));

    status_t ret_param_1 = -1;
    EXPECT_CALL(*M_BBinder, linkToDeath(_,_,_)).WillRepeatedly(Return(ret_param_1));
    EXPECT_CALL(*M_Handler, sendMessageDelayed(_,_)).WillRepeatedly(Return(true));
    testObj->registerSomeipProviderReceiver();
    delete testObj;
    EXPECT_EQ(Bypass, true);
#endif
}

/**
 *   @brief This is a test script for the someIP_manager_registerSomeipProviderReceiver function
 *   @classID someIP_manager
 *   @methodID registerSomeipProviderReceiver
 *   @paramList 
 *   @priority P2
 *   @resolution_Method
 *   @test_condition
 *   @test_Coverage_Item
 *   @test_case_ID someIP_managerTest_registerSomeipProviderReceiver_TC003
 *   @test_type functionality
 *   @test_objective
 *   @test_precon
 *   @test_input
 *   @test_expected_result
 *   @test_module
 *   @design_id
 */
TEST_F(someIP_managerTest, someIP_manager_registerSomeipProviderReceiver_TC003){
// Please enable and make test code here!!
#if 1
    // Please check source file, make mock files and insert EXPECT_CALL for callee functions.
    someIP_manager *testObj = new someIP_manager();
    bool ret_param_0 = false;
    // EXPECT_CALL(*M_AppManager, getBootCompleted(_)).WillRepeatedly(Return(ret_param_0));
    error_t ret_param_2 = E_OK;
    // EXPECT_CALL(*M_AppManager, registerSystemPostReceiver(_,_)).WillRepeatedly(Return(ret_param_2));

    ITestISomeipProviderManagerService *testSomeip = new ITestISomeipProviderManagerService();
    sp<IBinder> pBinder = sp<IBinder>(testSomeip);
    EXPECT_CALL(*M_IServiceManager, getService(_)).WillRepeatedly(Return(pBinder));

    BBinder * pBBinder = new BBinder();
    sp<IBinder> pInterface = sp<IBinder>(pBBinder);
    EXPECT_CALL(*M_IInterface, asBinder_004(_)).WillRepeatedly(Return(pInterface));

    status_t ret_param_1 = android::OK;
    EXPECT_CALL(*M_BBinder, linkToDeath(_,_,_)).WillRepeatedly(Return(ret_param_1));
    testObj->registerSomeipProviderReceiver();
    EXPECT_EQ(Bypass, true);
#endif
}


/**
 *   @brief This is a test script for the someIP_manager_onBinderDied function
 *   @classID someIP_manager
 *   @methodID onBinderDied
 *   @paramList const android::wp<android::IBinder>& service
 *   @priority P2
 *   @resolution_Method
 *   @test_condition
 *   @test_Coverage_Item
 *   @test_case_ID someIP_managerTest_onBinderDied_TC001
 *   @test_type functionality
 *   @test_objective
 *   @test_precon
 *   @test_input
 *   @test_expected_result
 *   @test_module
 *   @design_id
 */
TEST_F(someIP_managerTest, someIP_manager_onBinderDied_TC001){
// Please enable and make test code here!!
#if 1
    // Please check source file, make mock files and insert EXPECT_CALL for callee functions.
    someIP_manager *testObj = new someIP_manager();
    BBinder * pBBinder = new BBinder();
    sp<IBinder> pInterface = sp<IBinder>(pBBinder);
    EXPECT_CALL(*M_IInterface, asBinder_004(_)).WillRepeatedly(Return(pInterface));
    sp<sl::Message> ret_param_0 = sp<sl::Message>(new sl::Message);
    EXPECT_CALL(*M_Handler, obtainMessage_003(_,_)).WillRepeatedly(Return(ret_param_0));
    EXPECT_CALL(*M_Handler, sendMessageDelayed(_,_)).WillRepeatedly(Return(true));
    testObj->onBinderDied(nullptr);
    EXPECT_EQ(Bypass, true);
#endif
}

/**
 *   @brief This is a test script for the someIP_manager_onBinderDied function
 *   @classID someIP_manager
 *   @methodID onBinderDied
 *   @paramList const android::wp<android::IBinder>& service
 *   @priority P2
 *   @resolution_Method
 *   @test_condition
 *   @test_Coverage_Item
 *   @test_case_ID someIP_managerTest_onBinderDied_TC002
 *   @test_type functionality
 *   @test_objective
 *   @test_precon
 *   @test_input
 *   @test_expected_result
 *   @test_module
 *   @design_id
 */
TEST_F(someIP_managerTest, someIP_manager_onBinderDied_TC002){
// Please enable and make test code here!!
#if 1
    // Please check source file, make mock files and insert EXPECT_CALL for callee functions.
    someIP_manager *testObj = new someIP_manager();
    BBinder * pBBinder = new BBinder();
    sp<IBinder> pInterface = sp<IBinder>(pBBinder);
    EXPECT_CALL(*M_IInterface, asBinder_004(_)).WillRepeatedly(Return(pInterface));
    sp<sl::Message> ret_param_0 = sp<sl::Message>(new sl::Message);
    EXPECT_CALL(*M_Handler, obtainMessage_003(_,_)).WillRepeatedly(Return(ret_param_0));
    EXPECT_CALL(*M_Handler, sendMessageDelayed(_,_)).WillRepeatedly(Return(false));
    testObj->onBinderDied(pInterface);
    EXPECT_EQ(Bypass, true);
#endif
}

/**
 *   @brief This is a test script for the someIP_manager_onBinderDied function
 *   @classID someIP_manager
 *   @methodID onBinderDied
 *   @paramList const android::wp<android::IBinder>& service
 *   @priority P2
 *   @resolution_Method
 *   @test_condition
 *   @test_Coverage_Item
 *   @test_case_ID someIP_managerTest_onBinderDied_TC003
 *   @test_type functionality
 *   @test_objective
 *   @test_precon
 *   @test_input
 *   @test_expected_result
 *   @test_module
 *   @design_id
 */
TEST_F(someIP_managerTest, someIP_manager_onBinderDied_TC003){
// Please enable and make test code here!!
#if 1
    // Please check source file, make mock files and insert EXPECT_CALL for callee functions.
    someIP_manager *testObj = new someIP_manager();
    BBinder * pBBinder = new BBinder();
    sp<IBinder> pInterface = sp<IBinder>(pBBinder);
    EXPECT_CALL(*M_IInterface, asBinder_004(_)).WillRepeatedly(Return(pInterface));
    sp<sl::Message> ret_param_0 = sp<sl::Message>(new sl::Message);
    EXPECT_CALL(*M_Handler, obtainMessage_003(_,_)).WillRepeatedly(Return(ret_param_0));
    EXPECT_CALL(*M_Handler, sendMessageDelayed(_,_)).WillRepeatedly(Return(false));
    testObj->onBinderDied(pInterface);
    EXPECT_EQ(Bypass, true);
#endif
}

/**
 *   @brief This is a test script for the someIP_manager_RxDataToApp function
 *   @classID someIP_manager
 *   @methodID RxDataToApp
 *   @paramList EnumSomeipRxMsgID& kSomeipRxMsgID, size_t& bufSomeipDataLen, uint8_t* bufSomeipData
 *   @priority P2
 *   @resolution_Method
 *   @test_condition
 *   @test_Coverage_Item
 *   @test_case_ID someIP_managerTest_RxDataToApp_TC001
 *   @test_type functionality
 *   @test_objective
 *   @test_precon
 *   @test_input
 *   @test_expected_result
 *   @test_module
 *   @design_id
 */
TEST_F(someIP_managerTest, someIP_manager_RxDataToApp_TC001){
// Please enable and make test code here!!
#if 1
    // Please check source file, make mock files and insert EXPECT_CALL for callee functions.
    someIP_manager *testObj = new someIP_manager();
    EnumSomeipRxMsgID enumSum = EnumSomeipRxMsgID::kNotiEthernetStatus;
    size_t msz = 0;
    sp<sl::Message> ret_param_0 = sp<sl::Message>(new sl::Message);
    EXPECT_CALL(*M_Handler, obtainMessage_003(_,_)).WillRepeatedly(Return(ret_param_0));
    testObj->RxDataToApp(enumSum, msz, nullptr);
    EXPECT_EQ(Bypass, true);
#endif
}

/**
 *   @brief This is a test script for the someIP_manager_RxDataToApp function
 *   @classID someIP_manager
 *   @methodID RxDataToApp
 *   @paramList EnumSomeipRxMsgID& kSomeipRxMsgID, size_t& bufSomeipDataLen, uint8_t* bufSomeipData
 *   @priority P2
 *   @resolution_Method
 *   @test_condition
 *   @test_Coverage_Item
 *   @test_case_ID someIP_managerTest_RxDataToApp_TC002
 *   @test_type functionality
 *   @test_objective
 *   @test_precon
 *   @test_input
 *   @test_expected_result
 *   @test_module
 *   @design_id
 */
TEST_F(someIP_managerTest, someIP_manager_RxDataToApp_TC002){
// Please enable and make test code here!!
#if 1
    // Please check source file, make mock files and insert EXPECT_CALL for callee functions.
    someIP_manager *testObj = new someIP_manager();
    EnumSomeipRxMsgID enumSum = EnumSomeipRxMsgID::kNotiEthernetStatus;
    uint8_t data = (uint8_t) self::ethernetState::ETHERNET_READY;
    uint8_t *payload = &data;
    size_t len = sizeof(data)/sizeof(uint8_t);
    EXPECT_CALL(*M_Buffer, data()).WillRepeatedly(Return(payload));
    EXPECT_CALL(*M_Buffer, setTo(_,_)).Times(1);
    sp<sl::Message> ret_param_0 = sp<sl::Message>(new sl::Message);
    EXPECT_CALL(*M_Handler, obtainMessage_003(_,_)).WillRepeatedly(Return(ret_param_0));
    testObj->RxDataToApp(enumSum, len, payload);
    EXPECT_EQ(Bypass, true);
#endif
}

/**
 *   @brief This is a test script for the someIP_manager_RxDataToApp function
 *   @classID someIP_manager
 *   @methodID RxDataToApp
 *   @paramList EnumSomeipRxMsgID& kSomeipRxMsgID, size_t& bufSomeipDataLen, uint8_t* bufSomeipData
 *   @priority P2
 *   @resolution_Method
 *   @test_condition
 *   @test_Coverage_Item
 *   @test_case_ID someIP_managerTest_RxDataToApp_TC003
 *   @test_type functionality
 *   @test_objective
 *   @test_precon
 *   @test_input
 *   @test_expected_result
 *   @test_module
 *   @design_id
 */
TEST_F(someIP_managerTest, someIP_manager_RxDataToApp_TC003){
// Please enable and make test code here!!
#if 1
    // Please check source file, make mock files and insert EXPECT_CALL for callee functions.
    someIP_manager *testObj = new someIP_manager();
    EnumSomeipRxMsgID enumSum = EnumSomeipRxMsgID::kNotiEthernetStatus;
    uint8_t data = (uint8_t) self::ethernetState::ETHERNET_NOT_READY;
    uint8_t *payload = &data;
    size_t len = sizeof(data)/sizeof(uint8_t);
    EXPECT_CALL(*M_Buffer, data()).WillRepeatedly(Return(payload));
    EXPECT_CALL(*M_Buffer, setTo(_,_)).Times(1);
    sp<sl::Message> ret_param_0 = sp<sl::Message>(new sl::Message);
    EXPECT_CALL(*M_Handler, obtainMessage_003(_,_)).WillRepeatedly(Return(ret_param_0));
    testObj->RxDataToApp(enumSum, len, payload);
    EXPECT_EQ(Bypass, true);
#endif
}


/**
 *   @brief This is a test script for the someIP_manager_RxDataToApp function
 *   @classID someIP_manager
 *   @methodID RxDataToApp
 *   @paramList EnumSomeipRxMsgID& kSomeipRxMsgID, size_t& bufSomeipDataLen, uint8_t* bufSomeipData
 *   @priority P2
 *   @resolution_Method
 *   @test_condition
 *   @test_Coverage_Item
 *   @test_case_ID someIP_managerTest_RxDataToApp_TC004
 *   @test_type functionality
 *   @test_objective
 *   @test_precon
 *   @test_input
 *   @test_expected_result
 *   @test_module
 *   @design_id
 */
TEST_F(someIP_managerTest, someIP_manager_RxDataToApp_TC004){
// Please enable and make test code here!!
#if 1
    // Please check source file, make mock files and insert EXPECT_CALL for callee functions.
    someIP_manager *testObj = new someIP_manager();
    EnumSomeipRxMsgID enumSum = EnumSomeipRxMsgID::kRxCallStatusChangeRequest;
    uint8_t data = (uint8_t) self::ethernetState::ETHERNET_NOT_READY;
    uint8_t *payload = &data;
    size_t len = sizeof(data)/sizeof(uint8_t);
        EXPECT_CALL(*M_Buffer, setTo(_,_)).Times(1);
    testObj->RxDataToApp(enumSum, len, payload);
    EXPECT_EQ(Bypass, true);
#endif
}
/**
 *   @brief This is a test script for the someIP_manager_RxDataToApp function
 *   @classID someIP_manager
 *   @methodID RxDataToApp
 *   @paramList EnumSomeipRxMsgID& kSomeipRxMsgID, size_t& bufSomeipDataLen, uint8_t* bufSomeipData
 *   @priority P2
 *   @resolution_Method
 *   @test_condition
 *   @test_Coverage_Item
 *   @test_case_ID someIP_managerTest_RxDataToApp_TC005
 *   @test_type functionality
 *   @test_objective
 *   @test_precon
 *   @test_input
 *   @test_expected_result
 *   @test_module
 *   @design_id
 */
TEST_F(someIP_managerTest, someIP_manager_RxDataToApp_TC005){
// Please enable and make test code here!!
#if 1
    // Please check source file, make mock files and insert EXPECT_CALL for callee functions.
    someIP_manager *testObj = new someIP_manager();
    EnumSomeipRxMsgID enumSum = EnumSomeipRxMsgID::kRxCallStatusChangeRequest;
    uint8_t data = (uint8_t) self::ethernetState::ETHERNET_NOT_READY;
    uint8_t *payload = &data;
    size_t len = sizeof(data)/sizeof(uint8_t);
    EXPECT_CALL(*M_Buffer, data()).WillRepeatedly(Return(payload));
    EXPECT_CALL(*M_Buffer, setTo(_,_)).Times(1);
    sp<sl::Message> ret_param_0 = sp<sl::Message>(new sl::Message);
    EXPECT_CALL(*M_Handler, obtainMessage_008(_,_)).WillRepeatedly(Return(ret_param_0));
    testObj->RxDataToApp(enumSum, len, payload);
    EXPECT_EQ(Bypass, true);
#endif
}

/**
 *   @brief This is a test script for the someIP_manager_RxDataToApp function
 *   @classID someIP_manager
 *   @methodID RxDataToApp
 *   @paramList EnumSomeipRxMsgID& kSomeipRxMsgID, size_t& bufSomeipDataLen, uint8_t* bufSomeipData
 *   @priority P2
 *   @resolution_Method
 *   @test_condition
 *   @test_Coverage_Item
 *   @test_case_ID someIP_managerTest_RxDataToApp_TC006
 *   @test_type functionality
 *   @test_objective
 *   @test_precon
 *   @test_input
 *   @test_expected_result
 *   @test_module
 *   @design_id
 */
TEST_F(someIP_managerTest, someIP_manager_RxDataToApp_TC006){
// Please enable and make test code here!!
#if 1
    // Please check source file, make mock files and insert EXPECT_CALL for callee functions.
    someIP_manager *testObj = new someIP_manager();
    EnumSomeipRxMsgID enumSum = EnumSomeipRxMsgID::kRxDefaultMgsID;
    uint8_t data = (uint8_t) self::ethernetState::ETHERNET_NOT_READY;
    uint8_t *payload = &data;
    size_t len = sizeof(data)/sizeof(uint8_t);
    EXPECT_CALL(*M_Buffer, setTo(_,_)).Times(1);
    testObj->RxDataToApp(enumSum, len, payload);
    EXPECT_EQ(Bypass, true);
#endif
}

/**
 *   @brief This is a test script for the someIP_manager_getInstance function
 *   @classID someIP_manager
 *   @methodID getInstance
 *   @paramList 
 *   @priority P2
 *   @resolution_Method
 *   @test_condition
 *   @test_Coverage_Item
 *   @test_case_ID someIP_managerTest_getInstance_TC001
 *   @test_type functionality
 *   @test_objective
 *   @test_precon
 *   @test_input
 *   @test_expected_result
 *   @test_module
 *   @design_id
 */
TEST_F(someIP_managerTest, someIP_manager_getInstance_TC001){
// Please enable and make test code here!!
#if 1
    // Please check source file, make mock files and insert EXPECT_CALL for callee functions.
    someIP_manager *testObj = new someIP_manager();
    testObj->getInstance();
    EXPECT_EQ(Bypass, true);
#endif
}

/**
 *   @brief This is a test script for the someIP_manager_getInstance function
 *   @classID someIP_manager
 *   @methodID getInstance
 *   @paramList 
 *   @priority P2
 *   @resolution_Method
 *   @test_condition
 *   @test_Coverage_Item
 *   @test_case_ID someIP_managerTest_getInstance_TC002
 *   @test_type functionality
 *   @test_objective
 *   @test_precon
 *   @test_input
 *   @test_expected_result
 *   @test_module
 *   @design_id
 */
TEST_F(someIP_managerTest, someIP_manager_getInstance_TC002){
// Please enable and make test code here!!
#if 1
    // Please check source file, make mock files and insert EXPECT_CALL for callee functions.
    someIP_manager *testObj = new someIP_manager();
    testObj->s_someIPMgr = new someIP_manager();
    testObj->getInstance();
    delete testObj;
    EXPECT_EQ(Bypass, true);
#endif
}

/**
 *   @brief This is a test script for the someIP_manager_getInstance function
 *   @classID someIP_manager
 *   @methodID getInstance
 *   @paramList 
 *   @priority P2
 *   @resolution_Method
 *   @test_condition
 *   @test_Coverage_Item
 *   @test_case_ID someIP_managerTest_getInstance_TC003
 *   @test_type functionality
 *   @test_objective
 *   @test_precon
 *   @test_input
 *   @test_expected_result
 *   @test_module
 *   @design_id
 */
TEST_F(someIP_managerTest, someIP_manager_getInstance_TC003){
// Please enable and make test code here!!
#if 1
    // Please check source file, make mock files and insert EXPECT_CALL for callee functions.
    someIP_manager *testObj = new someIP_manager();
    testObj->s_someIPMgr = new someIP_manager();
    testObj->getInstance();
    delete testObj;
    EXPECT_EQ(Bypass, true);
#endif
}

/**
 *   @brief This is a test script for the someIP_manager_sendToICB function
 *   @classID Common
 *   @methodID sendToICB
 *   @paramList EnumSomeipTxMsgID id, uint8_t data
 *   @priority P2
 *   @resolution_Method
 *   @test_condition
 *   @test_Coverage_Item
 *   @test_case_ID someIP_manager_sendToICB_TC001
 *   @test_type functionality
 *   @test_objective
 *   @test_precon
 *   @test_input
 *   @test_expected_result
 *   @test_module
 *   @design_id
 */
TEST_F(someIP_managerTest, someIP_manager_sendToICB_TC001){
// Please enable and make test code here!!
#if 1
    // Please check source file, make mock files and insert EXPECT_CALL for callee functions.
    someIP_manager testObj;
    EnumSomeipTxMsgID enumId;
    uint8_t data = 0x01;
    // EXPECT_CALL(*M_SomeipProviderManager, instance()).WillRepeatedly(Return(new SomeipProviderManager()));
    EXPECT_CALL(*M_Buffer, data()).WillRepeatedly(Return(new uint8_t[1]));
  //  EXPECT_CALL(*M_SomeipProviderManager, TidlSomeipProSendToICB(_,_,_)).WillOnce(SomeipProException()).WillRepeatedly(Return(E_OK));
    auto ret = testObj.sendToICB(enumId, data);
    EXPECT_EQ(ret, -1);
#endif
}