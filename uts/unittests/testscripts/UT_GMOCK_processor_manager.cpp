/*
 * test script file generated by uts
 */

#include "gtest/gtest.h"
#include "gmock/gmock.h"
#include <dlfcn.h>


#define private public

#pragma GCC push_options
#pragma GCC optimize("O2")
#pragma GCC optimize("-fno-inline")
// Include Source File for testing!!
#include "../src/processor/processor_manager.cpp"

using namespace android;
using namespace oc;
using namespace cv;
using namespace sl;

// Include MOCK FILES!!
#include "mock/src/oem_call_app_constants_mock.h"
#include "mock/src/processor/acn_phone_processor_mock.h"
// #include "mock/src/processor/us_processor_mock.h"
#include "mock/src/processor/r_call_jp_processor_mock.h"


/*
 * Define Mock Class / function
*/
class Base_ProcessorManager {
public:
    virtual ~Base_ProcessorManager(){ }
};

class Mock_ProcessorManager : public Base_ProcessorManager {
public:
};

Mock_ProcessorManager *M_ProcessorManager;

using ::testing::Return;
using ::testing::_;
using ::testing::A;
using ::testing::ReturnRef;
using ::testing::Values;
using ::testing::SetArgPointee;
using ::testing::SetArrayArgument;
using ::testing::SaveArg;
using ::testing::SaveArgPointee;
using ::testing::DoAll;
using ::testing::Args;
using ::testing::AllOf;
using ::testing::AtLeast;
using ::testing::Combine;
bool Bypass = true;
class ProcessorManagerTest : public ::testing::Test {
protected:
    virtual void SetUp(){
        M_ProcessorManager = new Mock_ProcessorManager();
        M_RCallProcessor = new MockRCallProcessor();
        M_ACNPhoneProcessor = new MockACNPhoneProcessor();
    }
    virtual void TearDown(){
        delete M_ProcessorManager;
        delete M_RCallProcessor;
        delete M_ACNPhoneProcessor;
    }
};



/**
 *   @brief This is a test script for the ProcessorManager_ProcessorManager function
 *   @classID ProcessorManager
 *   @methodID ProcessorManager
 *   @paramList android::sp<oc::OemCallHandler> spHandler, std::shared_ptr<oc::AdapterLocator> adapters
 *   @priority P2
 *   @resolution_Method
 *   @test_condition
 *   @test_Coverage_Item
 *   @test_case_ID ocTest_ProcessorManager_TC001
 *   @test_type functionality
 *   @test_objective
 *   @test_precon
 *   @test_input
 *   @test_expected_result
 *   @test_module
 *   @design_id
 */
TEST_F(ProcessorManagerTest, ProcessorManager_ProcessorManager_TC001){
// Please enable and make test code here!!
#if 1
    // Please check source file, make mock files and insert EXPECT_CALL for callee functions.
    ProcessorManager *testObj = new ProcessorManager();
    EXPECT_EQ(Bypass, true);
    delete testObj;
#endif
}

/**
 *   @brief This is a test script for the ProcessorManager_init function
 *   @classID ProcessorManager
 *   @methodID init
 *   @paramList android::sp<oc::OemCallHandler> spHandler, std::shared_ptr<oc::AdapterLocator> adapters
 *   @priority P2
 *   @resolution_Method
 *   @test_condition
 *   @test_Coverage_Item
 *   @test_case_ID ocTest_init_TC001
 *   @test_type functionality
 *   @test_objective
 *   @test_precon
 *   @test_input
 *   @test_expected_result
 *   @test_module
 *   @design_id
 */
TEST_F(ProcessorManagerTest, ProcessorManager_init_TC001){
// Please enable and make test code here!!
#if 1
    // Please check source file, make mock files and insert EXPECT_CALL for callee functions.
    ProcessorManager testObj;
    testObj.init(nullptr, nullptr);
    EXPECT_EQ(Bypass, true);
#endif
}


/**
 *   @brief This is a test script for the ProcessorManager_init function
 *   @classID ProcessorManager
 *   @methodID init
 *   @paramList android::sp<oc::OemCallHandler> spHandler, std::shared_ptr<oc::AdapterLocator> adapters
 *   @priority P2
 *   @resolution_Method
 *   @test_condition
 *   @test_Coverage_Item
 *   @test_case_ID ocTest_init_TC002
 *   @test_type functionality
 *   @test_objective
 *   @test_precon
 *   @test_input
 *   @test_expected_result
 *   @test_module
 *   @design_id
 */
TEST_F(ProcessorManagerTest, ProcessorManager_init_TC002){
// Please enable and make test code here!!
#if 1
    // Please check source file, make mock files and insert EXPECT_CALL for callee functions.
    ProcessorManager testObj;
    testObj.init(nullptr, nullptr);
    EXPECT_EQ(Bypass, true);
#endif
}


/**
 *   @brief This is a test script for the ProcessorManager_init function
 *   @classID ProcessorManager
 *   @methodID init
 *   @paramList android::sp<oc::OemCallHandler> spHandler, std::shared_ptr<oc::AdapterLocator> adapters
 *   @priority P2
 *   @resolution_Method
 *   @test_condition
 *   @test_Coverage_Item
 *   @test_case_ID ocTest_init_TC003
 *   @test_type functionality
 *   @test_objective
 *   @test_precon
 *   @test_input
 *   @test_expected_result
 *   @test_module
 *   @design_id
 */
TEST_F(ProcessorManagerTest, ProcessorManager_init_TC003){
// Please enable and make test code here!!
#if 1
    // Please check source file, make mock files and insert EXPECT_CALL for callee functions.
    ProcessorManager testObj;
    testObj.init(nullptr, nullptr);
    EXPECT_EQ(Bypass, true);
#endif
}

/**
 *   @brief This is a test script for the ProcessorManager_handleMessage function
 *   @classID ProcessorManager
 *   @methodID handleMessage
 *   @paramList const uint32_t what, const android::sp<sl::Message> &msg
 *   @priority P2
 *   @resolution_Method
 *   @test_condition
 *   @test_Coverage_Item
 *   @test_case_ID ProcessorManagerTest_handleMessage_TC001
 *   @test_type functionality
 *   @test_objective
 *   @test_precon
 *   @test_input
 *   @test_expected_result
 *   @test_module
 *   @design_id
 */
TEST_F(ProcessorManagerTest, ProcessorManager_handleMessage_TC001){
// Please enable and make test code here!!
#if 1
    // Please check source file, make mock files and insert EXPECT_CALL for callee functions.
    ProcessorManager *testObj = new ProcessorManager();
    sl::Message *msg = new sl::Message();
    
    EXPECT_CALL(*M_RCallProcessor, isAvailable()).WillRepeatedly(Return(true));
    EXPECT_CALL(*M_ACNPhoneProcessor, doProcessorHandler(_,_)).WillRepeatedly(Return());
    EXPECT_CALL(*M_RCallProcessor, isAvailable()).WillRepeatedly(Return(true));
    EXPECT_CALL(*M_ACNPhoneProcessor, doProcessorHandler(_,_)).WillRepeatedly(Return());
    testObj->handleMessage(100, msg);
    delete testObj;
    EXPECT_EQ(Bypass, true);
#endif
}

/**
 *   @brief This is a test script for the ProcessorManager_handleMessage function
 *   @classID ProcessorManager
 *   @methodID handleMessage
 *   @paramList const uint32_t what, const android::sp<sl::Message> &msg
 *   @priority P2
 *   @resolution_Method
 *   @test_condition
 *   @test_Coverage_Item
 *   @test_case_ID ProcessorManagerTest_handleMessage_TC002
 *   @test_type functionality
 *   @test_objective
 *   @test_precon
 *   @test_input
 *   @test_expected_result
 *   @test_module
 *   @design_id
 */
TEST_F(ProcessorManagerTest, ProcessorManager_handleMessage_TC002){
// Please enable and make test code here!!
#if 1
    // Please check source file, make mock files and insert EXPECT_CALL for callee functions.
    ProcessorManager *testObj = new ProcessorManager();
    sl::Message *msg = new sl::Message();
    EXPECT_CALL(*M_RCallProcessor, isAvailable()).WillRepeatedly(Return(true));
    EXPECT_CALL(*M_ACNPhoneProcessor, doProcessorHandler(_,_)).WillRepeatedly(Return());
    EXPECT_CALL(*M_RCallProcessor, isAvailable()).WillRepeatedly(Return(true));
    EXPECT_CALL(*M_ACNPhoneProcessor, doProcessorHandler(_,_)).WillRepeatedly(Return());
    testObj->handleMessage(100, msg);
    delete testObj;
    EXPECT_EQ(Bypass, true);
#endif
}



/**
 *   @brief This is a test script for the ProcessorManager_handleMessage function
 *   @classID ProcessorManager
 *   @methodID handleMessage
 *   @paramList const uint32_t what, const android::sp<sl::Message> &msg
 *   @priority P2
 *   @resolution_Method
 *   @test_condition
 *   @test_Coverage_Item
 *   @test_case_ID ProcessorManagerTest_handleMessage_TC003
 *   @test_type functionality
 *   @test_objective
 *   @test_precon
 *   @test_input
 *   @test_expected_result
 *   @test_module
 *   @design_id
 */
TEST_F(ProcessorManagerTest, ProcessorManager_handleMessage_TC003){
// Please enable and make test code here!!
#if 1
    // Please check source file, make mock files and insert EXPECT_CALL for callee functions.
    ProcessorManager *testObj = new ProcessorManager();
    sl::Message *msg = new sl::Message();
    EXPECT_CALL(*M_RCallProcessor, isAvailable()).WillRepeatedly(Return(true));
    EXPECT_CALL(*M_ACNPhoneProcessor, doProcessorHandler(_,_)).WillRepeatedly(Return());
    EXPECT_CALL(*M_RCallProcessor, isAvailable()).WillRepeatedly(Return(true));
    EXPECT_CALL(*M_ACNPhoneProcessor, doProcessorHandler(_,_)).WillRepeatedly(Return());
    testObj->handleMessage(100, msg);
    delete testObj;
    EXPECT_EQ(Bypass, true);
#endif
}



