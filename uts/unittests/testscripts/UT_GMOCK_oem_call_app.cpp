/*
 * test script file generated by uts
 */

#include "gtest/gtest.h"
#include "gmock/gmock.h"
#include <dlfcn.h>


#define private public

#pragma GCC push_options
#pragma GCC optimize("O1")
#pragma GCC optimize("-fno-inline")
// Include Source File for testing!!
#include "../src/oem_call_app.cpp"
#pragma GCC pop_options
//DLT_DECLARE_CONTEXT(ctxOEMCall);
using namespace android;
using namespace oc;
using namespace sl;
#include "mock/service/Handler_mock.h"
#include "mock/service/BpBinder_mock.h"
#include "mock/service/IServiceManager_mock.h"
#include "mock/src/receiver/receiver_manager_mock.h"
#include "mock/src/receiver/someip_manager_mock.h"
#include "mock/src/processor/processor_manager_mock.h"
#include "mock/src/processor/processor_base_mock.h"
#include "mock/src/services_adapter/config_manager_adapter_mock.h"
#include "mock/src/services_adapter/hmi_manager_adapter_mock.h"
#include "mock/src/services_adapter/audio_manager_adapter_mock.h"
#include "mock/src/services_adapter/telephone_manager_adapter_mock.h"
#include "mock/src/services_adapter/app_manager_adapter_mock.h"
#include "mock/src/services_adapter/power_manager_adapter_mock.h"
#include "mock/src/services_adapter/rim_adapter_mock.h"
#include "mock/src/services_adapter/comm_manager_adapter_mock.h"
// #include "mock/src/services_adapter/AlarmManagerAdapter_mock.h"
#include "mock/src/oem_call_handler_mock.h"
#include "mock/src/logger_mock.h"
#include <services/ApplicationManagerService/ApplicationManager.h>
#include "mock/service/ApplicationManager_mock.h"
#include "mock/service/AppManager_mock.h"
#include "mock/src/oem_call_app_constants_mock.h"
#include "mock/src/oem_call_app_if_mock.h"
#include "mock/src/oemcall_app2_mock.h"

// Include MOCK FILES!!
// #include "mock/directory/filename_mock.h"

/*
 * Define Mock Class / function
*/
class Base_OEMCallApp {
public:
    virtual ~Base_OEMCallApp(){ }
};

class Mock_OEMCallApp : public Base_OEMCallApp {
public:
};

Mock_OEMCallApp *M_OEMCallApp;

using ::testing::Return;
using ::testing::_;
using ::testing::A;
using ::testing::ReturnRef;
using ::testing::Values;
using ::testing::SetArgPointee;
using ::testing::SetArrayArgument;
using ::testing::SaveArg;
using ::testing::SaveArgPointee;
using ::testing::DoAll;
using ::testing::Args;
using ::testing::AllOf;
using ::testing::AtLeast;
using ::testing::Combine;
bool Bypass = true;



class OEMCallAppTest : public ::testing::Test {
protected:
    sp<IBinder> pBinder;
    virtual void SetUp(){
        M_OEMCallApp = new Mock_OEMCallApp();
        M_OEMCallApp2 = new MockOEMCallApp2();
        M_ReceiverManager = new MockReceiverManager();
        M_ProcessorManager = new MockProcessorManager();
        M_Handler = new MockHandler();
        M_IServiceManager = new MockIServiceManager();
        M_PowerManagerAdapter = new MockPowerManagerAdapter();
        M_HmiManagerAdapter = new MockHmiManagerAdapter();
        M_AudioManagerAdapter = new MockAudioManagerAdapter();
        // M_AlarmManagerAdapter = new MockAlarmManagerAdapter();
        M_AppManagerAdapter = new MockAppManagerAdapter();
        M_ConfigManager = new MockConfigManager();
        ecallapp::M_CommManagerAdapter = new ecallapp::MockCommManagerAdapter();
        M_someIP_manager = new MocksomeIP_manager();
        pBinder = new BpBinder(0);
        M_ApplicationManager = new MockApplicationManager();
        M_AppManager = new MockAppManager();
        M_OEMCallAppIF = new MockOEMCallAppIF();

    }
    virtual void TearDown(){
        delete M_OEMCallApp;
        delete M_OEMCallApp2;
        delete M_ReceiverManager;
        delete M_ProcessorManager;
        delete M_ConfigManager;
        delete M_Handler;
        delete M_IServiceManager;
        delete M_PowerManagerAdapter;
        delete M_HmiManagerAdapter;
        delete M_AudioManagerAdapter;
        delete M_AppManagerAdapter;
        delete ecallapp::M_CommManagerAdapter;
        delete M_someIP_manager;
        delete M_ApplicationManager;
        delete M_AppManager;
        // delete M_AlarmManagerAdapter;
    }

};


/**
 *   @brief This is a test script for the OEMCallApp_OEMCallApp function
 *   @classID OEMCallApp
 *   @methodID OEMCallApp
 *   @paramList
 *   @priority P2
 *   @resolution_Method
 *   @test_condition
 *   @test_Coverage_Item
 *   @test_case_ID OEMCallAppTest_OEMCallApp_TC001
 *   @test_type functionality
 *   @test_objective
 *   @test_precon
 *   @test_input
 *   @test_expected_result
 *   @test_module
 *   @design_id
 */
TEST_F(OEMCallAppTest, OEMCallApp_OEMCallApp_TC001){
// Please enable and make test code here!!
#if 1
    // Please check source file, make mock files and insert EXPECT_CALL for callee functions.
    OEMCallApp testObj;
    EXPECT_EQ(Bypass, true);
#endif
}


/**
 *   @brief This is a test script for the OEMCallApp_doBootCompleted function
 *   @classID OEMCallApp
 *   @methodID doBootCompleted
 *   @paramList 
 *   @priority P2
 *   @resolution_Method
 *   @test_condition
 *   @test_Coverage_Item
 *   @test_case_ID OEMCallAppTest_doBootCompleted_TC001
 *   @test_type functionality
 *   @test_objective
 *   @test_precon
 *   @test_input
 *   @test_expected_result
 *   @test_module
 *   @design_id
 */
TEST_F(OEMCallAppTest, OEMCallApp_doBootCompleted_TC001){
// Please enable and make test code here!!
#if 1
    // Please check source file, make mock files and insert EXPECT_CALL for callee functions.
    OEMCallApp testObj;
    testObj.isOEMCallCreated_ = true;
    testObj.doBootCompleted();
    EXPECT_EQ(Bypass, true);
#endif
}

/**
 *   @brief This is a test script for the OEMCallApp_doBootCompleted function
 *   @classID OEMCallApp
 *   @methodID doBootCompleted
 *   @paramList 
 *   @priority P2
 *   @resolution_Method
 *   @test_condition
 *   @test_Coverage_Item
 *   @test_case_ID OEMCallAppTest_doBootCompleted_TC002
 *   @test_type functionality
 *   @test_objective
 *   @test_precon
 *   @test_input
 *   @test_expected_result
 *   @test_module
 *   @design_id
 */
TEST_F(OEMCallAppTest, OEMCallApp_doBootCompleted_TC002){
// Please enable and make test code here!!
#if 1
    // Please check source file, make mock files and insert EXPECT_CALL for callee functions.
    OEMCallApp testObj;
    testObj.isOEMCallCreated_ = false;
    EXPECT_CALL(*M_ReceiverManager, init(_)).WillRepeatedly(Return());
    EXPECT_CALL(*M_ProcessorManager, init(_,_)).WillRepeatedly(Return());
    testObj.doBootCompleted();
    EXPECT_EQ(Bypass, true);
#endif
}

/**
 *   @brief This is a test script for the OEMCallApp_doBootCompleted function
 *   @classID OEMCallApp
 *   @methodID doBootCompleted
 *   @paramList 
 *   @priority P2
 *   @resolution_Method
 *   @test_condition
 *   @test_Coverage_Item
 *   @test_case_ID OEMCallAppTest_doBootCompleted_TC003
 *   @test_type functionality
 *   @test_objective
 *   @test_precon
 *   @test_input
 *   @test_expected_result
 *   @test_module
 *   @design_id
 */
TEST_F(OEMCallAppTest, OEMCallApp_doBootCompleted_TC003){
// Please enable and make test code here!!
#if 1
    // Please check source file, make mock files and insert EXPECT_CALL for callee functions.
    OEMCallApp testObj;
    testObj.isOEMCallCreated_ = false;
    EXPECT_CALL(*M_ReceiverManager, init(_)).WillRepeatedly(Return());
    EXPECT_CALL(*M_ProcessorManager, init(_,_)).WillRepeatedly(Return());
    testObj.doBootCompleted();
    EXPECT_EQ(Bypass, true);
#endif
}


/**
 *   @brief This is a test script for the OEMCallApp_doHandleRetryRegisterReceiver function
 *   @classID OEMCallApp
 *   @methodID doHandleRetryRegisterReceiver
 *   @paramList uint32_t who
 *   @priority P2
 *   @resolution_Method
 *   @test_condition
 *   @test_Coverage_Item
 *   @test_case_ID OEMCallAppTest_doHandleRetryRegisterReceiver_TC001
 *   @test_type functionality
 *   @test_objective
 *   @test_precon
 *   @test_input
 *   @test_expected_result
 *   @test_module
 *   @design_id
 */
TEST_F(OEMCallAppTest, OEMCallApp_doHandleRetryRegisterReceiver_TC001){
// Please enable and make test code here!!
#if 1
    // Please check source file, make mock files and insert EXPECT_CALL for callee functions.
    OEMCallApp *testObj = new OEMCallApp();
    testObj->doHandleRetryRegisterReceiver(5000);
    delete testObj;
    EXPECT_EQ(Bypass, true);
#endif
}

/**
 *   @brief This is a test script for the OEMCallApp_doHandleRetryRegisterReceiver function
 *   @classID OEMCallApp
 *   @methodID doHandleRetryRegisterReceiver
 *   @paramList uint32_t who
 *   @priority P2
 *   @resolution_Method
 *   @test_condition
 *   @test_Coverage_Item
 *   @test_case_ID OEMCallAppTest_doHandleRetryRegisterReceiver_TC002
 *   @test_type functionality
 *   @test_objective
 *   @test_precon
 *   @test_input
 *   @test_expected_result
 *   @test_module
 *   @design_id
 */
TEST_F(OEMCallAppTest, OEMCallApp_doHandleRetryRegisterReceiver_TC002){
// Please enable and make test code here!!
#if 1
    // Please check source file, make mock files and insert EXPECT_CALL for callee functions.
    OEMCallApp *testObj = new OEMCallApp();
    testObj->spReceiverManager_ = std::make_shared<ReceiverManager>();
    testObj->doHandleRetryRegisterReceiver(5000);
    EXPECT_EQ(Bypass, true);
#endif
}

/**
 *   @brief This is a test script for the OEMCallApp_runTest function
 *   @classID OEMCallApp
 *   @methodID runTest
 *   @paramList const uint32_t testId
 *   @priority P2
 *   @resolution_Method
 *   @test_condition
 *   @test_Coverage_Item
 *   @test_case_ID OEMCallAppTest_runTest_TC001
 *   @test_type functionality
 *   @test_objective
 *   @test_precon
 *   @test_input
 *   @test_expected_result
 *   @test_module
 *   @design_id
 */
TEST_F(OEMCallAppTest, OEMCallApp_runTest_TC001){
// Please enable and make test code here!!
#if 1
    // Please check source file, make mock files and insert EXPECT_CALL for callee functions.
    OEMCallApp testObj;
    sp<sl::Message> ret_param_0 = sp<sl::Message>(new sl::Message);
    EXPECT_CALL(*M_Handler, obtainMessage_002(_)).WillRepeatedly(Return(ret_param_0));
    testObj.runTest(self::SLDDTestId::ECALL_TRIGGER);
    EXPECT_EQ(Bypass, true);
#endif
}

/**
 *   @brief This is a test script for the OEMCallApp_runTest function
 *   @classID OEMCallApp
 *   @methodID runTest
 *   @paramList const uint32_t testId
 *   @priority P2
 *   @resolution_Method
 *   @test_condition
 *   @test_Coverage_Item
 *   @test_case_ID OEMCallAppTest_runTest_TC002
 *   @test_type functionality
 *   @test_objective
 *   @test_precon
 *   @test_input
 *   @test_expected_result
 *   @test_module
 *   @design_id
 */
TEST_F(OEMCallAppTest, OEMCallApp_runTest_TC002){
// Please enable and make test code here!!
#if 1
    // Please check source file, make mock files and insert EXPECT_CALL for callee functions.
    OEMCallApp testObj;
    sp<sl::Message> ret_param_0 = sp<sl::Message>(new sl::Message);
    EXPECT_CALL(*M_Handler, obtainMessage_002(_)).WillRepeatedly(Return(ret_param_0));
    testObj.runTest(self::SLDDTestId::ACN_TRIGGER);
    EXPECT_EQ(Bypass, true);
#endif
}

/**
 *   @brief This is a test script for the OEMCallApp_runTest function
 *   @classID OEMCallApp
 *   @methodID runTest
 *   @paramList const uint32_t testId
 *   @priority P2
 *   @resolution_Method
 *   @test_condition
 *   @test_Coverage_Item
 *   @test_case_ID OEMCallAppTest_runTest_TC003
 *   @test_type functionality
 *   @test_objective
 *   @test_precon
 *   @test_input
 *   @test_expected_result
 *   @test_module
 *   @design_id
 */
TEST_F(OEMCallAppTest, OEMCallApp_runTest_TC003){
// Please enable and make test code here!!
#if 1
    // Please check source file, make mock files and insert EXPECT_CALL for callee functions.
    OEMCallApp testObj;
    sp<sl::Message> ret_param_0 = sp<sl::Message>(new sl::Message);
    EXPECT_CALL(*M_Handler, obtainMessage_002(_)).WillRepeatedly(Return(ret_param_0));
    testObj.runTest(self::SLDDTestId::RCALL_TRIGGER);
    EXPECT_EQ(Bypass, true);
#endif
}

/**
 *   @brief This is a test script for the OEMCallApp_runTest function
 *   @classID OEMCallApp
 *   @methodID runTest
 *   @paramList const uint32_t testId
 *   @priority P2
 *   @resolution_Method
 *   @test_condition
 *   @test_Coverage_Item
 *   @test_case_ID OEMCallAppTest_runTest_TC004
 *   @test_type functionality
 *   @test_objective
 *   @test_precon
 *   @test_input
 *   @test_expected_result
 *   @test_module
 *   @design_id
 */
TEST_F(OEMCallAppTest, OEMCallApp_runTest_TC004){
// Please enable and make test code here!!
#if 1
    // Please check source file, make mock files and insert EXPECT_CALL for callee functions.
    OEMCallApp testObj;
    sp<sl::Message> ret_param_0 = sp<sl::Message>(new sl::Message);
    EXPECT_CALL(*M_Handler, obtainMessage_002(_)).WillRepeatedly(Return(ret_param_0));
    testObj.runTest(self::SLDDTestId::ACN_LIGHT_TRIGGER);
    EXPECT_EQ(Bypass, true);
#endif
}

/**
 *   @brief This is a test script for the OEMCallApp_runTest function
 *   @classID OEMCallApp
 *   @methodID runTest
 *   @paramList const uint32_t testId
 *   @priority P2
 *   @resolution_Method
 *   @test_condition
 *   @test_Coverage_Item
 *   @test_case_ID OEMCallAppTest_runTest_TC005
 *   @test_type functionality
 *   @test_objective
 *   @test_precon
 *   @test_input
 *   @test_expected_result
 *   @test_module
 *   @design_id
 */
TEST_F(OEMCallAppTest, OEMCallApp_runTest_TC005){
// Please enable and make test code here!!
#if 1
    // Please check source file, make mock files and insert EXPECT_CALL for callee functions.
    OEMCallApp testObj;
    sp<sl::Message> ret_param_0 = sp<sl::Message>(new sl::Message);
    EXPECT_CALL(*M_Handler, obtainMessage_002(_)).WillRepeatedly(Return(ret_param_0));
    testObj.runTest(self::SLDDTestId::ACN_WITH_PHONE_TRIGGER);
    EXPECT_EQ(Bypass, true);
#endif
}

/**
 *   @brief This is a test script for the OEMCallApp_runTest function
 *   @classID OEMCallApp
 *   @methodID runTest
 *   @paramList const uint32_t testId
 *   @priority P2
 *   @resolution_Method
 *   @test_condition
 *   @test_Coverage_Item
 *   @test_case_ID OEMCallAppTest_runTest_TC006
 *   @test_type functionality
 *   @test_objective
 *   @test_precon
 *   @test_input
 *   @test_expected_result
 *   @test_module
 *   @design_id
 */
TEST_F(OEMCallAppTest, OEMCallApp_runTest_TC006){
// Please enable and make test code here!!
#if 1
    // Please check source file, make mock files and insert EXPECT_CALL for callee functions.
    OEMCallApp testObj;
    sp<sl::Message> ret_param_0 = sp<sl::Message>(new sl::Message);
    EXPECT_CALL(*M_Handler, obtainMessage_002(_)).WillRepeatedly(Return(ret_param_0));
    testObj.runTest(self::SLDDTestId::LONG_PRESS_SIGNAL);
    EXPECT_EQ(Bypass, true);
#endif
}

/**
 *   @brief This is a test script for the OEMCallApp_runTest function
 *   @classID OEMCallApp
 *   @methodID runTest
 *   @paramList const uint32_t testId
 *   @priority P2
 *   @resolution_Method
 *   @test_condition
 *   @test_Coverage_Item
 *   @test_case_ID OEMCallAppTest_runTest_TC007
 *   @test_type functionality
 *   @test_objective
 *   @test_precon
 *   @test_input
 *   @test_expected_result
 *   @test_module
 *   @design_id
 */
TEST_F(OEMCallAppTest, OEMCallApp_runTest_TC007){
// Please enable and make test code here!!
#if 1
    // Please check source file, make mock files and insert EXPECT_CALL for callee functions.
    OEMCallApp testObj;
    sp<sl::Message> ret_param_0 = sp<sl::Message>(new sl::Message);
    EXPECT_CALL(*M_Handler, obtainMessage_002(_)).WillRepeatedly(Return(ret_param_0));
    testObj.runTest(self::SLDDTestId::TEAR_DOWN);
    EXPECT_EQ(Bypass, true);
#endif
}

/**
 *   @brief This is a test script for the OEMCallApp_runTest function
 *   @classID OEMCallApp
 *   @methodID runTest
 *   @paramList const uint32_t testId
 *   @priority P2
 *   @resolution_Method
 *   @test_condition
 *   @test_Coverage_Item
 *   @test_case_ID OEMCallAppTest_runTest_TC008
 *   @test_type functionality
 *   @test_objective
 *   @test_precon
 *   @test_input
 *   @test_expected_result
 *   @test_module
 *   @design_id
 */
TEST_F(OEMCallAppTest, OEMCallApp_runTest_TC008){
// Please enable and make test code here!!
#if 1
    // Please check source file, make mock files and insert EXPECT_CALL for callee functions.
    OEMCallApp testObj;
    sp<sl::Message> ret_param_0 = sp<sl::Message>(new sl::Message);
    EXPECT_CALL(*M_Handler, obtainMessage_008(_,_)).WillRepeatedly(Return(ret_param_0));
    testObj.runTest(self::SLDDTestId::SOMEIP_RCALL_TRIGER);
    EXPECT_EQ(Bypass, true);
#endif
}



/**
 *   @brief This is a test script for the OEMCallApp_runTest function
 *   @classID OEMCallApp
 *   @methodID runTest
 *   @paramList const uint32_t testId
 *   @priority P2
 *   @resolution_Method
 *   @test_condition
 *   @test_Coverage_Item
 *   @test_case_ID OEMCallAppTest_runTest_TC009
 *   @test_type functionality
 *   @test_objective
 *   @test_precon
 *   @test_input
 *   @test_expected_result
 *   @test_module
 *   @design_id
 */
TEST_F(OEMCallAppTest, OEMCallApp_runTest_TC009){
// Please enable and make test code here!!
#if 1
    // Please check source file, make mock files and insert EXPECT_CALL for callee functions.
    OEMCallApp testObj;
    sp<sl::Message> ret_param_0 = sp<sl::Message>(new sl::Message);
    EXPECT_CALL(*M_Handler, obtainMessage_002(_)).WillRepeatedly(Return(ret_param_0));
    testObj.runTest(self::SLDDTestId::FRONT_REC_CAN_CDS_TEST);
    EXPECT_EQ(Bypass, true);
#endif
}


/**
 *   @brief This is a test script for the OEMCallApp_runTest function
 *   @classID OEMCallApp
 *   @methodID runTest
 *   @paramList const uint32_t testId
 *   @priority P2
 *   @resolution_Method
 *   @test_condition
 *   @test_Coverage_Item
 *   @test_case_ID OEMCallAppTest_runTest_TC010
 *   @test_type functionality
 *   @test_objective
 *   @test_precon
 *   @test_input
 *   @test_expected_result
 *   @test_module
 *   @design_id
 */
TEST_F(OEMCallAppTest, OEMCallApp_runTest_TC010){
// Please enable and make test code here!!
#if 1
    // Please check source file, make mock files and insert EXPECT_CALL for callee functions.
    OEMCallApp testObj;
    sp<sl::Message> ret_param_0 = sp<sl::Message>(new sl::Message);
    EXPECT_CALL(*M_Handler, obtainMessage_002(_)).WillRepeatedly(Return(ret_param_0));
    testObj.runTest(self::SLDDTestId::SIDE_REC_CAN_CDS_TEST);
    EXPECT_EQ(Bypass, true);
#endif
}


/**
 *   @brief This is a test script for the OEMCallApp_runTest function
 *   @classID OEMCallApp
 *   @methodID runTest
 *   @paramList const uint32_t testId
 *   @priority P2
 *   @resolution_Method
 *   @test_condition
 *   @test_Coverage_Item
 *   @test_case_ID OEMCallAppTest_runTest_TC011
 *   @test_type functionality
 *   @test_objective
 *   @test_precon
 *   @test_input
 *   @test_expected_result
 *   @test_module
 *   @design_id
 */
TEST_F(OEMCallAppTest, OEMCallApp_runTest_TC011){
// Please enable and make test code here!!
#if 1
    // Please check source file, make mock files and insert EXPECT_CALL for callee functions.
    OEMCallApp testObj;
    sp<sl::Message> ret_param_0 = sp<sl::Message>(new sl::Message);
    EXPECT_CALL(*M_Handler, obtainMessage_002(_)).WillRepeatedly(Return(ret_param_0));
    testObj.runTest(self::SLDDTestId::REAR_REC_CAN_CDS_TEST);
    EXPECT_EQ(Bypass, true);
#endif
}



/**
 *   @brief This is a test script for the OEMCallApp_runTest function
 *   @classID OEMCallApp
 *   @methodID runTest
 *   @paramList const uint32_t testId
 *   @priority P2
 *   @resolution_Method
 *   @test_condition
 *   @test_Coverage_Item
 *   @test_case_ID OEMCallAppTest_runTest_TC012
 *   @test_type functionality
 *   @test_objective
 *   @test_precon
 *   @test_input
 *   @test_expected_result
 *   @test_module
 *   @design_id
 */
TEST_F(OEMCallAppTest, OEMCallApp_runTest_TC012){
// Please enable and make test code here!!
#if 1
    // Please check source file, make mock files and insert EXPECT_CALL for callee functions.
    OEMCallApp testObj;
    sp<sl::Message> ret_param_0 = sp<sl::Message>(new sl::Message);
    EXPECT_CALL(*M_Handler, obtainMessage_002(_)).WillRepeatedly(Return(ret_param_0));
    testObj.runTest(self::SLDDTestId::ROLLOVER_REC_CAN_CDS_TEST);
    EXPECT_EQ(Bypass, true);
#endif
}


/**
 *   @brief This is a test script for the OEMCallApp_runTest function
 *   @classID OEMCallApp
 *   @methodID runTest
 *   @paramList const uint32_t testId
 *   @priority P2
 *   @resolution_Method
 *   @test_condition
 *   @test_Coverage_Item
 *   @test_case_ID OEMCallAppTest_runTest_TC013
 *   @test_type functionality
 *   @test_objective
 *   @test_precon
 *   @test_input
 *   @test_expected_result
 *   @test_module
 *   @design_id
 */
TEST_F(OEMCallAppTest, OEMCallApp_runTest_TC013){
// Please enable and make test code here!!
#if 1
    // Please check source file, make mock files and insert EXPECT_CALL for callee functions.
    OEMCallApp testObj;
    sp<sl::Message> ret_param_0 = sp<sl::Message>(new sl::Message);
    EXPECT_CALL(*M_Handler, obtainMessage_002(_)).WillRepeatedly(Return(ret_param_0));
    testObj.runTest(self::SLDDTestId::ECALL_STATUS_ACK_0_TEST);
    EXPECT_EQ(Bypass, true);
#endif
}


/**
 *   @brief This is a test script for the OEMCallApp_runTest function
 *   @classID OEMCallApp
 *   @methodID runTest
 *   @paramList const uint32_t testId
 *   @priority P2
 *   @resolution_Method
 *   @test_condition
 *   @test_Coverage_Item
 *   @test_case_ID OEMCallAppTest_runTest_TC014
 *   @test_type functionality
 *   @test_objective
 *   @test_precon
 *   @test_input
 *   @test_expected_result
 *   @test_module
 *   @design_id
 */
TEST_F(OEMCallAppTest, OEMCallApp_runTest_TC014){
// Please enable and make test code here!!
#if 1
    // Please check source file, make mock files and insert EXPECT_CALL for callee functions.
    OEMCallApp testObj;
    sp<sl::Message> ret_param_0 = sp<sl::Message>(new sl::Message);
    EXPECT_CALL(*M_Handler, obtainMessage_002(_)).WillRepeatedly(Return(ret_param_0));
    testObj.runTest(self::SLDDTestId::ECALL_STATUS_ACK_1_TEST);
    EXPECT_EQ(Bypass, true);
#endif
}


/**
 *   @brief This is a test script for the OEMCallApp_runTest function
 *   @classID OEMCallApp
 *   @methodID runTest
 *   @paramList const uint32_t testId
 *   @priority P2
 *   @resolution_Method
 *   @test_condition
 *   @test_Coverage_Item
 *   @test_case_ID OEMCallAppTest_runTest_TC015
 *   @test_type functionality
 *   @test_objective
 *   @test_precon
 *   @test_input
 *   @test_expected_result
 *   @test_module
 *   @design_id
 */
TEST_F(OEMCallAppTest, OEMCallApp_runTest_TC015){
// Please enable and make test code here!!
#if 1
    // Please check source file, make mock files and insert EXPECT_CALL for callee functions.
    OEMCallApp testObj;
    sp<sl::Message> ret_param_0 = sp<sl::Message>(new sl::Message);
    EXPECT_CALL(*M_Handler, obtainMessage_002(_)).WillRepeatedly(Return(ret_param_0));
    testObj.runTest(self::SLDDTestId::ECALL_STATUS_ACK_2_TEST);
    EXPECT_EQ(Bypass, true);
#endif
}


/**
 *   @brief This is a test script for the OEMCallApp_runTest function
 *   @classID OEMCallApp
 *   @methodID runTest
 *   @paramList const uint32_t testId
 *   @priority P2
 *   @resolution_Method
 *   @test_condition
 *   @test_Coverage_Item
 *   @test_case_ID OEMCallAppTest_runTest_TC016
 *   @test_type functionality
 *   @test_objective
 *   @test_precon
 *   @test_input
 *   @test_expected_result
 *   @test_module
 *   @design_id
 */
TEST_F(OEMCallAppTest, OEMCallApp_runTest_TC016){
// Please enable and make test code here!!
#if 1
    // Please check source file, make mock files and insert EXPECT_CALL for callee functions.
    OEMCallApp testObj;
    sp<sl::Message> ret_param_0 = sp<sl::Message>(new sl::Message);
    EXPECT_CALL(*M_Handler, obtainMessage_002(_)).WillRepeatedly(Return(ret_param_0));
    testObj.runTest(self::SLDDTestId::MESS_STATUS_REQUEST_0_TEST);
    EXPECT_EQ(Bypass, true);
#endif
}

/**
 *   @brief This is a test script for the OEMCallApp_runTest function
 *   @classID OEMCallApp
 *   @methodID runTest
 *   @paramList const uint32_t testId
 *   @priority P2
 *   @resolution_Method
 *   @test_condition
 *   @test_Coverage_Item
 *   @test_case_ID OEMCallAppTest_runTest_TC017
 *   @test_type functionality
 *   @test_objective
 *   @test_precon
 *   @test_input
 *   @test_expected_result
 *   @test_module
 *   @design_id
 */
TEST_F(OEMCallAppTest, OEMCallApp_runTest_TC017){
// Please enable and make test code here!!
#if 1
    // Please check source file, make mock files and insert EXPECT_CALL for callee functions.
    OEMCallApp testObj;
    sp<sl::Message> ret_param_0 = sp<sl::Message>(new sl::Message);
    EXPECT_CALL(*M_Handler, obtainMessage_002(_)).WillRepeatedly(Return(ret_param_0));
    testObj.runTest(self::SLDDTestId::MESS_STATUS_REQUEST_1_TEST);
    EXPECT_EQ(Bypass, true);
#endif
}

/**
 *   @brief This is a test script for the OEMCallApp_runTest function
 *   @classID OEMCallApp
 *   @methodID runTest
 *   @paramList const uint32_t testId
 *   @priority P2
 *   @resolution_Method
 *   @test_condition
 *   @test_Coverage_Item
 *   @test_case_ID OEMCallAppTest_runTest_TC018
 *   @test_type functionality
 *   @test_objective
 *   @test_precon
 *   @test_input
 *   @test_expected_result
 *   @test_module
 *   @design_id
 */
TEST_F(OEMCallAppTest, OEMCallApp_runTest_TC018){
// Please enable and make test code here!!
#if 1
    // Please check source file, make mock files and insert EXPECT_CALL for callee functions.
    OEMCallApp testObj;
    sp<sl::Message> ret_param_0 = sp<sl::Message>(new sl::Message);
    EXPECT_CALL(*M_Handler, obtainMessage_002(_)).WillRepeatedly(Return(ret_param_0));
    testObj.runTest(self::SLDDTestId::MESS_STATUS_REQUEST_2_TEST);
    EXPECT_EQ(Bypass, true);
#endif
}


/**
 *   @brief This is a test script for the OEMCallApp_onCreate function
 *   @classID OEMCallApp
 *   @methodID onCreate
 *   @paramList 
 *   @priority P2
 *   @resolution_Method
 *   @test_condition
 *   @test_Coverage_Item
 *   @test_case_ID OEMCallAppTest_onCreate_TC001
 *   @test_type functionality
 *   @test_objective
 *   @test_precon
 *   @test_input
 *   @test_expected_result
 *   @test_module
 *   @design_id
 */
TEST_F(OEMCallAppTest, OEMCallApp_onCreate_TC001){
// Please enable and make test code here!!
#if 1
    // Please check source file, make mock files and insert EXPECT_CALL for callee functions.
    OEMCallApp testObj;
    EXPECT_CALL(*M_IServiceManager, getService(_)).WillRepeatedly(Return(nullptr));;
    testObj.onCreate();
    EXPECT_EQ(Bypass, true);
#endif
}

/**
 *   @brief This is a test script for the OEMCallApp_onCreate function
 *   @classID OEMCallApp
 *   @methodID onCreate
 *   @paramList 
 *   @priority P2
 *   @resolution_Method
 *   @test_condition
 *   @test_Coverage_Item
 *   @test_case_ID OEMCallAppTest_onCreate_TC002
 *   @test_type functionality
 *   @test_objective
 *   @test_precon
 *   @test_input
 *   @test_expected_result
 *   @test_module
 *   @design_id
 */
TEST_F(OEMCallAppTest, OEMCallApp_onCreate_TC002){
// Please enable and make test code here!!
#if 1
    // Please check source file, make mock files and insert EXPECT_CALL for callee functions.
    OEMCallApp *testObj = new OEMCallApp();
    //testObj->spAppManager_ = android::interface_cast<IApplicationManagerService>(android::defaultServiceManager()->getService(android::String16("service_layer.ApplicationManagerService")));
    //ITest_ServiceManager *ret1 = new ITest_ServiceManager();
    //EXPECT_CALL(*M_IServiceManager, defaultServiceManager()).WillRepeatedly(Return(ret1));
    AppManager *pAppManager = new AppManager();
    EXPECT_CALL(*M_IServiceManager, getService(_)).Times(1).WillOnce(Return(pAppManager));
    sp<sl::Message> ret_param_1 = sp<sl::Message>(new sl::Message);
    EXPECT_CALL(*M_Handler, obtainMessage_002(_)).WillRepeatedly(Return(ret_param_1));
    bool ret_param_0 = false;
    EXPECT_CALL(*M_AppManager, getBootCompleted(_)).Times(1).WillOnce(Return(false));
    error_t ret_param_2 = E_OK;
    EXPECT_CALL(*M_AppManager, registerSystemPostReceiver(_,_)).WillRepeatedly(Return(ret_param_2));
    testObj->onCreate();
    EXPECT_EQ(Bypass, true);
#endif
}

/**
 *   @brief This is a test script for the OEMCallApp_onCreate function
 *   @classID OEMCallApp
 *   @methodID onCreate
 *   @paramList 
 *   @priority P2
 *   @resolution_Method
 *   @test_condition
 *   @test_Coverage_Item
 *   @test_case_ID OEMCallAppTest_onCreate_TC003
 *   @test_type functionality
 *   @test_objective
 *   @test_precon
 *   @test_input
 *   @test_expected_result
 *   @test_module
 *   @design_id
 */
TEST_F(OEMCallAppTest, OEMCallApp_onCreate_TC003){
// Please enable and make test code here!!
#if 1
    // Please check source file, make mock files and insert EXPECT_CALL for callee functions.
    OEMCallApp *testObj = new OEMCallApp();
    AppManager *pAppManager = new AppManager();
    EXPECT_CALL(*M_IServiceManager, getService(_)).Times(1).WillOnce(Return(pAppManager));
    sp<sl::Message> ret_param_1 = sp<sl::Message>(new sl::Message);
    EXPECT_CALL(*M_Handler, obtainMessage_002(_)).WillRepeatedly(Return(ret_param_1));
    EXPECT_CALL(*M_AppManager, getBootCompleted(_)).Times(1).WillOnce(Return(true));
    error_t ret_param_2 = E_OK;
    EXPECT_CALL(*M_AppManager, registerSystemPostReceiver(_,_)).WillRepeatedly(Return(ret_param_2));
    testObj->onCreate();
    EXPECT_EQ(Bypass, true);
#endif
}

/**
 *   @brief This is a test script for the OEMCallApp_onCreate function
 *   @classID OEMCallApp
 *   @methodID onCreate
 *   @paramList 
 *   @priority P2
 *   @resolution_Method
 *   @test_condition
 *   @test_Coverage_Item
 *   @test_case_ID OEMCallAppTest_onCreate_TC004
 *   @test_type functionality
 *   @test_objective
 *   @test_precon
 *   @test_input
 *   @test_expected_result
 *   @test_module
 *   @design_id
 */
TEST_F(OEMCallAppTest, OEMCallApp_onCreate_TC004){
// Please enable and make test code here!!
#if 1
    // Please check source file, make mock files and insert EXPECT_CALL for callee functions.
    OEMCallApp *testObj = new OEMCallApp();
    MockOEMCallAppIF& app_ = *M_OEMCallAppIF;
    android::sp<sl::SLLooper> spLooper = sl::SLLooper::myLooper();
    android::sp<OemCallHandler> spHandler = new OemCallHandler(spLooper, app_);
    testObj->spHandler_ = spHandler;
    AppManager *pAppManager = new AppManager();
    EXPECT_CALL(*M_IServiceManager, getService(_)).Times(1).WillOnce(Return(pAppManager));
    sp<sl::Message> ret_param_1 = sp<sl::Message>(new sl::Message);
    EXPECT_CALL(*M_Handler, obtainMessage_002(_)).WillRepeatedly(Return(ret_param_1));
    EXPECT_CALL(*M_AppManager, getBootCompleted(_)).Times(1).WillOnce(Return(true));
    error_t ret_param_2 = E_OK;
    EXPECT_CALL(*M_AppManager, registerSystemPostReceiver(_,_)).WillRepeatedly(Return(ret_param_2));
    testObj->onCreate();
    EXPECT_EQ(Bypass, true);
#endif
}

/**
 *   @brief This is a test script for the OEMCallApp_onDestroy function
 *   @classID OEMCallApp
 *   @methodID onDestroy
 *   @paramList 
 *   @priority P2
 *   @resolution_Method
 *   @test_condition
 *   @test_Coverage_Item
 *   @test_case_ID OEMCallAppTest_onDestroy_TC001
 *   @test_type functionality
 *   @test_objective
 *   @test_precon
 *   @test_input
 *   @test_expected_result
 *   @test_module
 *   @design_id
 */
TEST_F(OEMCallAppTest, OEMCallApp_onDestroy_TC001){
// Please enable and make test code here!!
#if 1
    // Please check source file, make mock files and insert EXPECT_CALL for callee functions.
    OEMCallApp testObj;
    testObj.onDestroy();
    EXPECT_EQ(Bypass, true);
#endif
}


/**
 *   @brief This is a test script for the OEMCallApp_onDestroy function
 *   @classID OEMCallApp
 *   @methodID onDestroy
 *   @paramList 
 *   @priority P2
 *   @resolution_Method
 *   @test_condition
 *   @test_Coverage_Item
 *   @test_case_ID OEMCallAppTest_onDestroy_TC002
 *   @test_type functionality
 *   @test_objective
 *   @test_precon
 *   @test_input
 *   @test_expected_result
 *   @test_module
 *   @design_id
 */
TEST_F(OEMCallAppTest, OEMCallApp_onDestroy_TC002){
// Please enable and make test code here!!
#if 1
    // Please check source file, make mock files and insert EXPECT_CALL for callee functions.
    OEMCallApp testObj;
    testObj.spReceiverManager_ = std::make_shared<ReceiverManager>();
    testObj.spAdapters_ = std::make_shared<AdapterLocator>(nullptr);
    testObj.upProcessorManager_ = std::make_unique<ProcessorManager>();
    testObj.onDestroy();
    EXPECT_EQ(Bypass, true);
#endif
}

/**
 *   @brief This is a test script for the OEMCallApp_onDestroy function
 *   @classID OEMCallApp
 *   @methodID onDestroy
 *   @paramList 
 *   @priority P2
 *   @resolution_Method
 *   @test_condition
 *   @test_Coverage_Item
 *   @test_case_ID OEMCallAppTest_onDestroy_TC003
 *   @test_type functionality
 *   @test_objective
 *   @test_precon
 *   @test_input
 *   @test_expected_result
 *   @test_module
 *   @design_id
 */
TEST_F(OEMCallAppTest, OEMCallApp_onDestroy_TC003){
// Please enable and make test code here!!
#if 1
    // Please check source file, make mock files and insert EXPECT_CALL for callee functions.
    OEMCallApp testObj;
    testObj.spReceiverManager_ = std::make_shared<ReceiverManager>();
    testObj.spAdapters_ = std::make_shared<AdapterLocator>(nullptr);
    testObj.upProcessorManager_ = std::make_unique<ProcessorManager>();
    testObj.onDestroy();
    EXPECT_EQ(Bypass, true);
#endif
}

/**
 *   @brief This is a test script for the OEMCallApp_onPostReceived function
 *   @classID OEMCallApp
 *   @methodID onPostReceived
 *   @paramList const sp<Post>& post
 *   @priority P2
 *   @resolution_Method
 *   @test_condition
 *   @test_Coverage_Item
 *   @test_case_ID OEMCallAppTest_onPostReceived_TC001
 *   @test_type functionality
 *   @test_objective
 *   @test_precon
 *   @test_input
 *   @test_expected_result
 *   @test_module
 *   @design_id
 */
TEST_F(OEMCallAppTest, OEMCallApp_onPostReceived_TC001){
// Please enable and make test code here!!
#if 1
    // Please check source file, make mock files and insert EXPECT_CALL for callee functions.
    OEMCallApp testObj;
    sp<Post> post = new Post();
    post->what = SYS_POST_BOOT_COMPLETED;
    testObj.isOEMCallCreated_ = false;
    sp<sl::Message> ret_param_0 = sp<sl::Message>(new sl::Message);
    EXPECT_CALL(*M_Handler, obtainMessage_002(_)).WillRepeatedly(Return(ret_param_0));
    testObj.onPostReceived(post);
    EXPECT_EQ(Bypass, true);
#endif
}

/**
 *   @brief This is a test script for the OEMCallApp_onPostReceived function
 *   @classID OEMCallApp
 *   @methodID onPostReceived
 *   @paramList const sp<Post>& post
 *   @priority P2
 *   @resolution_Method
 *   @test_condition
 *   @test_Coverage_Item
 *   @test_case_ID OEMCallAppTest_onPostReceived_TC005
 *   @test_type functionality
 *   @test_objective
 *   @test_precon
 *   @test_input
 *   @test_expected_result
 *   @test_module
 *   @design_id
 */
TEST_F(OEMCallAppTest, OEMCallApp_onPostReceived_TC005){
// Please enable and make test code here!!
#if 1
    // Please check source file, make mock files and insert EXPECT_CALL for callee functions.
    OEMCallApp testObj;
    sp<Post> post = new Post();
    post->what = SYS_POST_BOOT_COMPLETED;
    testObj.isOEMCallCreated_ = true;
    sp<sl::Message> ret_param_0 = sp<sl::Message>(new sl::Message);
    EXPECT_CALL(*M_Handler, obtainMessage_002(_)).WillRepeatedly(Return(ret_param_0));
    testObj.onPostReceived(post);
    EXPECT_EQ(Bypass, true);
#endif
}

/**
 *   @brief This is a test script for the OEMCallApp_onPostReceived function
 *   @classID OEMCallApp
 *   @methodID onPostReceived
 *   @paramList const sp<Post>& post
 *   @priority P2
 *   @resolution_Method
 *   @test_condition
 *   @test_Coverage_Item
 *   @test_case_ID OEMCallAppTest_onPostReceived_TC002
 *   @test_type functionality
 *   @test_objective
 *   @test_precon
 *   @test_input
 *   @test_expected_result
 *   @test_module
 *   @design_id
 */
TEST_F(OEMCallAppTest, OEMCallApp_onPostReceived_TC002){
// Please enable and make test code here!!
#if 1
    // Please check source file, make mock files and insert EXPECT_CALL for callee functions.
    OEMCallApp testObj;
    sp<Post> post = new Post();
    post->what = SYS_POST_FEATURE_STATUS_CHANGED;
    testObj.isOEMCallCreated_ = true;
    sp<sl::Message> ret_param_0 = sp<sl::Message>(new sl::Message);
    EXPECT_CALL(*M_Handler, obtainMessage_008(_,_)).WillRepeatedly(Return(ret_param_0));
    testObj.onPostReceived(post);
    EXPECT_EQ(Bypass, true);
#endif
}

/**
 *   @brief This is a test script for the OEMCallApp_onPostReceived function
 *   @classID OEMCallApp
 *   @methodID onPostReceived
 *   @paramList const sp<Post>& post
 *   @priority P2
 *   @resolution_Method
 *   @test_condition
 *   @test_Coverage_Item
 *   @test_case_ID OEMCallAppTest_onPostReceived_TC006
 *   @test_type functionality
 *   @test_objective
 *   @test_precon
 *   @test_input
 *   @test_expected_result
 *   @test_module
 *   @design_id
 */
TEST_F(OEMCallAppTest, OEMCallApp_onPostReceived_TC006){
// Please enable and make test code here!!
#if 1
    // Please check source file, make mock files and insert EXPECT_CALL for callee functions.
    OEMCallApp testObj;
    sp<Post> post = new Post();
    post->what = SYS_POST_FEATURE_STATUS_CHANGED;
    testObj.isOEMCallCreated_ = false;
    sp<sl::Message> ret_param_0 = sp<sl::Message>(new sl::Message);
    EXPECT_CALL(*M_Handler, obtainMessage_008(_,_)).WillRepeatedly(Return(ret_param_0));
    testObj.onPostReceived(post);
    EXPECT_EQ(Bypass, true);
#endif
}

/**
 *   @brief This is a test script for the OEMCallApp_onPostReceived function
 *   @classID OEMCallApp
 *   @methodID onPostReceived
 *   @paramList const sp<Post>& post
 *   @priority P2
 *   @resolution_Method
 *   @test_condition
 *   @test_Coverage_Item
 *   @test_case_ID OEMCallAppTest_onPostReceived_TC003
 *   @test_type functionality
 *   @test_objective
 *   @test_precon
 *   @test_input
 *   @test_expected_result
 *   @test_module
 *   @design_id
 */
TEST_F(OEMCallAppTest, OEMCallApp_onPostReceived_TC003){
// Please enable and make test code here!!
#if 1
    // Please check source file, make mock files and insert EXPECT_CALL for callee functions.
    OEMCallApp testObj;
    sp<Post> post = new Post();
    post->what = SYS_POST_FEATURE_ACTION_DELIVERED;
    testObj.isOEMCallCreated_ = true;
    sp<sl::Message> ret_param_0 = sp<sl::Message>(new sl::Message);
    EXPECT_CALL(*M_Handler, obtainMessage_008(_,_)).WillRepeatedly(Return(ret_param_0));
    testObj.onPostReceived(post);
    EXPECT_EQ(Bypass, true);
#endif
}

/**
 *   @brief This is a test script for the OEMCallApp_onPostReceived function
 *   @classID OEMCallApp
 *   @methodID onPostReceived
 *   @paramList const sp<Post>& post
 *   @priority P2
 *   @resolution_Method
 *   @test_condition
 *   @test_Coverage_Item
 *   @test_case_ID OEMCallAppTest_onPostReceived_TC004
 *   @test_type functionality
 *   @test_objective
 *   @test_precon
 *   @test_input
 *   @test_expected_result
 *   @test_module
 *   @design_id
 */
TEST_F(OEMCallAppTest, OEMCallApp_onPostReceived_TC004){
// Please enable and make test code here!!
#if 1
    // Please check source file, make mock files and insert EXPECT_CALL for callee functions.
    OEMCallApp testObj;
    sp<Post> post = new Post();
    post->what = 8000;
    testObj.isOEMCallCreated_ = true;
    testObj.onPostReceived(post);
    EXPECT_EQ(Bypass, true);
#endif
}

/**
 *   @brief This is a test script for the OEMCallApp_onFeatureStatusChanged function
 *   @classID OEMCallApp
 *   @methodID onFeatureStatusChanged
 *   @paramList const std::string feature, const FeatureStatus status
 *   @priority P2
 *   @resolution_Method
 *   @test_condition
 *   @test_Coverage_Item
 *   @test_case_ID OEMCallAppTest_onFeatureStatusChanged_TC001
 *   @test_type functionality
 *   @test_objective
 *   @test_precon
 *   @test_input
 *   @test_expected_result
 *   @test_module
 *   @design_id
 */
TEST_F(OEMCallAppTest, OEMCallApp_onFeatureStatusChanged_TC001){
// Please enable and make test code here!!
#if 1
    // Please check source file, make mock files and insert EXPECT_CALL for callee functions.
    OEMCallApp testObj;
    auto ret = testObj.onFeatureStatusChanged("rcall-japan",FeatureStatus::ON);
    EXPECT_EQ(ret, 0);
#endif
}

/**
 *   @brief This is a test script for the OEMCallApp_onFeatureStatusChanged function
 *   @classID OEMCallApp
 *   @methodID onFeatureStatusChanged
 *   @paramList const std::string feature, const FeatureStatus status
 *   @priority P2
 *   @resolution_Method
 *   @test_condition
 *   @test_Coverage_Item
 *   @test_case_ID OEMCallAppTest_onFeatureStatusChanged_TC002
 *   @test_type functionality
 *   @test_objective
 *   @test_precon
 *   @test_input
 *   @test_expected_result
 *   @test_module
 *   @design_id
 */
TEST_F(OEMCallAppTest, OEMCallApp_onFeatureStatusChanged_TC002){
// Please enable and make test code here!!
#if 1
    // Please check source file, make mock files and insert EXPECT_CALL for callee functions.
    OEMCallApp testObj;
    auto ret = testObj.onFeatureStatusChanged("rcall-japan",FeatureStatus::ON);
    EXPECT_EQ(ret, 0);
#endif
}

/**
 *   @brief This is a test script for the OEMCallApp_onFeatureStatusChanged function
 *   @classID OEMCallApp
 *   @methodID onFeatureStatusChanged
 *   @paramList const std::string feature, const FeatureStatus status
 *   @priority P2
 *   @resolution_Method
 *   @test_condition
 *   @test_Coverage_Item
 *   @test_case_ID OEMCallAppTest_onFeatureStatusChanged_TC003
 *   @test_type functionality
 *   @test_objective
 *   @test_precon
 *   @test_input
 *   @test_expected_result
 *   @test_module
 *   @design_id
 */
TEST_F(OEMCallAppTest, OEMCallApp_onFeatureStatusChanged_TC003){
    OEMCallApp testObj;
    auto ret = testObj.onFeatureStatusChanged("rcall-japan",FeatureStatus::ON);
    EXPECT_EQ(ret, 0);
}

/**
 *   @brief This is a test script for the OEMCallApp_isProcessorNullPtrfunction
 *   @classID OEMCallApp
 *   @methodID isProcessorNullPtr
 *   @paramList const std::string feature, const FeatureStatus status
 *   @priority P2
 *   @resolution_Method
 *   @test_condition
 *   @test_Coverage_Item
 *   @test_case_ID OEMCallAppTest_isProcessorNullPtr_TC003
 *   @test_type functionality
 *   @test_objective
 *   @test_precon
 *   @test_input
 *   @test_expected_result
 *   @test_module
 *   @design_id
 */
TEST_F(OEMCallAppTest, OEMCallApp_isProcessorNullPtr_TC003){
    OEMCallApp testObj;
    testObj.upProcessorManager_ = std::make_unique<ProcessorManager>();
    EXPECT_FALSE( testObj.isProcessorNullPtr());
}

/**
 *   @brief This is a test script for the OEMCallApp_onFeatureActionDeliveredfunction
 *   @classID OEMCallApp
 *   @methodID onFeatureActionDelivered
 *   @paramList const std::string feature, const FeatureStatus status
 *   @priority P2
 *   @resolution_Method
 *   @test_condition
 *   @test_Coverage_Item
 *   @test_case_ID OEMCallAppTest_onFeatureActionDelivered_TC001
 *   @test_type functionality
 *   @test_objective
 *   @test_precon
 *   @test_input
 *   @test_expected_result
 *   @test_module
 *   @design_id
 */
TEST_F(OEMCallAppTest, OEMCallApp_onFeatureActionDelivered_TC001){
    OEMCallApp testObj; 
    auto ret = testObj.onFeatureActionDelivered("rcall-japan",FeatureAction::UPDATE,"abc");
    EXPECT_EQ(ret, TIGER_ERR::E_OK);
}

/**
 *   @brief This is a test script for the OEMCallApp_onFeatureActionPerformed function
 *   @classID OEMCallApp
 *   @methodID onFeatureActionPerformed
 *   @paramList const FeatureAction action, const std::string feature
 *   @priority P2
 *   @resolution_Method
 *   @test_condition
 *   @test_Coverage_Item
 *   @test_case_ID OEMCallAppTest_onFeatureActionPerformed_TC001
 *   @test_type functionality
 *   @test_objective
 *   @test_precon
 *   @test_input
 *   @test_expected_result
 *   @test_module
 *   @design_id
 */
TEST_F(OEMCallAppTest, OEMCallApp_onFeatureActionPerformed_TC001){
// Please enable and make test code here!!
#if 1
    // Please check source file, make mock files and insert EXPECT_CALL for callee functions.
    OEMCallApp testObj;
    sp<sl::Message> ret_param_0 = sp<sl::Message>(new sl::Message);
    EXPECT_CALL(*M_Handler, obtainMessage_003(_,_)).WillRepeatedly(Return(ret_param_0));
    auto ret = testObj.onFeatureActionPerformed(FeatureAction::UPDATE, "rcall-japan");
    EXPECT_EQ(ret, 0);
#endif
}

/**
 *   @brief This is a test script for the OEMCallApp_onFeatureActionPerformed function
 *   @classID OEMCallApp
 *   @methodID onFeatureActionPerformed
 *   @paramList const FeatureAction action, const std::string feature
 *   @priority P2
 *   @resolution_Method
 *   @test_condition
 *   @test_Coverage_Item
 *   @test_case_ID OEMCallAppTest_onFeatureActionPerformed_TC002
 *   @test_type functionality
 *   @test_objective
 *   @test_precon
 *   @test_input
 *   @test_expected_result
 *   @test_module
 *   @design_id
 */
TEST_F(OEMCallAppTest, OEMCallApp_onFeatureActionPerformed_TC002){
// Please enable and make test code here!!
#if 1
    // Please check source file, make mock files and insert EXPECT_CALL for callee functions.
    OEMCallApp testObj;
    sp<sl::Message> ret_param_0 = sp<sl::Message>(new sl::Message);
    EXPECT_CALL(*M_Handler, obtainMessage_003(_,_)).WillRepeatedly(Return(ret_param_0));
    auto ret = testObj.onFeatureActionPerformed(FeatureAction::UPDATE, "rcall-japan");
    EXPECT_EQ(ret, 0);
#endif
}

/**
 *   @brief This is a test script for the OEMCallApp_onFeatureActionPerformed function
 *   @classID OEMCallApp
 *   @methodID onFeatureActionPerformed
 *   @paramList const FeatureAction action, const std::string feature
 *   @priority P2
 *   @resolution_Method
 *   @test_condition
 *   @test_Coverage_Item
 *   @test_case_ID OEMCallAppTest_onFeatureActionPerformed_TC003
 *   @test_type functionality
 *   @test_objective
 *   @test_precon
 *   @test_input
 *   @test_expected_result
 *   @test_module
 *   @design_id
 */
TEST_F(OEMCallAppTest, OEMCallApp_onFeatureActionPerformed_TC003){
// Please enable and make test code here!!
#if 1
    // Please check source file, make mock files and insert EXPECT_CALL for callee functions.
    OEMCallApp testObj;
    sp<sl::Message> ret_param_0 = sp<sl::Message>(new sl::Message);
    EXPECT_CALL(*M_Handler, obtainMessage_003(_,_)).WillRepeatedly(Return(ret_param_0));
    auto ret = testObj.onFeatureActionPerformed(FeatureAction::UPDATE, "rcall-japan");
    EXPECT_EQ(ret, 0);
#endif
}
/**
 *   @brief This is a test script for the OEMCallApp_doOemCallHandler function
 *   @classID OEMCallApp
 *   @methodID doOemCallHandler
 *   @paramList uint32_t what, const sp<sl::Message>& msg
 *   @priority P2
 *   @resolution_Method
 *   @test_condition
 *   @test_Coverage_Item
 *   @test_case_ID OEMCallAppTest_doOemCallHandler_TC001
 *   @test_type functionality
 *   @test_objective
 *   @test_precon
 *   @test_input
 *   @test_expected_result
 *   @test_module
 *   @design_id
 */
TEST_F(OEMCallAppTest, OEMCallApp_doOemCallHandler_TC001){
// Please enable and make test code here!!
#if 1
    // Please check source file, make mock files and insert EXPECT_CALL for callee functions.
    OEMCallApp testObj;
    sl::Message *msg = new sl::Message();
    //sp<sl::Message> msg = sp<sl::Message>(new sl::Message);
    msg->what = numeric_limits<uint32_t>::max();
    testObj.doOemCallHandler(msg->what, msg);
    EXPECT_EQ(Bypass, true);
#endif
}
/**
 *   @brief This is a test script for the OEMCallApp_doOemCallHandler function
 *   @classID OEMCallApp
 *   @methodID doOemCallHandler
 *   @paramList uint32_t what, const sp<sl::Message>& msg
 *   @priority P2
 *   @resolution_Method
 *   @test_condition
 *   @test_Coverage_Item
 *   @test_case_ID OEMCallAppTest_doOemCallHandler_TC002
 *   @test_type functionality
 *   @test_objective
 *   @test_precon
 *   @test_input
 *   @test_expected_result
 *   @test_module
 *   @design_id
 */
TEST_F(OEMCallAppTest, OEMCallApp_doOemCallHandler_TC002){
// Please enable and make test code here!!
#if 1
    // Please check source file, make mock files and insert EXPECT_CALL for callee functions.
    OEMCallApp testObj;
    sl::Message *msg = new sl::Message();
    //sp<sl::Message> msg = sp<sl::Message>(new sl::Message);
    msg->what = msg::APPM_BOOT_COMPLETED;
    testObj.doOemCallHandler(msg->what, msg);
    EXPECT_EQ(Bypass, true);
#endif
}

/**
 *   @brief This is a test script for the OEMCallApp_doOemCallHandler function
 *   @classID OEMCallApp
 *   @methodID doOemCallHandler
 *   @paramList uint32_t what, const sp<sl::Message>& msg
 *   @priority P2
 *   @resolution_Method
 *   @test_condition
 *   @test_Coverage_Item
 *   @test_case_ID OEMCallAppTest_doOemCallHandler_TC003
 *   @test_type functionality
 *   @test_objective
 *   @test_precon
 *   @test_input
 *   @test_expected_result
 *   @test_module
 *   @design_id
 */
TEST_F(OEMCallAppTest, OEMCallApp_doOemCallHandler_TC003){
// Please enable and make test code here!!
#if 1
    // Please check source file, make mock files and insert EXPECT_CALL for callee functions.
    OEMCallApp testObj;
    sl::Message *msg = new sl::Message();
    msg->what = msg::MSG_RECV_HMI;
    testObj.spAdapters_ = std::make_shared<AdapterLocator>(nullptr);
    //testObj.spAdapters_->spPowerManagerAdapter = std::make_shared<MockPowerManagerAdapter>();
    EXPECT_CALL(*M_PowerManagerAdapter, getIGStatus()).WillRepeatedly(Return(MCU_VALUE_STATUS::MCU_STATUS_OFF));
    EXPECT_CALL(*M_PowerManagerAdapter, getACCStatus()).WillRepeatedly(Return(MCU_VALUE_STATUS::MCU_STATUS_OFF));
    EXPECT_CALL(*M_HmiManagerAdapter, doHandleHMIMessages(_,_)).Times(1);
    testObj.doOemCallHandler(msg->what, msg);
    EXPECT_EQ(Bypass, true);
#endif
}

/**
 *   @brief This is a test script for the OEMCallApp_doOemCallHandler function
 *   @classID OEMCallApp
 *   @methodID doOemCallHandler
 *   @paramList uint32_t what, const sp<sl::Message>& msg
 *   @priority P2
 *   @resolution_Method
 *   @test_condition
 *   @test_Coverage_Item
 *   @test_case_ID OEMCallAppTest_doOemCallHandler_TC004
 *   @test_type functionality
 *   @test_objective
 *   @test_precon
 *   @test_input
 *   @test_expected_result
 *   @test_module
 *   @design_id
 */
TEST_F(OEMCallAppTest, OEMCallApp_doOemCallHandler_TC004){
// Please enable and make test code here!!
#if 1
    // Please check source file, make mock files and insert EXPECT_CALL for callee functions.
    OEMCallApp testObj;
    sl::Message *msg = new sl::Message();
    msg->what = msg::MSG_RECV_HMI;
    testObj.spAdapters_ = std::make_shared<AdapterLocator>(nullptr);
    //testObj.spAdapters_->spPowerManagerAdapter = std::make_shared<MockPowerManagerAdapter>();
    EXPECT_CALL(*M_PowerManagerAdapter, getIGStatus()).WillRepeatedly(Return(MCU_VALUE_STATUS::MCU_STATUS_ON));
    EXPECT_CALL(*M_PowerManagerAdapter, getACCStatus()).WillRepeatedly(Return(MCU_VALUE_STATUS::MCU_STATUS_OFF));
    EXPECT_CALL(*M_HmiManagerAdapter, doHandleHMIMessages(_,_)).Times(1);
    testObj.doOemCallHandler(msg->what, msg);
    EXPECT_EQ(Bypass, true);
#endif
}

/**
 *   @brief This is a test script for the OEMCallApp_doOemCallHandler function
 *   @classID OEMCallApp
 *   @methodID doOemCallHandler
 *   @paramList uint32_t what, const sp<sl::Message>& msg
 *   @priority P2
 *   @resolution_Method
 *   @test_condition
 *   @test_Coverage_Item
 *   @test_case_ID OEMCallAppTest_doOemCallHandler_TC005
 *   @test_type functionality
 *   @test_objective
 *   @test_precon
 *   @test_input
 *   @test_expected_result
 *   @test_module
 *   @design_id
 */
TEST_F(OEMCallAppTest, OEMCallApp_doOemCallHandler_TC005){
// Please enable and make test code here!!
#if 1
    // Please check source file, make mock files and insert EXPECT_CALL for callee functions.
    OEMCallApp testObj;
    sl::Message *msg = new sl::Message();
    msg->what = msg::MSG_RECV_HMI;
    testObj.spAdapters_ = std::make_shared<AdapterLocator>(nullptr);
    //testObj.spAdapters_->spPowerManagerAdapter = std::make_shared<MockPowerManagerAdapter>();
    EXPECT_CALL(*M_PowerManagerAdapter, getIGStatus()).WillRepeatedly(Return(MCU_VALUE_STATUS::MCU_STATUS_OFF));
    EXPECT_CALL(*M_PowerManagerAdapter, getACCStatus()).WillRepeatedly(Return(MCU_VALUE_STATUS::MCU_STATUS_ON));
    EXPECT_CALL(*M_HmiManagerAdapter, doHandleHMIMessages(_,_)).Times(1);
    testObj.doOemCallHandler(msg->what, msg);
    EXPECT_EQ(Bypass, true);
#endif
}

/**
 *   @brief This is a test script for the OEMCallApp_doOemCallHandler function
 *   @classID OEMCallApp
 *   @methodID doOemCallHandler
 *   @paramList uint32_t what, const sp<sl::Message>& msg
 *   @priority P2
 *   @resolution_Method
 *   @test_condition
 *   @test_Coverage_Item
 *   @test_case_ID OEMCallAppTest_doOemCallHandler_TC006
 *   @test_type functionality
 *   @test_objective
 *   @test_precon
 *   @test_input
 *   @test_expected_result
 *   @test_module
 *   @design_id
 */
TEST_F(OEMCallAppTest, OEMCallApp_doOemCallHandler_TC006){
// Please enable and make test code here!!
#if 1
    // Please check source file, make mock files and insert EXPECT_CALL for callee functions.
    OEMCallApp testObj;
    sl::Message *msg = new sl::Message();
    msg->what = msg::MSG_RECV_HMI;
    testObj.spAdapters_ = std::make_shared<AdapterLocator>(nullptr);
    //testObj.spAdapters_->spPowerManagerAdapter = std::make_shared<MockPowerManagerAdapter>();
    EXPECT_CALL(*M_PowerManagerAdapter, getIGStatus()).WillRepeatedly(Return(MCU_VALUE_STATUS::MCU_STATUS_ON));
    EXPECT_CALL(*M_PowerManagerAdapter, getACCStatus()).WillRepeatedly(Return(MCU_VALUE_STATUS::MCU_STATUS_ON));
    EXPECT_CALL(*M_HmiManagerAdapter, doHandleHMIMessages(_,_)).Times(1);
    testObj.doOemCallHandler(msg->what, msg);
    EXPECT_EQ(Bypass, true);
#endif
}

/**
 *   @brief This is a test script for the OEMCallApp_doOemCallHandler function
 *   @classID OEMCallApp
 *   @methodID doOemCallHandler
 *   @paramList uint32_t what, const sp<sl::Message>& msg
 *   @priority P2
 *   @resolution_Method
 *   @test_condition
 *   @test_Coverage_Item
 *   @test_case_ID OEMCallAppTest_doOemCallHandler_TC007
 *   @test_type functionality
 *   @test_objective
 *   @test_precon
 *   @test_input
 *   @test_expected_result
 *   @test_module
 *   @design_id
 */
TEST_F(OEMCallAppTest, OEMCallApp_doOemCallHandler_TC007){
// Please enable and make test code here!!
#if 1
    // Please check source file, make mock files and insert EXPECT_CALL for callee functions.
    OEMCallApp testObj;
    sl::Message *msg = new sl::Message();
    msg->what = msg::MSG_HMI_RETRY_SAVE_TRIGGER;
    testObj.spAdapters_ = std::make_shared<AdapterLocator>(nullptr);
    //EXPECT_CALL(*M_HmiManagerAdapter, doHandleRetrySaveTrigger(_)).WillRepeatedly(Return());
    testObj.doOemCallHandler(msg->what, msg);
    EXPECT_EQ(Bypass, true);
#endif
}

/**
 *   @brief This is a test script for the OEMCallApp_doOemCallHandler function
 *   @classID OEMCallApp
 *   @methodID doOemCallHandler
 *   @paramList uint32_t what, const sp<sl::Message>& msg
 *   @priority P2
 *   @resolution_Method
 *   @test_condition
 *   @test_Coverage_Item
 *   @test_case_ID OEMCallAppTest_doOemCallHandler_TC008
 *   @test_type functionality
 *   @test_objective
 *   @test_precon
 *   @test_input
 *   @test_expected_result
 *   @test_module
 *   @design_id
 */
TEST_F(OEMCallAppTest, OEMCallApp_doOemCallHandler_TC008){
// Please enable and make test code here!!
#if 1
    // Please check source file, make mock files and insert EXPECT_CALL for callee functions.
    OEMCallApp testObj;
    sl::Message *msg = new sl::Message();
    msg->what = msg::MSG_CM_REQUEST_RETRY_REGISTER_RECEIVER;
    testObj.doOemCallHandler(msg->what, msg);
    EXPECT_EQ(Bypass, true);
#endif
}

/**
 *   @brief This is a test script for the OEMCallApp_doOemCallHandler function
 *   @classID OEMCallApp
 *   @methodID doOemCallHandler
 *   @paramList uint32_t what, const sp<sl::Message>& msg
 *   @priority P2
 *   @resolution_Method
 *   @test_condition
 *   @test_Coverage_Item
 *   @test_case_ID OEMCallAppTest_doOemCallHandler_TC009
 *   @test_type functionality
 *   @test_objective
 *   @test_precon
 *   @test_input
 *   @test_expected_result
 *   @test_module
 *   @design_id
 */
TEST_F(OEMCallAppTest, OEMCallApp_doOemCallHandler_TC009){
// Please enable and make test code here!!
#if 1
    // Please check source file, make mock files and insert EXPECT_CALL for callee functions.
    OEMCallApp testObj;
    sl::Message *msg = new sl::Message();
    msg->what = msg::MSG_CM_RETRY_REGISTER_AUDIO;
    testObj.spAdapters_ = std::make_shared<AdapterLocator>(nullptr);
    EXPECT_CALL(*M_AudioManagerAdapter, requestBRetryRegister()).Times(1);
    testObj.doOemCallHandler(msg->what, msg);
    EXPECT_EQ(Bypass, true);
#endif
}

/**
 *   @brief This is a test script for the OEMCallApp_doOemCallHandler function
 *   @classID OEMCallApp
 *   @methodID doOemCallHandler
 *   @paramList uint32_t what, const sp<sl::Message>& msg
 *   @priority P2
 *   @resolution_Method
 *   @test_condition
 *   @test_Coverage_Item
 *   @test_case_ID OEMCallAppTest_doOemCallHandler_TC0010
 *   @test_type functionality
 *   @test_objective
 *   @test_precon
 *   @test_input
 *   @test_expected_result
 *   @test_module
 *   @design_id
 */
TEST_F(OEMCallAppTest, OEMCallApp_doOemCallHandler_TC0010){
// Please enable and make test code here!!
#if 1
    // Please check source file, make mock files and insert EXPECT_CALL for callee functions.
    OEMCallApp testObj;
    sl::Message *msg = new sl::Message();
    msg->what = msg::MSG_CM_RETRY_REGISTER_ALARM;
    testObj.spAdapters_ = std::make_shared<AdapterLocator>(nullptr);
    // EXPECT_CALL(*M_AlarmManagerAdapter, init()).Times(1);
    testObj.doOemCallHandler(msg->what, msg);
    EXPECT_EQ(Bypass, true);
#endif
}

/**
 *   @brief This is a test script for the OEMCallApp_doOemCallHandler function
 *   @classID OEMCallApp
 *   @methodID doOemCallHandler
 *   @paramList uint32_t what, const sp<sl::Message>& msg
 *   @priority P2
 *   @resolution_Method
 *   @test_condition
 *   @test_Coverage_Item
 *   @test_case_ID OEMCallAppTest_doOemCallHandler_TC0011
 *   @test_type functionality
 *   @test_objective
 *   @test_precon
 *   @test_input
 *   @test_expected_result
 *   @test_module
 *   @design_id
 */
TEST_F(OEMCallAppTest, OEMCallApp_doOemCallHandler_TC0011){
// Please enable and make test code here!!
#if 1
    // Please check source file, make mock files and insert EXPECT_CALL for callee functions.
    OEMCallApp testObj;
    sl::Message *msg = new sl::Message();
    msg->what = msg::APPM_RESPONSE_QUERY;
    testObj.spAdapters_ = std::make_shared<AdapterLocator>(nullptr);
    //EXPECT_CALL(*M_AppManagerAdapter, doHandleAppMgrResponse(_)).Times(1);
    testObj.doOemCallHandler(msg->what, msg);
    EXPECT_EQ(Bypass, true);
#endif
}

/**
 *   @brief This is a test script for the OEMCallApp_doOemCallHandler function
 *   @classID OEMCallApp
 *   @methodID doOemCallHandler
 *   @paramList uint32_t what, const sp<sl::Message>& msg
 *   @priority P2
 *   @resolution_Method
 *   @test_condition
 *   @test_Coverage_Item
 *   @test_case_ID OEMCallAppTest_doOemCallHandler_TC0012
 *   @test_type functionality
 *   @test_objective
 *   @test_precon
 *   @test_input
 *   @test_expected_result
 *   @test_module
 *   @design_id
 */
TEST_F(OEMCallAppTest, OEMCallApp_doOemCallHandler_TC0012){
// Please enable and make test code here!!
#if 1
    // Please check source file, make mock files and insert EXPECT_CALL for callee functions.
    OEMCallApp testObj;
    sl::Message *msg = new sl::Message();
    msg->what = msg::APPM_REQUEST_ACTIONS;
    testObj.spAdapters_ = std::make_shared<AdapterLocator>(nullptr);
    //EXPECT_CALL(*M_AppManagerAdapter, doHandlePostActionDelivered(_)).Times(1);
    testObj.doOemCallHandler(msg->what, msg);
    EXPECT_EQ(Bypass, true);
#endif
}

/**
 *   @brief This is a test script for the OEMCallApp_doOemCallHandler function
 *   @classID OEMCallApp
 *   @methodID doOemCallHandler
 *   @paramList uint32_t what, const sp<sl::Message>& msg
 *   @priority P2
 *   @resolution_Method
 *   @test_condition
 *   @test_Coverage_Item
 *   @test_case_ID OEMCallAppTest_doOemCallHandler_TC0013
 *   @test_type functionality
 *   @test_objective
 *   @test_precon
 *   @test_input
 *   @test_expected_result
 *   @test_module
 *   @design_id
 */
TEST_F(OEMCallAppTest, OEMCallApp_doOemCallHandler_TC0013){
// Please enable and make test code here!!
#if 1
    // Please check source file, make mock files and insert EXPECT_CALL for callee functions.
    OEMCallApp testObj;
    sl::Message *msg = new sl::Message();
    msg->what = msg::APPM_FEATURE_STATUS_CHANGED;
    testObj.spAdapters_ = std::make_shared<AdapterLocator>(nullptr);
    //EXPECT_CALL(*M_AppManagerAdapter, doHandlePostFeatureStatusChanged(_)).Times(1);
    testObj.doOemCallHandler(msg->what, msg);
    EXPECT_EQ(Bypass, true);
#endif
}

/**
 *   @brief This is a test script for the OEMCallApp_doOemCallHandler function
 *   @classID OEMCallApp
 *   @methodID doOemCallHandler
 *   @paramList uint32_t what, const sp<sl::Message>& msg
 *   @priority P2
 *   @resolution_Method
 *   @test_condition
 *   @test_Coverage_Item
 *   @test_case_ID OEMCallAppTest_doOemCallHandler_TC0014
 *   @test_type functionality
 *   @test_objective
 *   @test_precon
 *   @test_input
 *   @test_expected_result
 *   @test_module
 *   @design_id
 */
TEST_F(OEMCallAppTest, OEMCallApp_doOemCallHandler_TC0014){
// Please enable and make test code here!!
#if 1
    // Please check source file, make mock files and insert EXPECT_CALL for callee functions.
    OEMCallApp testObj;
    sl::Message *msg = new sl::Message();
    msg->what = msg::MSG_CONFIG_CHANGED;
    testObj.spAdapters_ = std::make_shared<AdapterLocator>(nullptr);
    //EXPECT_CALL(*M_ConfigManager, doHandleConfigChanged(_)).Times(1);
    EXPECT_CALL(*M_ProcessorManager, handleMessage(_,_)).Times(1);
    testObj.doOemCallHandler(msg->what, msg);
    EXPECT_EQ(Bypass, true);
#endif
}

/**
 *   @brief This is a test script for the OEMCallApp_doOemCallHandler function
 *   @classID OEMCallApp
 *   @methodID doOemCallHandler
 *   @paramList uint32_t what, const sp<sl::Message>& msg
 *   @priority P2
 *   @resolution_Method
 *   @test_condition
 *   @test_Coverage_Item
 *   @test_case_ID OEMCallAppTest_doOemCallHandler_TC0015
 *   @test_type functionality
 *   @test_objective
 *   @test_precon
 *   @test_input
 *   @test_expected_result
 *   @test_module
 *   @design_id
 */
TEST_F(OEMCallAppTest, OEMCallApp_doOemCallHandler_TC0015){
// Please enable and make test code here!!
#if 1
    // Please check source file, make mock files and insert EXPECT_CALL for callee functions.
    OEMCallApp testObj;
    sl::Message *msg = new sl::Message();
    msg->what = msg::MSG_POWER_STATE_CHANGED;
    testObj.spAdapters_ = std::make_shared<AdapterLocator>(nullptr);
    EXPECT_CALL(*M_PowerManagerAdapter, handlePowerStateChanged(_,_)).Times(1);
    EXPECT_CALL(*M_ProcessorManager, handleMessage(_,_)).Times(1);
    testObj.doOemCallHandler(msg->what, msg);
    EXPECT_EQ(Bypass, true);
#endif
}

/**
 *   @brief This is a test script for the OEMCallApp_doOemCallHandler function
 *   @classID OEMCallApp
 *   @methodID doOemCallHandler
 *   @paramList uint32_t what, const sp<sl::Message>& msg
 *   @priority P2
 *   @resolution_Method
 *   @test_condition
 *   @test_Coverage_Item
 *   @test_case_ID OEMCallAppTest_doOemCallHandler_TC0016
 *   @test_type functionality
 *   @test_objective
 *   @test_precon
 *   @test_input
 *   @test_expected_result
 *   @test_module
 *   @design_id
 */
TEST_F(OEMCallAppTest, OEMCallApp_doOemCallHandler_TC0016){
// Please enable and make test code here!!
#if 1
    // Please check source file, make mock files and insert EXPECT_CALL for callee functions.
    OEMCallApp testObj;
    sl::Message *msg = new sl::Message();
    msg->what = msg::MSG_COMM_CDS;
    testObj.spAdapters_ = std::make_shared<AdapterLocator>(nullptr);
    EXPECT_CALL(*M_PowerManagerAdapter, getIGStatus()).WillRepeatedly(Return(MCU_VALUE_STATUS::MCU_STATUS_OFF));
    EXPECT_CALL(*M_PowerManagerAdapter, getACCStatus()).WillRepeatedly(Return(MCU_VALUE_STATUS::MCU_STATUS_OFF));
    testObj.doOemCallHandler(msg->what, msg);
    EXPECT_EQ(Bypass, true);
#endif
}

/**
 *   @brief This is a test script for the OEMCallApp_doOemCallHandler function
 *   @classID OEMCallApp
 *   @methodID doOemCallHandler
 *   @paramList uint32_t what, const sp<sl::Message>& msg
 *   @priority P2
 *   @resolution_Method
 *   @test_condition
 *   @test_Coverage_Item
 *   @test_case_ID OEMCallAppTest_doOemCallHandler_TC0017
 *   @test_type functionality
 *   @test_objective
 *   @test_precon
 *   @test_input
 *   @test_expected_result
 *   @test_module
 *   @design_id
 */
TEST_F(OEMCallAppTest, OEMCallApp_doOemCallHandler_TC0017){
// Please enable and make test code here!!
#if 1
    // Please check source file, make mock files and insert EXPECT_CALL for callee functions.
    OEMCallApp testObj;
    sl::Message *msg = new sl::Message();
    msg->what = msg::MSG_COMM_CDS;
    testObj.spAdapters_ = std::make_shared<AdapterLocator>(nullptr);
    EXPECT_CALL(*M_PowerManagerAdapter, getIGStatus()).WillRepeatedly(Return(MCU_VALUE_STATUS::MCU_STATUS_ON));
    EXPECT_CALL(*M_PowerManagerAdapter, getACCStatus()).WillRepeatedly(Return(MCU_VALUE_STATUS::MCU_STATUS_OFF));
    testObj.doOemCallHandler(msg->what, msg);
    EXPECT_EQ(Bypass, true);
#endif
}

/**
 *   @brief This is a test script for the OEMCallApp_doOemCallHandler function
 *   @classID OEMCallApp
 *   @methodID doOemCallHandler
 *   @paramList uint32_t what, const sp<sl::Message>& msg
 *   @priority P2
 *   @resolution_Method
 *   @test_condition
 *   @test_Coverage_Item
 *   @test_case_ID OEMCallAppTest_doOemCallHandler_TC0018
 *   @test_type functionality
 *   @test_objective
 *   @test_precon
 *   @test_input
 *   @test_expected_result
 *   @test_module
 *   @design_id
 */
TEST_F(OEMCallAppTest, OEMCallApp_doOemCallHandler_TC0018){
// Please enable and make test code here!!
#if 1
    // Please check source file, make mock files and insert EXPECT_CALL for callee functions.
    OEMCallApp testObj;
    sl::Message *msg = new sl::Message();
    msg->what = msg::MSG_COMM_CDS;
    testObj.spAdapters_ = std::make_shared<AdapterLocator>(nullptr);
    EXPECT_CALL(*M_PowerManagerAdapter, getIGStatus()).WillRepeatedly(Return(MCU_VALUE_STATUS::MCU_STATUS_OFF));
    EXPECT_CALL(*M_PowerManagerAdapter, getACCStatus()).WillRepeatedly(Return(MCU_VALUE_STATUS::MCU_STATUS_ON));
    testObj.doOemCallHandler(msg->what, msg);
    EXPECT_EQ(Bypass, true);
#endif
}

/**
 *   @brief This is a test script for the OEMCallApp_doOemCallHandler function
 *   @classID OEMCallApp
 *   @methodID doOemCallHandler
 *   @paramList uint32_t what, const sp<sl::Message>& msg
 *   @priority P2
 *   @resolution_Method
 *   @test_condition
 *   @test_Coverage_Item
 *   @test_case_ID OEMCallAppTest_doOemCallHandler_TC0019
 *   @test_type functionality
 *   @test_objective
 *   @test_precon
 *   @test_input
 *   @test_expected_result
 *   @test_module
 *   @design_id
 */
TEST_F(OEMCallAppTest, OEMCallApp_doOemCallHandler_TC0019){
// Please enable and make test code here!!
#if 1
    // Please check source file, make mock files and insert EXPECT_CALL for callee functions.
    OEMCallApp testObj;
    sl::Message *msg = new sl::Message();
    msg->what = msg::MSG_COMM_CDS;
    testObj.spAdapters_ = std::make_shared<AdapterLocator>(nullptr);
    EXPECT_CALL(*M_PowerManagerAdapter, getIGStatus()).WillRepeatedly(Return(MCU_VALUE_STATUS::MCU_STATUS_ON));
    EXPECT_CALL(*M_PowerManagerAdapter, getACCStatus()).WillRepeatedly(Return(MCU_VALUE_STATUS::MCU_STATUS_ON));
    testObj.doOemCallHandler(msg->what, msg);
    EXPECT_EQ(Bypass, true);
#endif
}

/**
 *   @brief This is a test script for the OEMCallApp_doOemCallHandler function
 *   @classID OEMCallApp
 *   @methodID doOemCallHandler
 *   @paramList uint32_t what, const sp<sl::Message>& msg
 *   @priority P2
 *   @resolution_Method
 *   @test_condition
 *   @test_Coverage_Item
 *   @test_case_ID OEMCallAppTest_doOemCallHandler_TC0020
 *   @test_type functionality
 *   @test_objective
 *   @test_precon
 *   @test_input
 *   @test_expected_result
 *   @test_module
 *   @design_id
 */
TEST_F(OEMCallAppTest, OEMCallApp_doOemCallHandler_TC0020){
// Please enable and make test code here!!
#if 1
    // Please check source file, make mock files and insert EXPECT_CALL for callee functions.
    OEMCallApp testObj;
    sl::Message *msg = new sl::Message();
    msg->what = msg::MSG_COMM_RETRY_SAVE_CDS;
    testObj.spAdapters_ = std::make_shared<AdapterLocator>(nullptr);
    testObj.doOemCallHandler(msg->what, msg);
    EXPECT_EQ(Bypass, true);
#endif
}

/**
 *   @brief This is a test script for the OEMCallApp_doOemCallHandler function
 *   @classID OEMCallApp
 *   @methodID doOemCallHandler
 *   @paramList uint32_t what, const sp<sl::Message>& msg
 *   @priority P2
 *   @resolution_Method
 *   @test_condition
 *   @test_Coverage_Item
 *   @test_case_ID OEMCallAppTest_doOemCallHandler_TC0021
 *   @test_type functionality
 *   @test_objective
 *   @test_precon
 *   @test_input
 *   @test_expected_result
 *   @test_module
 *   @design_id
 */
TEST_F(OEMCallAppTest, OEMCallApp_doOemCallHandler_TC0021){
// Please enable and make test code here!!
#if 1
    // Please check source file, make mock files and insert EXPECT_CALL for callee functions.
    OEMCallApp testObj;
    sl::Message *msg = new sl::Message();
    msg->what = msg::MSG_CM_RETRY_REGISTER_SOMEIP;
    testObj.spAdapters_ = std::make_shared<AdapterLocator>(nullptr);
    EXPECT_CALL(*M_someIP_manager, registerSomeipProviderReceiver()).Times(1);
    testObj.doOemCallHandler(msg->what, msg);
    EXPECT_EQ(Bypass, true);
#endif
}

/**
 *   @brief This is a test script for the OEMCallApp_doOemCallHandler function
 *   @classID OEMCallApp
 *   @methodID doOemCallHandler
 *   @paramList uint32_t what, const sp<sl::Message>& msg
 *   @priority P2
 *   @resolution_Method
 *   @test_condition
 *   @test_Coverage_Item
 *   @test_case_ID OEMCallAppTest_doOemCallHandler_TC0022
 *   @test_type functionality
 *   @test_objective
 *   @test_precon
 *   @test_input
 *   @test_expected_result
 *   @test_module
 *   @design_id
 */
TEST_F(OEMCallAppTest, OEMCallApp_doOemCallHandler_TC0022){
// Please enable and make test code here!!
#if 1
    // Please check source file, make mock files and insert EXPECT_CALL for callee functions.
    OEMCallApp testObj;
    sl::Message *msg = new sl::Message();
    msg->what = msg::MSG_CM_US_REQUEST_QUERY_ACN;
    //testObj.spAdapters_ = std::make_shared<AdapterLocator>(nullptr);
    EXPECT_CALL(*M_ProcessorManager, handleMessage(_,_)).Times(1);
    testObj.doOemCallHandler(msg->what, msg);
    EXPECT_EQ(Bypass, true);
#endif
}

/**
 *   @brief This is a test script for the OEMCallApp_createApplication function
 *   @classID OEMCallApp
 *   @methodID createApplication
 *   @paramList const uint32_t what
 *   @priority P2
 *   @resolution_Method
 *   @test_condition
 *   @test_Coverage_Item
 *   @test_case_ID OEMCallAppTest_createApplication_TC001
 *   @test_type functionality
 *   @test_objective
 *   @test_precon
 *   @test_input
 *   @test_expected_result
 *   @test_module
 *   @design_id
 */
TEST_F(OEMCallAppTest, OEMCallApp_createApplication_TC001){
// Please enable and make test code here!!
#if 1
    // Please check source file, make mock files and insert EXPECT_CALL for callee functions.
    createApplication();
    EXPECT_NE(gApp, nullptr);
#endif
}

/**
 *   @brief This is a test script for the OEMCallApp_createApplication function
 *   @classID OEMCallApp
 *   @methodID createApplication
 *   @paramList const uint32_t what
 *   @priority P2
 *   @resolution_Method
 *   @test_condition
 *   @test_Coverage_Item
 *   @test_case_ID OEMCallAppTest_createApplication_TC002
 *   @test_type functionality
 *   @test_objective
 *   @test_precon
 *   @test_input
 *   @test_expected_result
 *   @test_module
 *   @design_id
 */
TEST_F(OEMCallAppTest, OEMCallApp_createApplication_TC002){
// Please enable and make test code here!!
#if 1
    // Please check source file, make mock files and insert EXPECT_CALL for callee functions.
    createApplication();
    EXPECT_NE(gApp, nullptr);
#endif
}

/**
 *   @brief This is a test script for the OEMCallApp_createApplication function
 *   @classID OEMCallApp
 *   @methodID createApplication
 *   @paramList
 *   @priority P2
 *   @resolution_Method
 *   @test_condition
 *   @test_Coverage_Item
 *   @test_case_ID OEMCallAppTest_createApplication_TC003
 *   @test_type functionality
 *   @test_objective
 *   @test_precon
 *   @test_input
 *   @test_expected_result
 *   @test_module
 *   @design_id
 */
TEST_F(OEMCallAppTest, OEMCallApp_createApplication_TC003){
// Please enable and make test code here!!
#if 1
    // Please check source file, make mock files and insert EXPECT_CALL for callee functions.
    createApplication();
    EXPECT_NE(gApp, nullptr);
#endif
}

/**
 *   @brief This is a test script for the OEMCallApp_destroyApplication function
 *   @classID OEMCallApp
 *   @methodID destroyApplication
 *   @paramList const uint32_t what
 *   @priority P2
 *   @resolution_Method
 *   @test_condition
 *   @test_Coverage_Item
 *   @test_case_ID OEMCallAppTest_destroyApplication_TC001
 *   @test_type functionality
 *   @test_objective
 *   @test_precon
 *   @test_input
 *   @test_expected_result
 *   @test_module
 *   @design_id
 */
TEST_F(OEMCallAppTest, OEMCallApp_destroyApplication_TC001){
// Please enable and make test code here!!
#if 1
    // Please check source file, make mock files and insert EXPECT_CALL for callee functions.
    destroyApplication(new Application());
    EXPECT_NE(gApp, nullptr);
#endif
}

/**
 *   @brief This is a test script for the OEMCallApp_destroyApplication function
 *   @classID OEMCallApp
 *   @methodID destroyApplication
 *   @paramList const uint32_t what
 *   @priority P2
 *   @resolution_Method
 *   @test_condition
 *   @test_Coverage_Item
 *   @test_case_ID OEMCallAppTest_destroyApplication_TC002
 *   @test_type functionality
 *   @test_objective
 *   @test_precon
 *   @test_input
 *   @test_expected_result
 *   @test_module
 *   @design_id
 */
TEST_F(OEMCallAppTest, OEMCallApp_destroyApplication_TC002){
// Please enable and make test code here!!
#if 1
    // Please check source file, make mock files and insert EXPECT_CALL for callee functions.
    destroyApplication(new Application());
    EXPECT_NE(gApp, nullptr);
#endif
}

/**
 *   @brief This is a test script for the OEMCallApp_destroyApplication function
 *   @classID OEMCallApp
 *   @methodID destroyApplication
 *   @paramList const uint32_t what
 *   @priority P2
 *   @resolution_Method
 *   @test_condition
 *   @test_Coverage_Item
 *   @test_case_ID OEMCallAppTest_destroyApplication_TC003
 *   @test_type functionality
 *   @test_objective
 *   @test_precon
 *   @test_input
 *   @test_expected_result
 *   @test_module
 *   @design_id
 */
TEST_F(OEMCallAppTest, OEMCallApp_destroyApplication_TC003){
// Please enable and make test code here!!
#if 1
    // Please check source file, make mock files and insert EXPECT_CALL for callee functions.
    destroyApplication(new Application());
    EXPECT_NE(gApp, nullptr);
#endif
}


/*
 * Define Mock Class / function
*/
class Base_SystemPostReceiver {
public:
    virtual ~Base_SystemPostReceiver(){ }
};

class Mock_SystemPostReceiver : public Base_SystemPostReceiver {
public:
};

Mock_SystemPostReceiver *M_SystemPostReceiver;

using ::testing::Return;
using ::testing::_;
using ::testing::A;
using ::testing::ReturnRef;
using ::testing::Values;
using ::testing::SetArgPointee;
using ::testing::SetArrayArgument;
using ::testing::SaveArg;
using ::testing::SaveArgPointee;
using ::testing::DoAll;
using ::testing::Args;
using ::testing::AllOf;
using ::testing::AtLeast;
using ::testing::Combine;
class SystemPostReceiverTest : public ::testing::Test {
protected:
    virtual void SetUp(){
        M_SystemPostReceiver = new Mock_SystemPostReceiver();
    }
    virtual void TearDown(){
        delete M_SystemPostReceiver;
    }
};

/**
 *   @brief This is a test script for the SystemPostReceiver_onSystemPostReceived function
 *   @classID SystemPostReceiver
 *   @methodID onSystemPostReceived
 *   @paramList 
 *   @priority P2
 *   @resolution_Method
 *   @test_condition
 *   @test_Coverage_Item
 *   @test_case_ID SystemPostReceiverTest_onSystemPostReceived_TC001
 *   @test_type functionality
 *   @test_objective
 *   @test_precon
 *   @test_input
 *   @test_expected_result
 *   @test_module
 *   @design_id
 */
TEST_F(SystemPostReceiverTest, SystemPostReceiver_onSystemPostReceived_TC001){
// Please enable and make test code here!!
#if 1
    // Please check source file, make mock files and insert EXPECT_CALL for callee functions.
    OEMCallApp app;
    SystemPostReceiver *testObj =  new SystemPostReceiver(app);
    android::sp<Post> systemPost = new Post();
    auto ret = testObj->onSystemPostReceived(systemPost);
    delete testObj;
    EXPECT_EQ(ret, true);
#endif
}

/**
 *   @brief This is a test script for the SystemPostReceiver_onSystemPostReceived function
 *   @classID SystemPostReceiver
 *   @methodID onSystemPostReceived
 *   @paramList 
 *   @priority P2
 *   @resolution_Method
 *   @test_condition
 *   @test_Coverage_Item
 *   @test_case_ID SystemPostReceiverTest_onSystemPostReceived_TC002
 *   @test_type functionality
 *   @test_objective
 *   @test_precon
 *   @test_input
 *   @test_expected_result
 *   @test_module
 *   @design_id
 */
TEST_F(SystemPostReceiverTest, SystemPostReceiver_onSystemPostReceived_TC002){
// Please enable and make test code here!!
#if 1
    // Please check source file, make mock files and insert EXPECT_CALL for callee functions.
    OEMCallApp app;
    SystemPostReceiver *testObj =  new SystemPostReceiver(app);
    android::sp<Post> systemPost = new Post();
    auto ret = testObj->onSystemPostReceived(systemPost);
    delete testObj;
    EXPECT_EQ(ret, true);
#endif
}


/**
 *   @brief This is a test script for the SystemPostReceiver_onSystemPostReceived function
 *   @classID SystemPostReceiver
 *   @methodID onSystemPostReceived
 *   @paramList 
 *   @priority P2
 *   @resolution_Method
 *   @test_condition
 *   @test_Coverage_Item
 *   @test_case_ID SystemPostReceiverTest_onSystemPostReceived_TC003
 *   @test_type functionality
 *   @test_objective
 *   @test_precon
 *   @test_input
 *   @test_expected_result
 *   @test_module
 *   @design_id
 */
TEST_F(SystemPostReceiverTest, SystemPostReceiver_onSystemPostReceived_TC003){
// Please enable and make test code here!!
#if 1
    // Please check source file, make mock files and insert EXPECT_CALL for callee functions.
    OEMCallApp app;
    SystemPostReceiver *testObj =  new SystemPostReceiver(app);
    android::sp<Post> systemPost = new Post();
    auto ret = testObj->onSystemPostReceived(systemPost);
    delete testObj;
    EXPECT_EQ(ret, true);
#endif
}


