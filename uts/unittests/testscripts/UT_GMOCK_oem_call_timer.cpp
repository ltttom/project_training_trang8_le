/*
 * test script file generated by uts
 */

#include "gtest/gtest.h"
#include "gmock/gmock.h"
#include <dlfcn.h>



// Include MOCK FILES!!
// #include "mock/directory/filename_mock.h"
#define private public

#pragma GCC push_options
#pragma GCC optimize("O5")
#pragma GCC optimize("-fno-inline")
// Include Source File for testing!!
// Include Source File for testing!!
#include "../src/oem_call_timer.cpp"
#pragma GCC pop_options
DLT_DECLARE_CONTEXT(ctxOEMCall);
using namespace android;
using namespace oc;
/*
 * Define Mock Class / function
*/
#include "mock/src/processor/processor_base_mock.h"
#include "mock/src/oem_call_app_constants_mock.h"
class Base_OEMCallTimer {
public:
    virtual ~Base_OEMCallTimer(){ }
};

class Mock_OEMCallTimer : public Base_OEMCallTimer {
public:
};

Mock_OEMCallTimer *M_OEMCallTimer;

using ::testing::Return;
using ::testing::_;
using ::testing::A;
using ::testing::ReturnRef;
using ::testing::Values;
using ::testing::SetArgPointee;
using ::testing::SetArrayArgument;
using ::testing::SaveArg;
using ::testing::SaveArgPointee;
using ::testing::DoAll;
using ::testing::Args;
using ::testing::AllOf;
using ::testing::AtLeast;
using ::testing::Combine;
bool Bypass = true;
class OEMCallTimerTest : public ::testing::Test {
protected:
    virtual void SetUp(){
        M_OEMCallTimer = new Mock_OEMCallTimer();
    }
    virtual void TearDown(){
        delete M_OEMCallTimer;
    }
};

/**
 *   @brief This is a test script for the OEMCallTimer_OEMCallTimer function
 *   @classID OEMCallTimer
 *   @methodID OEMCallTimer
 *   @paramList int timerId
 *   @priority P2
 *   @resolution_Method
 *   @test_condition
 *   @test_Coverage_Item
 *   @test_case_ID OEMCallTimerTest_OEMCallTimer_TC001
 *   @test_type functionality
 *   @test_objective
 *   @test_precon
 *   @test_input
 *   @test_expected_result
 *   @test_module
 *   @design_id
 */
TEST_F(OEMCallTimerTest, OEMCallTimer_OEMCallTimer_TC001){
// Please enable and make test code here!!
#if 1
    // Please check source file, make mock files and insert EXPECT_CALL for callee functions.
    std::shared_ptr<MockProcessorBase> spProcessorMock_(new MockProcessorBase());
    OEMCallTimer testObj(spProcessorMock_);
    EXPECT_EQ(Bypass, true);
#endif
}

/**
 *   @brief This is a test script for the OEMCallTimer_handlerFunction function
 *   @classID OEMCallTimer
 *   @methodID handlerFunction
 *   @paramList int timerId
 *   @priority P2
 *   @resolution_Method
 *   @test_condition
 *   @test_Coverage_Item
 *   @test_case_ID OEMCallTimerTest_handlerFunction_TC001
 *   @test_type functionality
 *   @test_objective
 *   @test_precon
 *   @test_input
 *   @test_expected_result
 *   @test_module
 *   @design_id
 */
TEST_F(OEMCallTimerTest, OEMCallTimer_handlerFunction_TC001){
// Please enable and make test code here!!
#if 1
    // Please check source file, make mock files and insert EXPECT_CALL for callee functions.
    std::shared_ptr<MockProcessorBase> spProcessorMock_(new MockProcessorBase());
    OEMCallTimer testObj(spProcessorMock_);
    testObj.handlerFunction(2);
    EXPECT_EQ(Bypass, true);
#endif
}


/**
 *   @brief This is a test script for the OEMCallTimer_handlerFunction function
 *   @classID OEMCallTimer
 *   @methodID handlerFunction
 *   @paramList int timerId
 *   @priority P2
 *   @resolution_Method
 *   @test_condition
 *   @test_Coverage_Item
 *   @test_case_ID OEMCallTimerTest_handlerFunction_TC002
 *   @test_type functionality
 *   @test_objective
 *   @test_precon
 *   @test_input
 *   @test_expected_result
 *   @test_module
 *   @design_id
 */
TEST_F(OEMCallTimerTest, OEMCallTimer_handlerFunction_TC002){
// Please enable and make test code here!!
#if 1
    // Please check source file, make mock files and insert EXPECT_CALL for callee functions.
    std::shared_ptr<MockProcessorBase> spProcessorMock_(new MockProcessorBase());
    OEMCallTimer testObj(spProcessorMock_);
    testObj.handlerFunction(2);
    EXPECT_EQ(Bypass, true);
#endif
}


/**
 *   @brief This is a test script for the OEMCallTimer_handlerFunction function
 *   @classID OEMCallTimer
 *   @methodID handlerFunction
 *   @paramList int timerId
 *   @priority P2
 *   @resolution_Method
 *   @test_condition
 *   @test_Coverage_Item
 *   @test_case_ID OEMCallTimerTest_handlerFunction_TC003
 *   @test_type functionality
 *   @test_objective
 *   @test_precon
 *   @test_input
 *   @test_expected_result
 *   @test_module
 *   @design_id
 */
TEST_F(OEMCallTimerTest, OEMCallTimer_handlerFunction_TC003){
// Please enable and make test code here!!
#if 1
    // Please check source file, make mock files and insert EXPECT_CALL for callee functions.
    std::shared_ptr<MockProcessorBase> spProcessorMock_(new MockProcessorBase());
    OEMCallTimer testObj(spProcessorMock_);
    testObj.handlerFunction(2);
    EXPECT_EQ(Bypass, true);
#endif
}

