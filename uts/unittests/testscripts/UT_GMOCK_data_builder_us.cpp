/*
 * test script file generated by uts
 */

#include "gtest/gtest.h"
#include "gmock/gmock.h"
#include <dlfcn.h>

// Include MOCK FILES!!
// #include "mock/directory/filename_mock.h"
#define private public

#pragma GCC push_options
#pragma GCC optimize("O5")
#pragma GCC optimize("-fno-inline")
// Include Source File for testing!!
#include "../src/data/data_builder_us.cpp"
#pragma GCC pop_options
using namespace android;
using namespace oc;
/*
 * Define Mock Class / function
*/
#include "mock/src/data/data_collector_gps_mock.h"
#include "mock/src/data/data_collector_can_mock.h"
#include "mock/src/oem_call_app_constants_mock.h"
class Base_DataBuilderUS {
public:
    virtual ~Base_DataBuilderUS(){ }
};

class Mock_DataBuilderUS : public Base_DataBuilderUS {
public:
};

Mock_DataBuilderUS *M_DataBuilderUS;

using ::testing::Return;
using ::testing::_;
using ::testing::A;
using ::testing::ReturnRef;
using ::testing::Values;
using ::testing::SetArgPointee;
using ::testing::SetArrayArgument;
using ::testing::SaveArg;
using ::testing::SaveArgPointee;
using ::testing::DoAll;
using ::testing::Args;
using ::testing::AllOf;
using ::testing::AtLeast;
using ::testing::Combine;
bool Bypass = true;
class DataBuilderUSTest : public ::testing::Test {
protected:
    virtual void SetUp(){
        M_DataBuilderUS = new Mock_DataBuilderUS();
        M_GPSCollector = new MockGPSCollector();
        M_CanDataCollector = new MockCanDataCollector();

    }
    virtual void TearDown(){
        delete M_DataBuilderUS;
        delete M_GPSCollector;
        delete M_CanDataCollector;
    }
};

/**
 *   @brief This is a test script for the DataBuilderUS_DataBuilderUS function
 *   @classID DataBuilderUS
 *   @methodID DataBuilderUS
 *   @paramList
 *   @priority P2
 *   @resolution_Method
 *   @test_condition
 *   @test_Coverage_Item
 *   @test_case_ID DataBuilderUSTest_DataBuilderUS_TC001
 *   @test_type functionality
 *   @test_objective
 *   @test_precon
 *   @test_input
 *   @test_expected_result
 *   @test_module
 *   @design_id
 */
TEST_F(DataBuilderUSTest, DataBuilderUS_DataBuilderUS_TC001){
// Please enable and make test code here!!
#if 1
    // Please check source file, make mock files and insert EXPECT_CALL for callee functions.
    DataBuilderUS testObj;
    EXPECT_EQ(Bypass, true);
#endif
}

/**
 *   @brief This is a test script for the DataBuilderUS_build function
 *   @classID DataBuilderUS
 *   @methodID build
 *   @paramList 
 *   @priority P2
 *   @resolution_Method
 *   @test_condition
 *   @test_Coverage_Item
 *   @test_case_ID DataBuilderUSTest_build_TC001
 *   @test_type functionality
 *   @test_objective
 *   @test_precon
 *   @test_input
 *   @test_expected_result
 *   @test_module
 *   @design_id
 */
TEST_F(DataBuilderUSTest, DataBuilderUS_build_TC001){
// Please enable and make test code here!!
#if 1
    // Please check source file, make mock files and insert EXPECT_CALL for callee functions.
    DataBuilderUS testObj;
    std::string str = "";
    EXPECT_CALL(*M_GPSCollector, get()).WillRepeatedly(Return(str));
    Json::Value root;
    EXPECT_CALL(*M_CanDataCollector, get()).WillRepeatedly(Return(root));
    auto ret = testObj.build();
    EXPECT_EQ(Bypass, true);
#endif
}

/**
 *   @brief This is a test script for the DataBuilderUS_build function
 *   @classID DataBuilderUS
 *   @methodID build
 *   @paramList 
 *   @priority P2
 *   @resolution_Method
 *   @test_condition
 *   @test_Coverage_Item
 *   @test_case_ID DataBuilderUSTest_build_TC002
 *   @test_type functionality
 *   @test_objective
 *   @test_precon
 *   @test_input
 *   @test_expected_result
 *   @test_module
 *   @design_id
 */
TEST_F(DataBuilderUSTest, DataBuilderUS_build_TC002){
// Please enable and make test code here!!
#if 1
    // Please check source file, make mock files and insert EXPECT_CALL for callee functions.
    DataBuilderUS testObj;
    std::string str = "";
    EXPECT_CALL(*M_GPSCollector, get()).WillRepeatedly(Return(str));
    Json::Value root;
    EXPECT_CALL(*M_CanDataCollector, get()).WillRepeatedly(Return(root));
    auto ret = testObj.build();
    EXPECT_EQ(Bypass, true);
#endif
}

/**
 *   @brief This is a test script for the DataBuilderUS_build function
 *   @classID DataBuilderUS
 *   @methodID build
 *   @paramList 
 *   @priority P2
 *   @resolution_Method
 *   @test_condition
 *   @test_Coverage_Item
 *   @test_case_ID DataBuilderUSTest_build_TC003
 *   @test_type functionality
 *   @test_objective
 *   @test_precon
 *   @test_input
 *   @test_expected_result
 *   @test_module
 *   @design_id
 */
TEST_F(DataBuilderUSTest, DataBuilderUS_build_TC003){
// Please enable and make test code here!!
#if 1
    // Please check source file, make mock files and insert EXPECT_CALL for callee functions.
    DataBuilderUS testObj;
    std::string str = "";
    EXPECT_CALL(*M_GPSCollector, get()).WillRepeatedly(Return(str));
    Json::Value root;
    EXPECT_CALL(*M_CanDataCollector, get()).WillRepeatedly(Return(root));
    auto ret = testObj.build();
    EXPECT_EQ(Bypass, true);
#endif
}

/**
 *   @brief This is a test script for the DataBuilderUS_setCDS function
 *   @classID DataBuilderUS
 *   @methodID setCDS
 *   @paramList bool isNormalCDS
 *   @priority P2
 *   @resolution_Method
 *   @test_condition
 *   @test_Coverage_Item
 *   @test_case_ID DataBuilderUSTest_setCDS_TC001
 *   @test_type functionality
 *   @test_objective
 *   @test_precon
 *   @test_input
 *   @test_expected_result
 *   @test_module
 *   @design_id
 */
TEST_F(DataBuilderUSTest, DataBuilderUS_setCDS_TC001){
// Please enable and make test code here!!
#if 1
    // Please check source file, make mock files and insert EXPECT_CALL for callee functions.
    DataBuilderUS testObj;
    EXPECT_CALL(*M_CanDataCollector, collect()).WillRepeatedly(Return());
    testObj.setCDS(true);
    EXPECT_EQ(Bypass, true);
#endif
}

/**
 *   @brief This is a test script for the DataBuilderUS_setCDS function
 *   @classID DataBuilderUS
 *   @methodID setCDS
 *   @paramList bool isNormalCDS
 *   @priority P2
 *   @resolution_Method
 *   @test_condition
 *   @test_Coverage_Item
 *   @test_case_ID DataBuilderUSTest_setCDS_TC002
 *   @test_type functionality
 *   @test_objective
 *   @test_precon
 *   @test_input
 *   @test_expected_result
 *   @test_module
 *   @design_id
 */
TEST_F(DataBuilderUSTest, DataBuilderUS_setCDS_TC002){
// Please enable and make test code here!!
#if 1
    // Please check source file, make mock files and insert EXPECT_CALL for callee functions.
    DataBuilderUS testObj;
    EXPECT_CALL(*M_CanDataCollector, collect()).WillRepeatedly(Return());
    testObj.setCDS(true);
    EXPECT_EQ(Bypass, true);
#endif
}

/**
 *   @brief This is a test script for the DataBuilderUS_setCDS function
 *   @classID DataBuilderUS
 *   @methodID setCDS
 *   @paramList bool isNormalCDS
 *   @priority P2
 *   @resolution_Method
 *   @test_condition
 *   @test_Coverage_Item
 *   @test_case_ID DataBuilderUSTest_setCDS_TC003
 *   @test_type functionality
 *   @test_objective
 *   @test_precon
 *   @test_input
 *   @test_expected_result
 *   @test_module
 *   @design_id
 */
TEST_F(DataBuilderUSTest, DataBuilderUS_setCDS_TC003){
// Please enable and make test code here!!
#if 1
    // Please check source file, make mock files and insert EXPECT_CALL for callee functions.
    DataBuilderUS testObj;
    EXPECT_CALL(*M_CanDataCollector, collect()).WillRepeatedly(Return());
    testObj.setCDS(true);
    EXPECT_EQ(Bypass, true);
#endif
}

/**
 *   @brief This is a test script for the DataBuilderUS_setGPS function
 *   @classID DataBuilderUS
 *   @methodID setGPS
 *   @paramList 
 *   @priority P2
 *   @resolution_Method
 *   @test_condition
 *   @test_Coverage_Item
 *   @test_case_ID DataBuilderUSTest_setGPS_TC001
 *   @test_type functionality
 *   @test_objective
 *   @test_precon
 *   @test_input
 *   @test_expected_result
 *   @test_module
 *   @design_id
 */
TEST_F(DataBuilderUSTest, DataBuilderUS_setGPS_TC001){
// Please enable and make test code here!!
#if 1
    // Please check source file, make mock files and insert EXPECT_CALL for callee functions.
    DataBuilderUS testObj;
    EXPECT_CALL(*M_GPSCollector, collect(_)).WillRepeatedly(Return());
    testObj.setGPS();
    EXPECT_EQ(Bypass, true);
#endif
}

/**
 *   @brief This is a test script for the DataBuilderUS_setGPS function
 *   @classID DataBuilderUS
 *   @methodID setGPS
 *   @paramList 
 *   @priority P2
 *   @resolution_Method
 *   @test_condition
 *   @test_Coverage_Item
 *   @test_case_ID DataBuilderUSTest_setGPS_TC002
 *   @test_type functionality
 *   @test_objective
 *   @test_precon
 *   @test_input
 *   @test_expected_result
 *   @test_module
 *   @design_id
 */
TEST_F(DataBuilderUSTest, DataBuilderUS_setGPS_TC002){
// Please enable and make test code here!!
#if 1
    // Please check source file, make mock files and insert EXPECT_CALL for callee functions.
    DataBuilderUS testObj;
    EXPECT_CALL(*M_GPSCollector, collect(_)).WillRepeatedly(Return());
    testObj.setGPS();
    EXPECT_EQ(Bypass, true);
#endif
}

/**
 *   @brief This is a test script for the DataBuilderUS_setGPS function
 *   @classID DataBuilderUS
 *   @methodID setGPS
 *   @paramList 
 *   @priority P2
 *   @resolution_Method
 *   @test_condition
 *   @test_Coverage_Item
 *   @test_case_ID DataBuilderUSTest_setGPS_TC003
 *   @test_type functionality
 *   @test_objective
 *   @test_precon
 *   @test_input
 *   @test_expected_result
 *   @test_module
 *   @design_id
 */
TEST_F(DataBuilderUSTest, DataBuilderUS_setGPS_TC003){
// Please enable and make test code here!!
#if 1
    // Please check source file, make mock files and insert EXPECT_CALL for callee functions.
    DataBuilderUS testObj;
    EXPECT_CALL(*M_GPSCollector, collect(_)).WillRepeatedly(Return());
    testObj.setGPS();
    EXPECT_EQ(Bypass, true);
#endif
}

/**
 *   @brief This is a test script for the DataBuilderUS_setUtil function
 *   @classID DataBuilderUS
 *   @methodID setUtil
 *   @paramList const std::string ignition
 *   @priority P2
 *   @resolution_Method
 *   @test_condition
 *   @test_Coverage_Item
 *   @test_case_ID DataBuilderUSTest_setUtil_TC001
 *   @test_type functionality
 *   @test_objective
 *   @test_precon
 *   @test_input
 *   @test_expected_result
 *   @test_module
 *   @design_id
 */
TEST_F(DataBuilderUSTest, DataBuilderUS_setUtil_TC001){
// Please enable and make test code here!!
#if 1
    // Please check source file, make mock files and insert EXPECT_CALL for callee functions.
    DataBuilderUS testObj;
    testObj.setUtil("unknown");
    EXPECT_EQ(Bypass, true);
#endif
}

/**
 *   @brief This is a test script for the DataBuilderUS_setUtil function
 *   @classID DataBuilderUS
 *   @methodID setUtil
 *   @paramList const std::string ignition
 *   @priority P2
 *   @resolution_Method
 *   @test_condition
 *   @test_Coverage_Item
 *   @test_case_ID DataBuilderUSTest_setUtil_TC002
 *   @test_type functionality
 *   @test_objective
 *   @test_precon
 *   @test_input
 *   @test_expected_result
 *   @test_module
 *   @design_id
 */
TEST_F(DataBuilderUSTest, DataBuilderUS_setUtil_TC002){
// Please enable and make test code here!!
#if 1
    // Please check source file, make mock files and insert EXPECT_CALL for callee functions.
    DataBuilderUS testObj;
    testObj.setUtil("unknown");
    EXPECT_EQ(Bypass, true);
#endif
}


/**
 *   @brief This is a test script for the DataBuilderUS_setUtil function
 *   @classID DataBuilderUS
 *   @methodID setUtil
 *   @paramList const std::string ignition
 *   @priority P2
 *   @resolution_Method
 *   @test_condition
 *   @test_Coverage_Item
 *   @test_case_ID DataBuilderUSTest_setUtil_TC003
 *   @test_type functionality
 *   @test_objective
 *   @test_precon
 *   @test_input
 *   @test_expected_result
 *   @test_module
 *   @design_id
 */
TEST_F(DataBuilderUSTest, DataBuilderUS_setUtil_TC003){
// Please enable and make test code here!!
#if 1
    // Please check source file, make mock files and insert EXPECT_CALL for callee functions.
    DataBuilderUS testObj;
    testObj.setUtil("unknown");
    EXPECT_EQ(Bypass, true);
#endif
}

