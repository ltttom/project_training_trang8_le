/*
 * test script file generated by uts
 */

#include "gtest/gtest.h"
#include "gmock/gmock.h"
#include <dlfcn.h>



// Include MOCK FILES!!
// #include "mock/src/logger_mock.h"
// #include "mock/src/oem_call_app_constants_mock.h"
#define private public
// DLT_DECLARE_CONTEXT(ctxOEMCall);
// DLT_DECLARE_CONTEXT(ctxOEMCallMASS);
#pragma GCC push_options
#pragma GCC optimize("O0")
#pragma GCC optimize("-fno-inline")
//Over write header file
#include "mock/tsp_mock/header_mock/AtpLog_Base.hpp"

// Include Source File for testing!!
#include "../src/services_adapter/receiver_manager.cpp"
#pragma GCC pop_options
using namespace android;
using namespace oc;
using namespace sl;
// Include MOCK FILES!!

#include <application/Application.h>
#include "mock/src/logger_mock.h"
#include "mock/src/oem_call_app_constants_mock.h"
#include "mock/service/BpBinder_mock.h"
#include "mock/service/IServiceManager_mock.h"
#include "mock/service/Handler_mock.h"
#include "mock/service/AppManager_mock.h"
#include "mock/service/IInterface_mock.h"
#include "mock/service/Binder_mock.h"
#include "mock/service/Buffer_mock.h"
#include "mock/service/HMIManager_mock.h"
#include "mock/service/IPowerManagerService_mock.h"
#include "mock/service/ConfigurationManagerService_mock.h"
#include "mock/service/CommunicationManagerService_mock.h"
#include "mock/src/oem_call_handler_mock.h"
#include "mock/src/oem_call_app_if_mock.h"

/*
 * Define Mock Class / function
*/
class Base_ReceiverManager {
public:
    virtual ~Base_ReceiverManager(){ }
};

class Mock_ReceiverManager : public Base_ReceiverManager {
public:
};

Mock_ReceiverManager *M_ReceiverManager;

using ::testing::Return;
using ::testing::_;
using ::testing::A;
using ::testing::ReturnRef;
using ::testing::Values;
using ::testing::SetArgPointee;
using ::testing::SetArrayArgument;
using ::testing::SaveArg;
using ::testing::SaveArgPointee;
using ::testing::DoAll;
using ::testing::Args;
using ::testing::AllOf;
using ::testing::AtLeast;
using ::testing::Combine;
bool Bypass = true;
class ReceiverManagerTest : public ::testing::Test {
protected:
    virtual void SetUp(){
        M_ReceiverManager = new Mock_ReceiverManager();
        M_AppManager = new MockAppManager();
        M_IInterface = new MockIInterface();
        M_BBinder = new MockBBinder();
        M_IServiceManager = new MockIServiceManager();
        M_IPowerManagerService = new MockIPowerManagerService();
        M_Handler = new MockHandler();
        M_MockConfigurationManagerService = new MockConfigurationManagerService();
        M_OEMCallAppIF = new MockOEMCallAppIF();
        M_HMIManager = new MockHMIManager();
        
    }
    virtual void TearDown(){
        delete M_ReceiverManager;
        delete M_AppManager;
        delete M_IServiceManager;
        delete M_IInterface;
        delete M_BBinder;
        delete M_IPowerManagerService;
        delete M_Handler;
        delete M_MockConfigurationManagerService;
        delete M_HMIManager;
    }
};

/**
 *   @brief This is a test script for the ReceiverManager_ReceiverManager function
 *   @classID ReceiverManager
 *   @methodID ReceiverManager
 *   @paramList android::sp<OemCallHandler> spHandler
 *   @priority P2
 *   @resolution_Method
 *   @test_condition
 *   @test_Coverage_Item
 *   @test_case_ID ReceiverManagerTest_ReceiverManager_TC001
 *   @test_type functionality
 *   @test_objective
 *   @test_precon
 *   @test_input
 *   @test_expected_result
 *   @test_module
 *   @design_id
 */
TEST_F(ReceiverManagerTest, ReceiverManager_ReceiverManager_TC001){
// Please enable and make test code here!!
#if 1
    // Please check source file, make mock files and insert EXPECT_CALL for callee functions.
    ReceiverManager *testObj = new ReceiverManager();
    EXPECT_EQ(Bypass, true);
#endif
}

/**
 *   @brief This is a test script for the ReceiverManager_init function
 *   @classID ReceiverManager
 *   @methodID init
 *   @paramList android::sp<OemCallHandler> spHandler
 *   @priority P2
 *   @resolution_Method
 *   @test_condition
 *   @test_Coverage_Item
 *   @test_case_ID ReceiverManagerTest_init_TC001
 *   @test_type functionality
 *   @test_objective
 *   @test_precon
 *   @test_input
 *   @test_expected_result
 *   @test_module
 *   @design_id
 */
TEST_F(ReceiverManagerTest, ReceiverManager_init_TC001){
// Please enable and make test code here!!
#if 1
    // Please check source file, make mock files and insert EXPECT_CALL for callee functions.
    ReceiverManager *testObj = new ReceiverManager();
    
    bool ret_param_0 = false;
    EXPECT_CALL(*M_AppManager, getBootCompleted(_)).WillRepeatedly(Return(ret_param_0));
    error_t ret_param_2 = E_OK;
    EXPECT_CALL(*M_AppManager, registerSystemPostReceiver(_,_)).WillRepeatedly(Return(ret_param_2));

    ITestIPowerManagerService *mTestPower = new ITestIPowerManagerService();
    ITestConfigurationManagerService *mConfigManager = new ITestConfigurationManagerService();
    EXPECT_CALL(*M_IServiceManager, getService(_))
        .Times(2)
        .WillOnce(Return(mTestPower))
        .WillOnce(Return(mConfigManager));

    BBinder * pBBinder = new BBinder();
    sp<IBinder> pInterface = sp<IBinder>(pBBinder);
    EXPECT_CALL(*M_IInterface, asBinder_004(_)).WillRepeatedly(Return(pInterface));
    status_t ret_param_1 = android::OK;
    EXPECT_CALL(*M_BBinder, linkToDeath(_,_,_)).WillRepeatedly(Return(android::OK));
    EXPECT_CALL(*M_IPowerManagerService, registerPowerStateReceiver(_,_,_)).WillRepeatedly(Return(ret_param_1));
    //EXPECT_CALL(*M_MockConfigurationManagerService, registerReceiver(_,_,_)).WillRepeatedly(Return(TIGER_ERR::E_OK));
    //EXPECT_CALL(*M_Handler, sendMessageDelayed(_,_)).WillRepeatedly(Return(true));

    //HMIManager* spHMI = new HMIManager();
    //EXPECT_CALL(*M_HMIManager, instance()).WillRepeatedly(Return(spHMI));
    //EXPECT_CALL(*M_HMIManager, registerReceiver(_,_)).WillRepeatedly(Return(TIGER_ERR::E_ERROR));
    
    

    testObj->init(nullptr);
    delete testObj;
    EXPECT_EQ(Bypass, true);
#endif
}

/**
 *   @brief This is a test script for the ReceiverManager_init function
 *   @classID ReceiverManager
 *   @methodID init
 *   @paramList android::sp<OemCallHandler> spHandler
 *   @priority P2
 *   @resolution_Method
 *   @test_condition
 *   @test_Coverage_Item
 *   @test_case_ID ReceiverManagerTest_init_TC002
 *   @test_type functionality
 *   @test_objective
 *   @test_precon
 *   @test_input
 *   @test_expected_result
 *   @test_module
 *   @design_id
 */
TEST_F(ReceiverManagerTest, ReceiverManager_init_TC002){
// Please enable and make test code here!!
#if 1
    // Please check source file, make mock files and insert EXPECT_CALL for callee functions.
    ReceiverManager *testObj = new ReceiverManager();
    sp<sl::SLLooper> looper = new sl::SLLooper();
    MockOEMCallAppIF& app_ = *M_OEMCallAppIF;
    android::sp<OemCallHandler> spHandler_ = new OemCallHandler(looper, app_);
    
    bool ret_param_0 = false;
    EXPECT_CALL(*M_AppManager, getBootCompleted(_)).WillRepeatedly(Return(ret_param_0));
    error_t ret_param_2 = E_OK;
    EXPECT_CALL(*M_AppManager, registerSystemPostReceiver(_,_)).WillRepeatedly(Return(ret_param_2));

    ITestIPowerManagerService *mTestPower = new ITestIPowerManagerService();
    ITestConfigurationManagerService *mConfigManager = new ITestConfigurationManagerService();
    EXPECT_CALL(*M_IServiceManager, getService(_))
        .Times(2)
        .WillOnce(Return(mTestPower))
        .WillOnce(Return(mConfigManager));

    BBinder * pBBinder = new BBinder();
    sp<IBinder> pInterface = sp<IBinder>(pBBinder);
    EXPECT_CALL(*M_IInterface, asBinder_004(_)).WillRepeatedly(Return(pInterface));
    status_t ret_param_1 = android::OK;
    EXPECT_CALL(*M_BBinder, linkToDeath(_,_,_)).WillRepeatedly(Return(android::OK));
    // EXPECT_CALL(*M_IPowerManagerService, registerPowerStateReceiver(_,_,_)).WillRepeatedly(Return(ret_param_1));
    // EXPECT_CALL(*M_MockConfigurationManagerService, registerReceiver(_,_,_)).WillRepeatedly(Return(TIGER_ERR::E_OK));
    // EXPECT_CALL(*M_Handler, sendMessageDelayed(_,_)).WillRepeatedly(Return(true));
    testObj->init(spHandler_);
    delete testObj;
    EXPECT_EQ(Bypass, true);
#endif
}

/**
 *   @brief This is a test script for the ReceiverManager_init function
 *   @classID ReceiverManager
 *   @methodID init
 *   @paramList android::sp<OemCallHandler> spHandler
 *   @priority P2
 *   @resolution_Method
 *   @test_condition
 *   @test_Coverage_Item
 *   @test_case_ID ReceiverManagerTest_init_TC003
 *   @test_type functionality
 *   @test_objective
 *   @test_precon
 *   @test_input
 *   @test_expected_result
 *   @test_module
 *   @design_id
 */
TEST_F(ReceiverManagerTest, ReceiverManager_init_TC003){
// Please enable and make test code here!!
#if 0
    // Please check source file, make mock files and insert EXPECT_CALL for callee functions.
    ReceiverManager *testObj = new ReceiverManager();
    sp<sl::SLLooper> looper = new sl::SLLooper();
    MockOEMCallAppIF& app_ = *M_OEMCallAppIF;
    android::sp<OemCallHandler> spHandler_ = new OemCallHandler(looper, app_);
    bool ret_param_0 = false;
    EXPECT_CALL(*M_AppManager, getBootCompleted(_)).WillRepeatedly(Return(ret_param_0));
    error_t ret_param_2 = E_OK;
    EXPECT_CALL(*M_AppManager, registerSystemPostReceiver(_,_)).WillRepeatedly(Return(ret_param_2));

    ITestIPowerManagerService *mTestPower = new ITestIPowerManagerService();
    ITestConfigurationManagerService *mConfigManager = new ITestConfigurationManagerService();
    EXPECT_CALL(*M_IServiceManager, getService(_))
        .Times(3)
        .WillOnce(Return(mTestPower))
        .WillOnce(Return(mConfigManager));

    BBinder * pBBinder = new BBinder();
    sp<IBinder> pInterface = sp<IBinder>(pBBinder);
    EXPECT_CALL(*M_IInterface, asBinder_004(_)).WillRepeatedly(Return(pInterface));
    status_t ret_param_1 = android::OK;
    EXPECT_CALL(*M_BBinder, linkToDeath(_,_,_)).WillRepeatedly(Return(android::OK));
    EXPECT_CALL(*M_IPowerManagerService, registerPowerStateReceiver(_,_,_)).WillRepeatedly(Return(ret_param_1));
    EXPECT_CALL(*M_MockConfigurationManagerService, registerReceiver(_,_,_)).WillRepeatedly(Return(TIGER_ERR::E_OK));
    EXPECT_CALL(*M_Handler, sendMessageDelayed(_,_)).WillRepeatedly(Return(true));
    testObj->init(spHandler_);
    delete testObj;
    EXPECT_EQ(Bypass, true);
#endif
}


/**
 *   @brief This is a test script for the ReceiverManager_getHandler function
 *   @classID ReceiverManager
 *   @methodID getHandler
 *   @paramList 
 *   @priority P2
 *   @resolution_Method
 *   @test_condition
 *   @test_Coverage_Item
 *   @test_case_ID ReceiverManagerTest_getHandler_TC001
 *   @test_type functionality
 *   @test_objective
 *   @test_precon
 *   @test_input
 *   @test_expected_result
 *   @test_module
 *   @design_id
 */
TEST_F(ReceiverManagerTest, ReceiverManager_getHandler_TC001){
// Please enable and make test code here!!
#if 1
    // Please check source file, make mock files and insert EXPECT_CALL for callee functions.
    ReceiverManager *testObj = new ReceiverManager();
    testObj->getHandler();
    delete testObj;
    EXPECT_EQ(Bypass, true);
#endif
}

/**
 *   @brief This is a test script for the ReceiverManager_getHandler function
 *   @classID ReceiverManager
 *   @methodID getHandler
 *   @paramList 
 *   @priority P2
 *   @resolution_Method
 *   @test_condition
 *   @test_Coverage_Item
 *   @test_case_ID ReceiverManagerTest_getHandler_TC002
 *   @test_type functionality
 *   @test_objective
 *   @test_precon
 *   @test_input
 *   @test_expected_result
 *   @test_module
 *   @design_id
 */
TEST_F(ReceiverManagerTest, ReceiverManager_getHandler_TC002){
// Please enable and make test code here!!
#if 1
    // Please check source file, make mock files and insert EXPECT_CALL for callee functions.
    ReceiverManager *testObj = new ReceiverManager();
    testObj->getHandler();
    delete testObj;
    EXPECT_EQ(Bypass, true);
#endif
}

/**
 *   @brief This is a test script for the ReceiverManager_getHandler function
 *   @classID ReceiverManager
 *   @methodID getHandler
 *   @paramList 
 *   @priority P2
 *   @resolution_Method
 *   @test_condition
 *   @test_Coverage_Item
 *   @test_case_ID ReceiverManagerTest_getHandler_TC003
 *   @test_type functionality
 *   @test_objective
 *   @test_precon
 *   @test_input
 *   @test_expected_result
 *   @test_module
 *   @design_id
 */
TEST_F(ReceiverManagerTest, ReceiverManager_getHandler_TC003){
// Please enable and make test code here!!
#if 1
    // Please check source file, make mock files and insert EXPECT_CALL for callee functions.
    ReceiverManager *testObj = new ReceiverManager();
    testObj->getHandler();
    delete testObj;
    EXPECT_EQ(Bypass, true);
#endif
}

/**
 *   @brief This is a test script for the ReceiverManager_onBinderDied function
 *   @classID ReceiverManager
 *   @methodID onBinderDied
 *   @paramList const android::wp<android::IBinder>& who
 *   @priority P2
 *   @resolution_Method
 *   @test_condition
 *   @test_Coverage_Item
 *   @test_case_ID ReceiverManagerTest_onBinderDied_TC001
 *   @test_type functionality
 *   @test_objective
 *   @test_precon
 *   @test_input
 *   @test_expected_result
 *   @test_module
 *   @design_id
 */
TEST_F(ReceiverManagerTest, ReceiverManager_onBinderDied_TC001)
{
    for (int i {}; i < 2; i++)
    {
        ReceiverManager *testObj = new ReceiverManager();
        BBinder* pBBinder = new BBinder();
        sp<IBinder> pInterface = sp<IBinder>(pBBinder);
        switch (i)
        {
            case 0:
            {
                EXPECT_CALL(*M_IInterface, asBinder_004(_)).Times(1).WillOnce(Return(pInterface));
            }
            break;

            case 1:
            {
                EXPECT_CALL(*M_IInterface, asBinder_004(_)).Times(2)
                                                        .WillOnce(Return(nullptr))
                                                        .WillOnce(Return(pInterface));

            }
            break;

            default:
            break;
        }

        EXPECT_CALL(*M_Handler, obtainMessage_003(_,_)).WillRepeatedly(Return(sp<sl::Message>(new sl::Message)));
        EXPECT_CALL(*M_Handler, sendMessageDelayed(_,_)).WillRepeatedly(Return(false));
        testObj->impl_->onBinderDied(wp<IBinder>(pBBinder));
        delete testObj;
    }

    EXPECT_TRUE(true);
}

/**
 *   @brief This is a test script for the ReceiverManager_requestRetryRegisterReceiver function
 *   @classID ReceiverManager
 *   @methodID requestRetryRegisterReceiver
 *   @paramList uint32_t who
 *   @priority P2
 *   @resolution_Method
 *   @test_condition
 *   @test_Coverage_Item
 *   @test_case_ID ReceiverManagerTest_requestRetryRegisterReceiver_TC001
 *   @test_type functionality
 *   @test_objective
 *   @test_precon
 *   @test_input
 *   @test_expected_result
 *   @test_module
 *   @design_id
 */
TEST_F(ReceiverManagerTest, ReceiverManager_requestRetryRegisterReceiver_TC001)
{
    ReceiverManager *testObj = new ReceiverManager();
    ITestIPowerManagerService *mTestPower = new ITestIPowerManagerService();
    EXPECT_CALL(*M_IServiceManager, getService(_))
        .Times(1)
        .WillOnce(Return(mTestPower));
    BBinder * pBBinder = new BBinder();
    sp<IBinder> pInterface = sp<IBinder>(pBBinder);
    EXPECT_CALL(*M_IInterface, asBinder_004(_)).WillRepeatedly(Return(pInterface));
    EXPECT_CALL(*M_BBinder, linkToDeath(_,_,_)).WillRepeatedly(Return(android::OK));
    EXPECT_CALL(*M_IPowerManagerService, registerPowerStateReceiver(_,_,_)).WillRepeatedly(Return(android::OK));
    EXPECT_CALL(*M_Handler, sendMessageDelayed(_,_)).WillRepeatedly(Return(true));
    testObj->requestRetryRegisterReceiver(self::ServiceId::POWER);
    delete testObj;
    EXPECT_EQ(Bypass, true);
}

/**
 *   @brief This is a test script for the ReceiverManager_requestRetryRegisterReceiver function
 *   @classID ReceiverManager
 *   @methodID requestRetryRegisterReceiver
 *   @paramList uint32_t who
 *   @priority P2
 *   @resolution_Method
 *   @test_condition
 *   @test_Coverage_Item
 *   @test_case_ID ReceiverManagerTest_requestRetryRegisterReceiver_TC002
 *   @test_type functionality
 *   @test_objective
 *   @test_precon
 *   @test_input
 *   @test_expected_result
 *   @test_module
 *   @design_id
 */
TEST_F(ReceiverManagerTest, ReceiverManager_requestRetryRegisterReceiver_TC002)
{
    ReceiverManager *testObj = new ReceiverManager();
    EXPECT_CALL(*M_Handler, sendMessageDelayed(_,_)).WillRepeatedly(Return(true));
    testObj->requestRetryRegisterReceiver(self::ServiceId::HMI);
    delete testObj;
    EXPECT_EQ(Bypass, true);
}

/**
 *   @brief This is a test script for the ReceiverManager_requestRetryRegisterReceiver function
 *   @classID ReceiverManager
 *   @methodID requestRetryRegisterReceiver
 *   @paramList uint32_t who
 *   @priority P2
 *   @resolution_Method
 *   @test_condition
 *   @test_Coverage_Item
 *   @test_case_ID ReceiverManagerTest_requestRetryRegisterReceiver_TC003
 *   @test_type functionality
 *   @test_objective
 *   @test_precon
 *   @test_input
 *   @test_expected_result
 *   @test_module
 *   @design_id
 */
TEST_F(ReceiverManagerTest, ReceiverManager_requestRetryRegisterReceiver_TC003)
{
    ReceiverManager *testObj = new ReceiverManager();
    ITestConfigurationManagerService *mConfigManager = new ITestConfigurationManagerService();
    EXPECT_CALL(*M_IServiceManager, getService(_))
        .Times(1)
        .WillOnce(Return(mConfigManager));
    BBinder * pBBinder = new BBinder();
    sp<IBinder> pInterface = sp<IBinder>(pBBinder);
    EXPECT_CALL(*M_IInterface, asBinder_004(_)).WillRepeatedly(Return(pInterface));
    EXPECT_CALL(*M_BBinder, linkToDeath(_,_,_)).WillRepeatedly(Return(android::OK));
    EXPECT_CALL(*M_MockConfigurationManagerService, registerReceiver(_,_,_)).WillRepeatedly(Return(TIGER_ERR::E_OK));
    EXPECT_CALL(*M_Handler, sendMessageDelayed(_,_)).WillRepeatedly(Return(true));
    testObj->requestRetryRegisterReceiver(self::ServiceId::CONFIG);
    delete testObj;
    EXPECT_EQ(Bypass, true);
}

/**
 *   @brief This is a test script for the ReceiverManager_requestRetryRegisterReceiver function
 *   @classID ReceiverManager
 *   @methodID requestRetryRegisterReceiver
 *   @paramList uint32_t who
 *   @priority P2
 *   @resolution_Method
 *   @test_condition
 *   @test_Coverage_Item
 *   @test_case_ID ReceiverManagerTest_requestRetryRegisterReceiver_TC004
 *   @test_type functionality
 *   @test_objective
 *   @test_precon
 *   @test_input
 *   @test_expected_result
 *   @test_module
 *   @design_id
 */
TEST_F(ReceiverManagerTest, ReceiverManager_requestRetryRegisterReceiver_TC004){
    ReceiverManager *testObj = new ReceiverManager();
    EXPECT_CALL(*M_Handler, sendMessageDelayed(_,_)).WillRepeatedly(Return(true));
    testObj->requestRetryRegisterReceiver(self::ServiceId::COMM);
    delete testObj;
    EXPECT_EQ(Bypass, true);
}

/**
 *   @brief This is a test script for the ReceiverManager_requestRetryRegisterReceiver function
 *   @classID ReceiverManager
 *   @methodID requestRetryRegisterReceiver
 *   @paramList uint32_t who
 *   @priority P2
 *   @resolution_Method
 *   @test_condition
 *   @test_Coverage_Item
 *   @test_case_ID ReceiverManagerTest_requestRetryRegisterReceiver_TC005
 *   @test_type functionality
 *   @test_objective
 *   @test_precon
 *   @test_input
 *   @test_expected_result
 *   @test_module
 *   @design_id
 */
TEST_F(ReceiverManagerTest, ReceiverManager_requestRetryRegisterReceiver_TC005){
    ReceiverManager *testObj = new ReceiverManager();
    testObj->requestRetryRegisterReceiver(self::ServiceId::SOMEIP);
    delete testObj;
    EXPECT_EQ(Bypass, true);
}

/**
 *   @brief This is a test script for the ReceiverManager_registerPowerService function
 *   @classID ReceiverManager
 *   @methodID registerPowerService
 *   @paramList uint32_t who
 *   @priority P2
 *   @resolution_Method
 *   @test_condition
 *   @test_Coverage_Item
 *   @test_case_ID ReceiverManager_registerPowerService_TC001
 *   @test_type functionality
 *   @test_objective
 *   @test_precon
 *   @test_input
 *   @test_expected_result
 *   @test_module
 *   @design_id
 */
TEST_F(ReceiverManagerTest, ReceiverManager_registerPowerService_TC001){
    ReceiverManager *testObj = new ReceiverManager();

    EXPECT_CALL(*M_IServiceManager, getService(_))
        .Times(1)
        .WillOnce(Return(nullptr));
    EXPECT_CALL(*M_Handler, sendMessageDelayed(_,_)).WillRepeatedly(Return(true));
    testObj->impl_->registerPowerService();
    delete testObj;
    EXPECT_EQ(Bypass, true);
}

/**
 *   @brief This is a test script for the ReceiverManager_registerPowerService function
 *   @classID ReceiverManager
 *   @methodID registerPowerService
 *   @paramList uint32_t who
 *   @priority P2
 *   @resolution_Method
 *   @test_condition
 *   @test_Coverage_Item
 *   @test_case_ID ReceiverManager_registerPowerService_TC002
 *   @test_type functionality
 *   @test_objective
 *   @test_precon
 *   @test_input
 *   @test_expected_result
 *   @test_module
 *   @design_id
 */
TEST_F(ReceiverManagerTest, ReceiverManager_registerPowerService_TC002){
    ReceiverManager *testObj = new ReceiverManager();
    ITestIPowerManagerService *mTestPower = new ITestIPowerManagerService();
    EXPECT_CALL(*M_IServiceManager, getService(_)).WillRepeatedly(Return(mTestPower));
    BBinder * pBBinder = new BBinder();
    sp<IBinder> pInterface = sp<IBinder>(pBBinder);
    EXPECT_CALL(*M_IInterface, asBinder_004(_)).WillRepeatedly(Return(pInterface));
    EXPECT_CALL(*M_BBinder, linkToDeath(_,_,_)).WillRepeatedly(Return(android::OK));
    EXPECT_CALL(*M_IPowerManagerService, registerPowerStateReceiver(_,_,_)).WillRepeatedly(Return(TIGER_ERR::E_OK));
    EXPECT_CALL(*M_Handler, sendMessageDelayed(_,_)).WillRepeatedly(Return(true));
    
    testObj->impl_->registerPowerService();
    delete testObj;
    EXPECT_EQ(Bypass, true);
}

/**
 *   @brief This is a test script for the ReceiverManager_registerPowerService function
 *   @classID ReceiverManager
 *   @methodID registerPowerService
 *   @paramList uint32_t who
 *   @priority P2
 *   @resolution_Method
 *   @test_condition
 *   @test_Coverage_Item
 *   @test_case_ID ReceiverManager_registerPowerService_TC003
 *   @test_type functionality
 *   @test_objective
 *   @test_precon
 *   @test_input
 *   @test_expected_result
 *   @test_module
 *   @design_id
 */
TEST_F(ReceiverManagerTest, ReceiverManager_registerPowerService_TC003){
    ReceiverManager *testObj = new ReceiverManager();

    ITestIPowerManagerService *mTestPower = new ITestIPowerManagerService();
    EXPECT_CALL(*M_IServiceManager, getService(_))
        .Times(1)
        .WillOnce(Return(mTestPower));

    BBinder * pBBinder = new BBinder();
    sp<IBinder> pInterface = sp<IBinder>(pBBinder);
    EXPECT_CALL(*M_IInterface, asBinder_004(_)).WillRepeatedly(Return(pInterface));
    EXPECT_CALL(*M_BBinder, linkToDeath(_,_,_)).WillRepeatedly(Return(android::OK));
    EXPECT_CALL(*M_IPowerManagerService, registerPowerStateReceiver(_,_,_)).WillRepeatedly(Return(TIGER_ERR::E_ERROR));
    EXPECT_CALL(*M_Handler, sendMessageDelayed(_,_)).WillRepeatedly(Return(true));
    testObj->impl_->registerPowerService();
    delete testObj;
    EXPECT_EQ(Bypass, true);
}

/**
 *   @brief This is a test script for the ReceiverManager_registerPowerService function
 *   @classID ReceiverManager
 *   @methodID registerPowerService
 *   @paramList uint32_t who
 *   @priority P2
 *   @resolution_Method
 *   @test_condition
 *   @test_Coverage_Item
 *   @test_case_ID ReceiverManager_registerPowerService_TC004
 *   @test_type functionality
 *   @test_objective
 *   @test_precon
 *   @test_input
 *   @test_expected_result
 *   @test_module
 *   @design_id
 */
TEST_F(ReceiverManagerTest, ReceiverManager_registerPowerService_TC004){
// Please enable and make test code here!!
#if 1
    // Please check source file, make mock files and insert EXPECT_CALL for callee functions.
    ReceiverManager *testObj = new ReceiverManager();

    ITestIPowerManagerService *mTestPower = new ITestIPowerManagerService();
    EXPECT_CALL(*M_IServiceManager, getService(_))
        .Times(1)
        .WillOnce(Return(mTestPower));

    BBinder * pBBinder = new BBinder();
    sp<IBinder> pInterface = sp<IBinder>(pBBinder);
    EXPECT_CALL(*M_IInterface, asBinder_004(_)).WillRepeatedly(Return(pInterface));
    EXPECT_CALL(*M_BBinder, linkToDeath(_,_,_)).WillRepeatedly(Return(-1));
    EXPECT_CALL(*M_IPowerManagerService, registerPowerStateReceiver(_,_,_)).WillRepeatedly(Return(TIGER_ERR::E_ERROR));
    EXPECT_CALL(*M_Handler, sendMessageDelayed(_,_)).WillRepeatedly(Return(true));
    testObj->impl_->registerPowerService();
    delete testObj;
    EXPECT_EQ(Bypass, true);
#endif
}

/**
 *   @brief This is a test script for the ReceiverManager_registerPowerService function
 *   @classID ReceiverManager
 *   @methodID registerPowerService
 *   @paramList uint32_t who
 *   @priority P2
 *   @resolution_Method
 *   @test_condition
 *   @test_Coverage_Item
 *   @test_case_ID ReceiverManager_registerPowerService_TC005
 *   @test_type functionality
 *   @test_objective
 *   @test_precon
 *   @test_input
 *   @test_expected_result
 *   @test_module
 *   @design_id
 */
TEST_F(ReceiverManagerTest, ReceiverManager_registerPowerService_TC005){
// Please enable and make test code here!!
#if 1
    // Please check source file, make mock files and insert EXPECT_CALL for callee functions.
    ReceiverManager *testObj = new ReceiverManager();
    ITestIPowerManagerService *mTestPower = new ITestIPowerManagerService();
    EXPECT_CALL(*M_IServiceManager, getService(_))
        .Times(1)
        .WillOnce(Return(mTestPower));

    BBinder * pBBinder = new BBinder();
    sp<IBinder> pInterface = sp<IBinder>(pBBinder);
    EXPECT_CALL(*M_IInterface, asBinder_004(_)).WillRepeatedly(Return(pInterface));
    EXPECT_CALL(*M_BBinder, linkToDeath(_,_,_)).WillRepeatedly(Return(-1));
    EXPECT_CALL(*M_IPowerManagerService, registerPowerStateReceiver(_,_,_)).WillRepeatedly(Return(TIGER_ERR::E_OK));
    EXPECT_CALL(*M_Handler, sendMessageDelayed(_,_)).WillRepeatedly(Return(true));
    testObj->impl_->registerPowerService();
    delete testObj;
    EXPECT_EQ(Bypass, true);
#endif
}


/**
 *   @brief This is a test script for the ReceiverManager_registerConfigService function
 *   @classID ReceiverManager
 *   @methodID registerConfigService
 *   @paramList uint32_t who
 *   @priority P2
 *   @resolution_Method
 *   @test_condition
 *   @test_Coverage_Item
 *   @test_case_ID ReceiverManager_registerConfigService_TC001
 *   @test_type functionality
 *   @test_objective
 *   @test_precon
 *   @test_input
 *   @test_expected_result
 *   @test_module
 *   @design_id
 */
TEST_F(ReceiverManagerTest, ReceiverManager_registerConfigService_TC001){
// Please enable and make test code here!!
#if 1
    // Please check source file, make mock files and insert EXPECT_CALL for callee functions.
    ReceiverManager *testObj = new ReceiverManager();

    EXPECT_CALL(*M_IServiceManager, getService(_)).WillRepeatedly(Return(nullptr));
    EXPECT_CALL(*M_Handler, sendMessageDelayed(_,_)).WillRepeatedly(Return(true));
    testObj->impl_->registerConfigService();
    delete testObj;
    EXPECT_EQ(Bypass, true);
#endif
}

/**
 *   @brief This is a test script for the ReceiverManager_registerConfigService function
 *   @classID ReceiverManager
 *   @methodID registerConfigService
 *   @paramList uint32_t who
 *   @priority P2
 *   @resolution_Method
 *   @test_condition
 *   @test_Coverage_Item
 *   @test_case_ID ReceiverManager_registerConfigService_TC002
 *   @test_type functionality
 *   @test_objective
 *   @test_precon
 *   @test_input
 *   @test_expected_result
 *   @test_module
 *   @design_id
 */
TEST_F(ReceiverManagerTest, ReceiverManager_registerConfigService_TC002){
// Please enable and make test code here!!
#if 1
    // Please check source file, make mock files and insert EXPECT_CALL for callee functions.
    ReceiverManager *testObj = new ReceiverManager();

    ITestConfigurationManagerService *mConfigManager = new ITestConfigurationManagerService();
    EXPECT_CALL(*M_IServiceManager, getService(_)).WillRepeatedly(Return(mConfigManager));
    BBinder * pBBinder = new BBinder();
    sp<IBinder> pInterface = sp<IBinder>(pBBinder);
    EXPECT_CALL(*M_IInterface, asBinder_004(_)).WillRepeatedly(Return(pInterface));
    EXPECT_CALL(*M_BBinder, linkToDeath(_,_,_)).WillRepeatedly(Return(android::OK));
    EXPECT_CALL(*M_MockConfigurationManagerService, registerReceiver(_,_,_)).WillRepeatedly(Return(TIGER_ERR::E_OK));
    EXPECT_CALL(*M_Handler, sendMessageDelayed(_,_)).WillRepeatedly(Return(true));
    
    
    testObj->impl_->registerConfigService();
    delete testObj;
    EXPECT_EQ(Bypass, true);
#endif
}

/**
 *   @brief This is a test script for the ReceiverManager_registerConfigService function
 *   @classID ReceiverManager
 *   @methodID registerConfigService
 *   @paramList uint32_t who
 *   @priority P2
 *   @resolution_Method
 *   @test_condition
 *   @test_Coverage_Item
 *   @test_case_ID ReceiverManager_registerConfigService_TC003
 *   @test_type functionality
 *   @test_objective
 *   @test_precon
 *   @test_input
 *   @test_expected_result
 *   @test_module
 *   @design_id
 */
TEST_F(ReceiverManagerTest, ReceiverManager_registerConfigService_TC003){
// Please enable and make test code here!!
#if 1
    // Please check source file, make mock files and insert EXPECT_CALL for callee functions.
    ReceiverManager *testObj = new ReceiverManager();

    ITestConfigurationManagerService *mConfigManager = new ITestConfigurationManagerService();
    EXPECT_CALL(*M_IServiceManager, getService(_)).WillRepeatedly(Return(mConfigManager));
    BBinder * pBBinder = new BBinder();
    sp<IBinder> pInterface = sp<IBinder>(pBBinder);
    EXPECT_CALL(*M_IInterface, asBinder_004(_)).WillRepeatedly(Return(pInterface));
    EXPECT_CALL(*M_BBinder, linkToDeath(_,_,_)).WillRepeatedly(Return(android::OK));
    EXPECT_CALL(*M_MockConfigurationManagerService, registerReceiver(_,_,_)).WillRepeatedly(Return(TIGER_ERR::E_ERROR));
    EXPECT_CALL(*M_Handler, sendMessageDelayed(_,_)).WillRepeatedly(Return(true));
    testObj->impl_->registerConfigService();
    delete testObj;
    EXPECT_EQ(Bypass, true);
#endif
}

/**
 *   @brief This is a test script for the ReceiverManager_registerConfigService function
 *   @classID ReceiverManager
 *   @methodID registerConfigService
 *   @paramList uint32_t who
 *   @priority P2
 *   @resolution_Method
 *   @test_condition
 *   @test_Coverage_Item
 *   @test_case_ID ReceiverManager_registerConfigService_TC004
 *   @test_type functionality
 *   @test_objective
 *   @test_precon
 *   @test_input
 *   @test_expected_result
 *   @test_module
 *   @design_id
 */
TEST_F(ReceiverManagerTest, ReceiverManager_registerConfigService_TC004){
// Please enable and make test code here!!
#if 1
    // Please check source file, make mock files and insert EXPECT_CALL for callee functions.
    ReceiverManager *testObj = new ReceiverManager();

    ITestConfigurationManagerService *mConfigManager = new ITestConfigurationManagerService();
    EXPECT_CALL(*M_IServiceManager, getService(_)).WillRepeatedly(Return(mConfigManager));
    BBinder * pBBinder = new BBinder();
    sp<IBinder> pInterface = sp<IBinder>(pBBinder);
    EXPECT_CALL(*M_IInterface, asBinder_004(_)).WillRepeatedly(Return(pInterface));
    EXPECT_CALL(*M_BBinder, linkToDeath(_,_,_)).WillRepeatedly(Return(-1));
    EXPECT_CALL(*M_MockConfigurationManagerService, registerReceiver(_,_,_)).WillRepeatedly(Return(TIGER_ERR::E_OK));
    EXPECT_CALL(*M_Handler, sendMessageDelayed(_,_)).WillRepeatedly(Return(true));
    testObj->impl_->registerConfigService();
    delete testObj;
    EXPECT_EQ(Bypass, true);
#endif
}

/**
 *   @brief This is a test script for the ReceiverManager_registerConfigService function
 *   @classID ReceiverManager
 *   @methodID registerConfigService
 *   @paramList uint32_t who
 *   @priority P2
 *   @resolution_Method
 *   @test_condition
 *   @test_Coverage_Item
 *   @test_case_ID ReceiverManager_registerConfigService_TC005
 *   @test_type functionality
 *   @test_objective
 *   @test_precon
 *   @test_input
 *   @test_expected_result
 *   @test_module
 *   @design_id
 */
TEST_F(ReceiverManagerTest, ReceiverManager_registerConfigService_TC005){
// Please enable and make test code here!!
#if 1
    // Please check source file, make mock files and insert EXPECT_CALL for callee functions.
    ReceiverManager *testObj = new ReceiverManager();

    ITestConfigurationManagerService *mConfigManager = new ITestConfigurationManagerService();
    EXPECT_CALL(*M_IServiceManager, getService(_)).WillRepeatedly(Return(mConfigManager));
    BBinder * pBBinder = new BBinder();
    sp<IBinder> pInterface = sp<IBinder>(pBBinder);
    EXPECT_CALL(*M_IInterface, asBinder_004(_)).WillRepeatedly(Return(pInterface));
    EXPECT_CALL(*M_BBinder, linkToDeath(_,_,_)).WillRepeatedly(Return(-1));
    EXPECT_CALL(*M_MockConfigurationManagerService, registerReceiver(_,_,_)).WillRepeatedly(Return(TIGER_ERR::E_ERROR));
    EXPECT_CALL(*M_Handler, sendMessageDelayed(_,_)).WillRepeatedly(Return(true));
    testObj->impl_->registerConfigService();
    delete testObj;
    EXPECT_EQ(Bypass, true);
#endif
}

/**
 *   @brief This is a test script for the ReceiverManager_registerHMIReceiver function
 *   @classID ReceiverManager
 *   @methodID registerHMIReceiver
 *   @paramList uint32_t who
 *   @priority P2
 *   @resolution_Method
 *   @test_condition
 *   @test_Coverage_Item
 *   @test_case_ID ReceiverManager_registerHMIReceiver_TC001
 *   @test_type functionality
 *   @test_objective
 *   @test_precon
 *   @test_input
 *   @test_expected_result
 *   @test_module
 *   @design_id
 */
TEST_F(ReceiverManagerTest, ReceiverManager_registerHMIReceiver_TC001){
// Please enable and make test code here!!
#if 1
    // Please check source file, make mock files and insert EXPECT_CALL for callee functions.
    ReceiverManager *testObj = new ReceiverManager();
    EXPECT_CALL(*M_HMIManager, instance()).WillRepeatedly(Return(nullptr));
    EXPECT_CALL(*M_Handler, sendMessageDelayed(_,_)).WillRepeatedly(Return(true));
    testObj->impl_->registerHMIReceiver();
    delete testObj;
    EXPECT_EQ(Bypass, true);
#endif
}

/**
 *   @brief This is a test script for the ReceiverManager_registerHMIReceiver function
 *   @classID ReceiverManager
 *   @methodID registerHMIReceiver
 *   @paramList uint32_t who
 *   @priority P2
 *   @resolution_Method
 *   @test_condition
 *   @test_Coverage_Item
 *   @test_case_ID ReceiverManager_registerHMIReceiver_TC002
 *   @test_type functionality
 *   @test_objective
 *   @test_precon
 *   @test_input
 *   @test_expected_result
 *   @test_module
 *   @design_id
 */
TEST_F(ReceiverManagerTest, ReceiverManager_registerHMIReceiver_TC002){
// Please enable and make test code here!!
#if 1
    // Please check source file, make mock files and insert EXPECT_CALL for callee functions.
    ReceiverManager *testObj = new ReceiverManager();
    HMIManager* spHMI = new HMIManager();
    EXPECT_CALL(*M_HMIManager, instance()).WillRepeatedly(Return(spHMI));
    EXPECT_CALL(*M_HMIManager, registerReceiver(_,_)).WillRepeatedly(Return(TIGER_ERR::E_OK));
    testObj->impl_->registerHMIReceiver();
    delete testObj;
    EXPECT_EQ(Bypass, true);
#endif
}

/**
 *   @brief This is a test script for the ReceiverManager_registerHMIReceiver function
 *   @classID ReceiverManager
 *   @methodID registerHMIReceiver
 *   @paramList uint32_t who
 *   @priority P2
 *   @resolution_Method
 *   @test_condition
 *   @test_Coverage_Item
 *   @test_case_ID ReceiverManager_registerHMIReceiver_TC003
 *   @test_type functionality
 *   @test_objective
 *   @test_precon
 *   @test_input
 *   @test_expected_result
 *   @test_module
 *   @design_id
 */
TEST_F(ReceiverManagerTest, ReceiverManager_registerHMIReceiver_TC003){
// Please enable and make test code here!!
#if 1
    // Please check source file, make mock files and insert EXPECT_CALL for callee functions.
    ReceiverManager *testObj = new ReceiverManager();
    HMIManager* spHMI = new HMIManager();
    EXPECT_CALL(*M_HMIManager, instance()).WillRepeatedly(Return(spHMI));
    EXPECT_CALL(*M_HMIManager, registerReceiver(_,_)).WillRepeatedly(Return(TIGER_ERR::E_ERROR));
    EXPECT_CALL(*M_Handler, sendMessageDelayed(_,_)).WillRepeatedly(Return(true));
    testObj->impl_->registerHMIReceiver();
    delete testObj;
    EXPECT_EQ(Bypass, true);
#endif
}

/**
 *   @brief This is a test script for the ReceiverManager_onHMIReceived function
 *   @classID ReceiverManager
 *   @methodID onHMIReceived
 *   @paramList uint32_t who
 *   @priority P2
 *   @resolution_Method
 *   @test_condition
 *   @test_Coverage_Item
 *   @test_case_ID ReceiverManager_onHMIReceived_TC001
 *   @test_type functionality
 *   @test_objective
 *   @test_precon
 *   @test_input
 *   @test_expected_result
 *   @test_module
 *   @design_id
 */
TEST_F(ReceiverManagerTest, ReceiverManager_onHMIReceived_TC001){
// Please enable and make test code here!!
#if 1
    // Please check source file, make mock files and insert EXPECT_CALL for callee functions.
    ReceiverManager *testObj = new ReceiverManager();
    testObj->impl_->spHmiReceiver = new HMIReiceiver(*testObj);
    sp<sl::Message> ret_param_0 = sp<sl::Message>(new sl::Message);
    EXPECT_CALL(*M_Handler, obtainMessage_005(_,_,_)).WillRepeatedly(Return(ret_param_0));
    uint32_t type = HMI_TYPE_BUTTON;
    uint32_t index = 0x00;
    uint32_t action = 0x00;
    testObj->impl_->spHmiReceiver->onHMIReceived(type, index, action);
    delete testObj;
    EXPECT_EQ(Bypass, true);
#endif
}

/**
 *   @brief This is a test script for the ReceiverManager_onHMIReceived function
 *   @classID ReceiverManager
 *   @methodID onHMIReceived
 *   @paramList uint32_t who
 *   @priority P2
 *   @resolution_Method
 *   @test_condition
 *   @test_Coverage_Item
 *   @test_case_ID ReceiverManager_onHMIReceived_TC002
 *   @test_type functionality
 *   @test_objective
 *   @test_precon
 *   @test_input
 *   @test_expected_result
 *   @test_module
 *   @design_id
 */
TEST_F(ReceiverManagerTest, ReceiverManager_onHMIReceived_TC002){
// Please enable and make test code here!!
#if 1
    // Please check source file, make mock files and insert EXPECT_CALL for callee functions.
    ReceiverManager *testObj = new ReceiverManager();
    testObj->impl_->spHmiReceiver = new HMIReiceiver(*testObj);
    sp<sl::Message> ret_param_0 = sp<sl::Message>(new sl::Message);
    EXPECT_CALL(*M_Handler, obtainMessage_005(_,_,_)).WillRepeatedly(Return(ret_param_0));
    uint32_t type = HMI_TYPE_LED;
    uint32_t index = 0x00;
    uint32_t action = 0x00;
    testObj->impl_->spHmiReceiver->onHMIReceived(type, index, action);
    delete testObj;
    EXPECT_EQ(Bypass, true);
#endif
}

/**
 *   @brief This is a test script for the ReceiverManager_onHMIReceived function
 *   @classID ReceiverManager
 *   @methodID onHMIReceived
 *   @paramList uint32_t who
 *   @priority P2
 *   @resolution_Method
 *   @test_condition
 *   @test_Coverage_Item
 *   @test_case_ID ReceiverManager_onHMIReceived_TC003
 *   @test_type functionality
 *   @test_objective
 *   @test_precon
 *   @test_input
 *   @test_expected_result
 *   @test_module
 *   @design_id
 */
TEST_F(ReceiverManagerTest, ReceiverManager_onHMIReceived_TC003){
// Please enable and make test code here!!
#if 1
    // Please check source file, make mock files and insert EXPECT_CALL for callee functions.
    ReceiverManager *testObj = new ReceiverManager();
    testObj->impl_->spHmiReceiver = new HMIReiceiver(*testObj);
    sp<sl::Message> ret_param_0 = sp<sl::Message>(new sl::Message);
    EXPECT_CALL(*M_Handler, obtainMessage_005(_,_,_)).WillRepeatedly(Return(ret_param_0));
    uint32_t type = HMI_TYPE_LED;
    uint32_t index = 0x00;
    uint32_t action = 0x00;
    testObj->impl_->spHmiReceiver->onHMIReceived(type, index, action);
    delete testObj;
    EXPECT_EQ(Bypass, true);
#endif
}

/**
 *   @brief This is a test script for the ReceiverManager_onPowerStateChanged function
 *   @classID ReceiverManager
 *   @methodID onPowerStateChanged
 *   @paramList uint32_t who
 *   @priority P2
 *   @resolution_Method
 *   @test_condition
 *   @test_Coverage_Item
 *   @test_case_ID ReceiverManager_onPowerStateChanged_TC001
 *   @test_type functionality
 *   @test_objective
 *   @test_precon
 *   @test_input
 *   @test_expected_result
 *   @test_module
 *   @design_id
 */
TEST_F(ReceiverManagerTest, ReceiverManager_onPowerStateChanged_TC001){
// Please enable and make test code here!!
#if 1
    // Please check source file, make mock files and insert EXPECT_CALL for callee functions.
    ReceiverManager *testObj = new ReceiverManager();
    testObj->impl_->spPowerReceiver = new PowerStateReceiver(*testObj);
    const uint32_t newState = 0x00;
    const uint32_t reason = 0x00;
    testObj->impl_->spPowerReceiver->onPowerStateChanged(newState, reason);
    delete testObj;
    EXPECT_EQ(Bypass, true);
#endif
}

/**
 *   @brief This is a test script for the ReceiverManager_onPowerStateChanged function
 *   @classID ReceiverManager
 *   @methodID onPowerStateChanged
 *   @paramList uint32_t who
 *   @priority P2
 *   @resolution_Method
 *   @test_condition
 *   @test_Coverage_Item
 *   @test_case_ID ReceiverManager_onPowerStateChanged_TC002
 *   @test_type functionality
 *   @test_objective
 *   @test_precon
 *   @test_input
 *   @test_expected_result
 *   @test_module
 *   @design_id
 */
TEST_F(ReceiverManagerTest, ReceiverManager_onPowerStateChanged_TC002){
// Please enable and make test code here!!
#if 1
    // Please check source file, make mock files and insert EXPECT_CALL for callee functions.
    ReceiverManager *testObj = new ReceiverManager();
    testObj->impl_->spPowerReceiver = new PowerStateReceiver(*testObj);
    const uint32_t newState = 0x00;
    const uint32_t reason = 0x00;
    testObj->impl_->spPowerReceiver->onPowerStateChanged(newState, reason);
    delete testObj;
    EXPECT_EQ(Bypass, true);
#endif
}

/**
 *   @brief This is a test script for the ReceiverManager_onPowerStateChanged function
 *   @classID ReceiverManager
 *   @methodID onPowerStateChanged
 *   @paramList uint32_t who
 *   @priority P2
 *   @resolution_Method
 *   @test_condition
 *   @test_Coverage_Item
 *   @test_case_ID ReceiverManager_onPowerStateChanged_TC003
 *   @test_type functionality
 *   @test_objective
 *   @test_precon
 *   @test_input
 *   @test_expected_result
 *   @test_module
 *   @design_id
 */
TEST_F(ReceiverManagerTest, ReceiverManager_onPowerStateChanged_TC003){
// Please enable and make test code here!!
#if 1
    // Please check source file, make mock files and insert EXPECT_CALL for callee functions.
    ReceiverManager *testObj = new ReceiverManager();
    testObj->impl_->spPowerReceiver = new PowerStateReceiver(*testObj);
    const uint32_t newState = 0x00;
    const uint32_t reason = 0x00;
    testObj->impl_->spPowerReceiver->onPowerStateChanged(newState, reason);
    delete testObj;
    EXPECT_EQ(Bypass, true);
#endif
}

/**
 *   @brief This is a test script for the ReceiverManager_onPowerModeChanged function
 *   @classID ReceiverManager
 *   @methodID onPowerModeChanged
 *   @paramList uint32_t who
 *   @priority P2
 *   @resolution_Method
 *   @test_condition
 *   @test_Coverage_Item
 *   @test_case_ID ReceiverManager_onPowerModeChanged_TC001
 *   @test_type functionality
 *   @test_objective
 *   @test_precon
 *   @test_input
 *   @test_expected_result
 *   @test_module
 *   @design_id
 */
TEST_F(ReceiverManagerTest, ReceiverManager_onPowerModeChanged_TC001){
// Please enable and make test code here!!
#if 1
    // Please check source file, make mock files and insert EXPECT_CALL for callee functions.
    ReceiverManager *testObj = new ReceiverManager();
    testObj->impl_->spPowerReceiver = new PowerStateReceiver(*testObj);
    sp<sl::Message> ret_param_0 = sp<sl::Message>(new sl::Message);
    EXPECT_CALL(*M_Handler, obtainMessage_003(_,_)).WillRepeatedly(Return(ret_param_0));
    const uint32_t newMode = 0x00;
    testObj->impl_->spPowerReceiver->onPowerModeChanged(newMode);
    delete testObj;
    EXPECT_EQ(Bypass, true);
#endif
}

/**
 *   @brief This is a test script for the ReceiverManager_onPowerModeChanged function
 *   @classID ReceiverManager
 *   @methodID onPowerModeChanged
 *   @paramList uint32_t who
 *   @priority P2
 *   @resolution_Method
 *   @test_condition
 *   @test_Coverage_Item
 *   @test_case_ID ReceiverManager_onPowerModeChanged_TC002
 *   @test_type functionality
 *   @test_objective
 *   @test_precon
 *   @test_input
 *   @test_expected_result
 *   @test_module
 *   @design_id
 */
TEST_F(ReceiverManagerTest, ReceiverManager_onPowerModeChanged_TC002){
// Please enable and make test code here!!
#if 1
    // Please check source file, make mock files and insert EXPECT_CALL for callee functions.
    ReceiverManager *testObj = new ReceiverManager();
    testObj->impl_->spPowerReceiver = new PowerStateReceiver(*testObj);
    sp<sl::Message> ret_param_0 = sp<sl::Message>(new sl::Message);
    EXPECT_CALL(*M_Handler, obtainMessage_003(_,_)).WillRepeatedly(Return(ret_param_0));
    const uint32_t newMode = 0x00;
    testObj->impl_->spPowerReceiver->onPowerModeChanged(newMode);
    delete testObj;
    EXPECT_EQ(Bypass, true);
#endif
}

/**
 *   @brief This is a test script for the ReceiverManager_onPowerModeChanged function
 *   @classID ReceiverManager
 *   @methodID onPowerModeChanged
 *   @paramList uint32_t who
 *   @priority P2
 *   @resolution_Method
 *   @test_condition
 *   @test_Coverage_Item
 *   @test_case_ID ReceiverManager_onPowerModeChanged_TC003
 *   @test_type functionality
 *   @test_objective
 *   @test_precon
 *   @test_input
 *   @test_expected_result
 *   @test_module
 *   @design_id
 */
TEST_F(ReceiverManagerTest, ReceiverManager_onPowerModeChanged_TC003){
// Please enable and make test code here!!
#if 1
    // Please check source file, make mock files and insert EXPECT_CALL for callee functions.
    ReceiverManager *testObj = new ReceiverManager();
    testObj->impl_->spPowerReceiver = new PowerStateReceiver(*testObj);
    sp<sl::Message> ret_param_0 = sp<sl::Message>(new sl::Message);
    EXPECT_CALL(*M_Handler, obtainMessage_003(_,_)).WillRepeatedly(Return(ret_param_0));
    const uint32_t newMode = 0x00;
    testObj->impl_->spPowerReceiver->onPowerModeChanged(newMode);
    delete testObj;
    EXPECT_EQ(Bypass, true);
#endif
}

/**
 *   @brief This is a test script for the ReceiverManager_onExtValueChanged function
 *   @classID ReceiverManager
 *   @methodID onExtValueChanged
 *   @paramList uint32_t who
 *   @priority P2
 *   @resolution_Method
 *   @test_condition
 *   @test_Coverage_Item
 *   @test_case_ID ReceiverManager_onExtValueChanged_TC001
 *   @test_type functionality
 *   @test_objective
 *   @test_precon
 *   @test_input
 *   @test_expected_result
 *   @test_module
 *   @design_id
 */
TEST_F(ReceiverManagerTest, ReceiverManager_onExtValueChanged_TC001){
// Please enable and make test code here!!
#if 1
    // Please check source file, make mock files and insert EXPECT_CALL for callee functions.
    ReceiverManager *testObj = new ReceiverManager();
    testObj->impl_->spPowerReceiver = new PowerStateReceiver(*testObj);
    sp<sl::Message> ret_param_0 = sp<sl::Message>(new sl::Message);
    EXPECT_CALL(*M_Handler, obtainMessage_005(_,_,_)).WillRepeatedly(Return(ret_param_0));
    const int32_t listenIndex = 0x00;
    const int32_t value = 0x00;
    testObj->impl_->spPowerReceiver->onExtValueChanged(listenIndex, value);
    delete testObj;
    EXPECT_EQ(Bypass, true);
#endif
}

/**
 *   @brief This is a test script for the ReceiverManager_onExtValueChanged function
 *   @classID ReceiverManager
 *   @methodID onExtValueChanged
 *   @paramList uint32_t who
 *   @priority P2
 *   @resolution_Method
 *   @test_condition
 *   @test_Coverage_Item
 *   @test_case_ID ReceiverManager_onExtValueChanged_TC002
 *   @test_type functionality
 *   @test_objective
 *   @test_precon
 *   @test_input
 *   @test_expected_result
 *   @test_module
 *   @design_id
 */
TEST_F(ReceiverManagerTest, ReceiverManager_onExtValueChanged_TC002){
// Please enable and make test code here!!
#if 1
    // Please check source file, make mock files and insert EXPECT_CALL for callee functions.
    ReceiverManager *testObj = new ReceiverManager();
    testObj->impl_->spPowerReceiver = new PowerStateReceiver(*testObj);
    sp<sl::Message> ret_param_0 = sp<sl::Message>(new sl::Message);
    EXPECT_CALL(*M_Handler, obtainMessage_005(_,_,_)).WillRepeatedly(Return(ret_param_0));
    const int32_t listenIndex = 0x00;
    const int32_t value = 0x00;
    testObj->impl_->spPowerReceiver->onExtValueChanged(listenIndex, value);
    delete testObj;
    EXPECT_EQ(Bypass, true);
#endif
}

/**
 *   @brief This is a test script for the ReceiverManager_onExtValueChanged function
 *   @classID ReceiverManager
 *   @methodID onExtValueChanged
 *   @paramList uint32_t who
 *   @priority P2
 *   @resolution_Method
 *   @test_condition
 *   @test_Coverage_Item
 *   @test_case_ID ReceiverManager_onExtValueChanged_TC003
 *   @test_type functionality
 *   @test_objective
 *   @test_precon
 *   @test_input
 *   @test_expected_result
 *   @test_module
 *   @design_id
 */
TEST_F(ReceiverManagerTest, ReceiverManager_onExtValueChanged_TC003){
// Please enable and make test code here!!
#if 1
    // Please check source file, make mock files and insert EXPECT_CALL for callee functions.
    ReceiverManager *testObj = new ReceiverManager();
    testObj->impl_->spPowerReceiver = new PowerStateReceiver(*testObj);
    sp<sl::Message> ret_param_0 = sp<sl::Message>(new sl::Message);
    EXPECT_CALL(*M_Handler, obtainMessage_005(_,_,_)).WillRepeatedly(Return(ret_param_0));
    const int32_t listenIndex = 0x00;
    const int32_t value = 0x00;
    testObj->impl_->spPowerReceiver->onExtValueChanged(listenIndex, value);
    delete testObj;
    EXPECT_EQ(Bypass, true);
#endif
}

/**
 *   @brief This is a test script for the ReceiverManager_onConfigDataChanged function
 *   @classID ReceiverManager
 *   @methodID onConfigDataChanged
 *   @paramList uint32_t who
 *   @priority P2
 *   @resolution_Method
 *   @test_condition
 *   @test_Coverage_Item
 *   @test_case_ID ReceiverManager_onConfigDataChanged_TC001
 *   @test_type functionality
 *   @test_objective
 *   @test_precon
 *   @test_input
 *   @test_expected_result
 *   @test_module
 *   @design_id
 */
TEST_F(ReceiverManagerTest, ReceiverManager_onConfigDataChanged_TC001){
// Please enable and make test code here!!
#if 1
    // Please check source file, make mock files and insert EXPECT_CALL for callee functions.
    ReceiverManager *testObj = new ReceiverManager();
    testObj->impl_->spConfigReceiver = new ConfigReceiverImpl(*testObj);
    sp<sl::Message> ret_param_0 = sp<sl::Message>(new sl::Message);
    EXPECT_CALL(*M_Handler, obtainMessage_008(_,_)).WillRepeatedly(Return(ret_param_0));
    std::string name = "";
    std::string value = "";
    testObj->impl_->spConfigReceiver->onConfigDataChanged(name, value);
    delete testObj;
    EXPECT_EQ(Bypass, true);
#endif
}

/**
 *   @brief This is a test script for the ReceiverManager_onConfigDataChanged function
 *   @classID ReceiverManager
 *   @methodID onConfigDataChanged
 *   @paramList uint32_t who
 *   @priority P2
 *   @resolution_Method
 *   @test_condition
 *   @test_Coverage_Item
 *   @test_case_ID ReceiverManager_onConfigDataChanged_TC002
 *   @test_type functionality
 *   @test_objective
 *   @test_precon
 *   @test_input
 *   @test_expected_result
 *   @test_module
 *   @design_id
 */
TEST_F(ReceiverManagerTest, ReceiverManager_onConfigDataChanged_TC002){
// Please enable and make test code here!!
#if 1
    // Please check source file, make mock files and insert EXPECT_CALL for callee functions.
    ReceiverManager *testObj = new ReceiverManager();
    testObj->impl_->spConfigReceiver = new ConfigReceiverImpl(*testObj);
    sp<sl::Message> ret_param_0 = sp<sl::Message>(new sl::Message);
    EXPECT_CALL(*M_Handler, obtainMessage_008(_,_)).WillRepeatedly(Return(ret_param_0));
    std::string name = "";
    std::string value = "";
    testObj->impl_->spConfigReceiver->onConfigDataChanged(name, value);
    delete testObj;
    EXPECT_EQ(Bypass, true);
#endif
}

/**
 *   @brief This is a test script for the ReceiverManager_onConfigDataChanged function
 *   @classID ReceiverManager
 *   @methodID onConfigDataChanged
 *   @paramList uint32_t who
 *   @priority P2
 *   @resolution_Method
 *   @test_condition
 *   @test_Coverage_Item
 *   @test_case_ID ReceiverManager_onConfigDataChanged_TC003
 *   @test_type functionality
 *   @test_objective
 *   @test_precon
 *   @test_input
 *   @test_expected_result
 *   @test_module
 *   @design_id
 */
TEST_F(ReceiverManagerTest, ReceiverManager_onConfigDataChanged_TC003){
// Please enable and make test code here!!
#if 1
    // Please check source file, make mock files and insert EXPECT_CALL for callee functions.
    ReceiverManager *testObj = new ReceiverManager();
    testObj->impl_->spConfigReceiver = new ConfigReceiverImpl(*testObj);
    sp<sl::Message> ret_param_0 = sp<sl::Message>(new sl::Message);
    EXPECT_CALL(*M_Handler, obtainMessage_008(_,_)).WillRepeatedly(Return(ret_param_0));
    std::string name = "";
    std::string value = "";
    testObj->impl_->spConfigReceiver->onConfigDataChanged(name, value);
    delete testObj;
    EXPECT_EQ(Bypass, true);
#endif
}

class Base_HMIReiceiver {
public:
    virtual ~Base_HMIReiceiver(){ }
};

class Mock_HMIReiceiver : public Base_HMIReiceiver {
public:
};

Mock_HMIReiceiver *M_HMIReiceiver;

using ::testing::Return;
using ::testing::_;
using ::testing::A;
using ::testing::ReturnRef;
using ::testing::Values;
using ::testing::SetArgPointee;
using ::testing::SetArrayArgument;
using ::testing::SaveArg;
using ::testing::SaveArgPointee;
using ::testing::DoAll;
using ::testing::Args;
using ::testing::AllOf;
using ::testing::AtLeast;
using ::testing::Combine;
class receiver_managerTest : public ::testing::Test {
protected:
    virtual void SetUp(){
        M_HMIReiceiver = new Mock_HMIReiceiver();
    }
    virtual void TearDown(){
        delete M_HMIReiceiver;
    }
};


/**
 *   @brief This is a test script for the receiver_manager_HMIReiceiver function
 *   @classID receiver_manager
 *   @methodID HMIReiceiver
 *   @paramList
 *   @priority P2
 *   @resolution_Method
 *   @test_condition
 *   @test_Coverage_Item
 *   @test_case_ID receiver_managerTest_HMIReiceiver_TC001
 *   @test_type functionality
 *   @test_objective
 *   @test_precon
 *   @test_input
 *   @test_expected_result
 *   @test_module
 *   @design_id
 */
TEST_F(receiver_managerTest, receiver_manager_HMIReiceiver_TC001){
// Please enable and make test code here!!
#if 1
    // // Please check source file, make mock files and insert EXPECT_CALL for callee functions.
    ReceiverManager parent;
    HMIReiceiver testObj =  HMIReiceiver(parent);
    EXPECT_EQ(Bypass, true);
#endif
}

/**
 *   @brief This is a test script for the receiver_manager_onHMIReceived function
 *   @classID receiver_manager
 *   @methodID onHMIReceived
 *   @paramList 
 *   @priority P2
 *   @resolution_Method
 *   @test_condition
 *   @test_Coverage_Item
 *   @test_case_ID receiver_managerTest_onHMIReceived_TC001
 *   @test_type functionality
 *   @test_objective
 *   @test_precon
 *   @test_input
 *   @test_expected_result
 *   @test_module
 *   @design_id
 */
TEST_F(receiver_managerTest, receiver_manager_onHMIReceived_TC001){
// Please enable and make test code here!!
#if 1
    // // Please check source file, make mock files and insert EXPECT_CALL for callee functions.
    ReceiverManager parent;
    HMIReiceiver testObj =  HMIReiceiver(parent);
    uint32_t type = HMI_TYPE_LED;
    uint32_t index = 0x00;
    uint32_t action = 0x00;
    testObj.onHMIReceived(type, index, action);
    //delete testObj;
    EXPECT_EQ(Bypass, true);
#endif
}

/**
 *   @brief This is a test script for the receiver_manager_onHMIReceived function
 *   @classID receiver_manager
 *   @methodID onHMIReceived
 *   @paramList 
 *   @priority P2
 *   @resolution_Method
 *   @test_condition
 *   @test_Coverage_Item
 *   @test_case_ID receiver_managerTest_onHMIReceived_TC002
 *   @test_type functionality
 *   @test_objective
 *   @test_precon
 *   @test_input
 *   @test_expected_result
 *   @test_module
 *   @design_id
 */
TEST_F(receiver_managerTest, receiver_manager_onHMIReceived_TC002){
// Please enable and make test code here!!
#if 1
    // // Please check source file, make mock files and insert EXPECT_CALL for callee functions.
    ReceiverManager parent;
    HMIReiceiver testObj =  HMIReiceiver(parent);
    uint32_t type = HMI_TYPE_LED;
    uint32_t index = 0x00;
    uint32_t action = 0x00;
    testObj.onHMIReceived(type, index, action);
    //delete testObj;
    EXPECT_EQ(Bypass, true);
#endif
}

/**
 *   @brief This is a test script for the receiver_manager_onHMIReceived function
 *   @classID receiver_manager
 *   @methodID onHMIReceived
 *   @paramList 
 *   @priority P2
 *   @resolution_Method
 *   @test_condition
 *   @test_Coverage_Item
 *   @test_case_ID receiver_managerTest_onHMIReceived_TC003
 *   @test_type functionality
 *   @test_objective
 *   @test_precon
 *   @test_input
 *   @test_expected_result
 *   @test_module
 *   @design_id
 */
TEST_F(receiver_managerTest, receiver_manager_onHMIReceived_TC003){
// Please enable and make test code here!!
#if 1
    // // Please check source file, make mock files and insert EXPECT_CALL for callee functions.
    ReceiverManager parent;
    HMIReiceiver testObj =  HMIReiceiver(parent);
    uint32_t type = HMI_TYPE_LED;
    uint32_t index = 0x00;
    uint32_t action = 0x00;
    testObj.onHMIReceived(type, index, action);
    //delete testObj;
    EXPECT_EQ(Bypass, true);
#endif
}

