/*
 * test script file generated by uts
 */

#include "gtest/gtest.h"
#include "gmock/gmock.h"
#include <dlfcn.h>

#define private public
#pragma GCC push_options
#pragma GCC optimize("O1")
#pragma GCC optimize("-fno-inline")
// Include Source File for testing!!
#include "../src/utils/utils_common.cpp"
#pragma GCC pop_options
DLT_DECLARE_CONTEXT(ctxOEMCall);
using namespace oc;
using namespace cv;
using namespace android;

#include <stdio.h>
#include <services/SomeipProviderManagerService/EnumSomeipTxMsgID.h>
#include <application/Application.h>
// #include "mock/service/AppManager_mock.h"
#include "mock/service/TimerManager_mock.h"
#include "mock/service/ConfigManager_mock.h"
// #include "mock/service/ApplicationManager_mock.h"
#include "mock/service/SomeipProviderManager_mock.h"
// #include "mock/service/Buffer_mock.h"
#include "mock/service/BpBinder_mock.h"
#include "mock/service/IServiceManager_mock.h"


#ifdef WINDOWS
#include <direct.h>
#define GetCurrentDir _getcwd
#else
#include <unistd.h>
#define GetCurrentDir getcwd
#endif

//#include "mock/system/unistd_mock.h"

/*
 * Define Mock Class / function
*/
class Base_Common {
public:
    virtual ~Base_Common(){ }
};

class Mock_Common : public Base_Common {
public:
};

Mock_Common *M_Common;

using ::testing::Return;
using ::testing::_;
using ::testing::A;
using ::testing::ReturnRef;
using ::testing::Values;
using ::testing::SetArgPointee;
using ::testing::SetArrayArgument;
using ::testing::SaveArg;
using ::testing::SaveArgPointee;
using ::testing::DoAll;
using ::testing::Args;
using ::testing::AllOf;
using ::testing::AtLeast;
using ::testing::Combine;
class CommonTest : public ::testing::Test {
protected:
    virtual void SetUp(){
        M_Common = new Mock_Common();
        M_TimeManager = new MockTimeManager();
        M_ConfigManager = new MockConfigManager();
        // M_ApplicationManager = new MockApplicationManager();
        M_SomeipProviderManager = new MockSomeipProviderManager();
        // M_Buffer = new MockBuffer();
        M_IServiceManager = new MockIServiceManager();
        // M_AppManager = new MockAppManager();
    }
    virtual void TearDown(){
        delete M_Common;
        delete M_TimeManager;
        delete M_ConfigManager;
        // delete M_ApplicationManager;
        delete M_SomeipProviderManager;
        // delete M_Buffer;
        delete M_IServiceManager;
        // delete M_AppManager;
    }
};


/**
 *   @brief This is a test script for the Common_Common function
 *   @classID Common
 *   @methodID Common
 *   @paramList const uint8_t &data, const std::string &name
 *   @priority P2
 *   @resolution_Method
 *   @test_condition
 *   @test_Coverage_Item
 *   @test_case_ID CommonTest_Common_TC001
 *   @test_type functionality
 *   @test_objective
 *   @test_precon
 *   @test_input
 *   @test_expected_result
 *   @test_module
 *   @design_id
 */
TEST_F(CommonTest, Common_Common_TC001){
// Please enable and make test code here!!
#if 1
    // Please check source file, make mock files and insert EXPECT_CALL for callee functions.
    Common testObj;
    EXPECT_EQ(0, 0);
#endif
}

/**
 *   @brief This is a test script for the Common_saveToNVM function
 *   @classID Common
 *   @methodID saveToNVM
 *   @paramList const uint8_t &data, const std::string &name
 *   @priority P2
 *   @resolution_Method
 *   @test_condition
 *   @test_Coverage_Item
 *   @test_case_ID CommonTest_saveToNVM_TC001
 *   @test_type functionality
 *   @test_objective
 *   @test_precon
 *   @test_input
 *   @test_expected_result
 *   @test_module
 *   @design_id
 */
TEST_F(CommonTest, Common_saveToNVM_TC001){
// Please enable and make test code here!!
#if 1
    // Please check source file, make mock files and insert EXPECT_CALL for callee functions.
    Common testObj;
    const std::string file = "test.txt";
    run_cmd("touch " + file);
    run_cmd("chmod 777 " + file);
    char buff[FILENAME_MAX]; //create string buffer to hold path
    GetCurrentDir(buff, FILENAME_MAX);
    std::string current_working_dir(buff);
    std::string name = current_working_dir +"/" + file;
    auto ret = testObj.saveToNVM(0, name);
    EXPECT_EQ(ret, 0);
#endif
}

/**
 *   @brief This is a test script for the Common_saveToNVM function
 *   @classID Common
 *   @methodID saveToNVM
 *   @paramList const uint8_t &data, const std::string &name
 *   @priority P2
 *   @resolution_Method
 *   @test_condition
 *   @test_Coverage_Item
 *   @test_case_ID CommonTest_saveToNVM_TC002
 *   @test_type functionality
 *   @test_objective
 *   @test_precon
 *   @test_input
 *   @test_expected_result
 *   @test_module
 *   @design_id
 */
TEST_F(CommonTest, Common_saveToNVM_TC002){
// Please enable and make test code here!!
#if 1
    // Please check source file, make mock files and insert EXPECT_CALL for callee functions.
    Common testObj;
    const std::string file1 = "test1.txt";
    char buff[FILENAME_MAX]; //create string buffer to hold path
    GetCurrentDir(buff, FILENAME_MAX);
    std::string current_working_dir(buff);
    std::string name = current_working_dir +"/" + file1;

    auto ret = testObj.saveToNVM(0, name);
    const std::string file = "test.txt";
    run_cmd("rm -rf " + file);
    run_cmd("rm -rf " + file1);
    EXPECT_EQ(ret, 256);
#endif
}

/**
 *   @brief This is a test script for the Common_saveToNVM function
 *   @classID Common
 *   @methodID saveToNVM
 *   @paramList const uint8_t &data, const std::string &name
 *   @priority P2
 *   @resolution_Method
 *   @test_condition
 *   @test_Coverage_Item
 *   @test_case_ID CommonTest_saveToNVM_TC003
 *   @test_type functionality
 *   @test_objective
 *   @test_precon
 *   @test_input
 *   @test_expected_result
 *   @test_module
 *   @design_id
 */
TEST_F(CommonTest, Common_saveToNVM_TC003){
// Please enable and make test code here!!
#if 1
    // Please check source file, make mock files and insert EXPECT_CALL for callee functions.
    Common testObj;
    const std::string name = "test3.txt";
    auto ret = testObj.saveToNVM(1, name);
    run_cmd("rm -rf " + name);
    EXPECT_EQ(ret, -1);
#endif
}



/**
 *   @brief This is a test script for the Common_readFromNVM function
 *   @classID Common
 *   @methodID readFromNVM
 *   @paramList uint8_t& out, const std::string &name
 *   @priority P2
 *   @resolution_Method
 *   @test_condition
 *   @test_Coverage_Item
 *   @test_case_ID CommonTest_readFromNVM_TC001
 *   @test_type functionality
 *   @test_objective
 *   @test_precon
 *   @test_input
 *   @test_expected_result
 *   @test_module
 *   @design_id
 */
TEST_F(CommonTest, Common_readFromNVM_TC001){
// Please enable and make test code here!!
#if 1
    // Please check source file, make mock files and insert EXPECT_CALL for callee functions.
    Common testObj;
    uint8_t res = 0;
    error_t ret = testObj.readFromNVM(res, "ecall.txt");
    EXPECT_EQ(ret, -1);
#endif
}

/**
 *   @brief This is a test script for the Common_readFromNVM function
 *   @classID Common
 *   @methodID readFromNVM
 *   @paramList uint8_t& out, const std::string &name
 *   @priority P2
 *   @resolution_Method
 *   @test_condition
 *   @test_Coverage_Item
 *   @test_case_ID CommonTest_readFromNVM_TC002
 *   @test_type functionality
 *   @test_objective
 *   @test_precon
 *   @test_input
 *   @test_expected_result
 *   @test_module
 *   @design_id
 */
TEST_F(CommonTest, Common_readFromNVM_TC002){
// Please enable and make test code here!!
#if 1
    // Please check source file, make mock files and insert EXPECT_CALL for callee functions.
    Common testObj;
    uint8_t ret = 1;
    uint8_t out = 0;
    const std::string file = "ecall.txt";
    run_cmd("touch " + file);
    run_cmd("chmod 777 " + file);
    char buff[FILENAME_MAX]; //create string buffer to hold path
    GetCurrentDir(buff, FILENAME_MAX);
    std::string current_working_dir(buff);
    std::string name = current_working_dir +"/" + file;
    ret = testObj.readFromNVM(out, name);
    run_cmd("rm -rf " + file);
    EXPECT_EQ(ret, 255);
#endif
}

/**
 *   @brief This is a test script for the Common_readFromNVM function
 *   @classID Common
 *   @methodID readFromNVM
 *   @paramList uint8_t& out, const std::string &name
 *   @priority P2
 *   @resolution_Method
 *   @test_condition
 *   @test_Coverage_Item
 *   @test_case_ID CommonTest_readFromNVM_TC003
 *   @test_type functionality
 *   @test_objective
 *   @test_precon
 *   @test_input
 *   @test_expected_result
 *   @test_module
 *   @design_id
 */
TEST_F(CommonTest, Common_readFromNVM_TC003){
// Please enable and make test code here!!
#if 1
    // Please check source file, make mock files and insert EXPECT_CALL for callee functions.
    Common testObj;
    uint8_t ret = 1;
    uint8_t out = 0;
    const std::string file = "ecall.txt";
    run_cmd("touch " + file);
    run_cmd("chmod 777 " + file);
    char buff[FILENAME_MAX]; //create string buffer to hold path
    GetCurrentDir(buff, FILENAME_MAX);
    std::string current_working_dir(buff);
    std::string name = current_working_dir +"/" + file;
    ret = testObj.readFromNVM(out, name);
    run_cmd("rm -rf " + file);
    EXPECT_EQ(ret, 255);
#endif
}
/**
 *   @brief This is a test script for the Common_removeFromNVM function
 *   @classID Common
 *   @methodID removeFromNVM
 *   @paramList const std::string &name
 *   @priority P2
 *   @resolution_Method
 *   @test_condition
 *   @test_Coverage_Item
 *   @test_case_ID CommonTest_removeFromNVM_TC001
 *   @test_type functionality
 *   @test_objective
 *   @test_precon
 *   @test_input
 *   @test_expected_result
 *   @test_module
 *   @design_id
 */
TEST_F(CommonTest, Common_removeFromNVM_TC001){
// Please enable and make test code here!!
#if 1
    // Please check source file, make mock files and insert EXPECT_CALL for callee functions.
    Common testObj;
    error_t ret = testObj.removeFromNVM("ecall.txt");
    EXPECT_EQ(ret, 0);
#endif
}

/**
 *   @brief This is a test script for the Common_removeFromNVM function
 *   @classID Common
 *   @methodID removeFromNVM
 *   @paramList const std::string &name
 *   @priority P2
 *   @resolution_Method
 *   @test_condition
 *   @test_Coverage_Item
 *   @test_case_ID CommonTest_removeFromNVM_TC002
 *   @test_type functionality
 *   @test_objective
 *   @test_precon
 *   @test_input
 *   @test_expected_result
 *   @test_module
 *   @design_id
 */
TEST_F(CommonTest, Common_removeFromNVM_TC002){
// Please enable and make test code here!!
#if 1
    // Please check source file, make mock files and insert EXPECT_CALL for callee functions.
    Common testObj;
    error_t ret = testObj.removeFromNVM("ecall.txt");
    EXPECT_EQ(ret, 0);
#endif
}

/**
 *   @brief This is a test script for the Common_removeFromNVM function
 *   @classID Common
 *   @methodID removeFromNVM
 *   @paramList const std::string &name
 *   @priority P2
 *   @resolution_Method
 *   @test_condition
 *   @test_Coverage_Item
 *   @test_case_ID CommonTest_removeFromNVM_TC003
 *   @test_type functionality
 *   @test_objective
 *   @test_precon
 *   @test_input
 *   @test_expected_result
 *   @test_module
 *   @design_id
 */
TEST_F(CommonTest, Common_removeFromNVM_TC003){
// Please enable and make test code here!!
#if 1
    // Please check source file, make mock files and insert EXPECT_CALL for callee functions.
    Common testObj;
    error_t ret = testObj.removeFromNVM("ecall.txt");
    EXPECT_EQ(ret, 0);
#endif
}

/**
 *   @brief This is a test script for the Common_createNewDirectory function
 *   @classID Common
 *   @methodID createNewDirectory
 *   @paramList const std::string &path
 *   @priority P2
 *   @resolution_Method
 *   @test_condition
 *   @test_Coverage_Item
 *   @test_case_ID CommonTest_createNewDirectory_TC001
 *   @test_type functionality
 *   @test_objective
 *   @test_precon
 *   @test_input
 *   @test_expected_result
 *   @test_module
 *   @design_id
 */
TEST_F(CommonTest, Common_createNewDirectory_TC001){
// Please enable and make test code here!!
#if 0
    // Please check source file, make mock files and insert EXPECT_CALL for callee functions.
    Common testObj;
    error_t ret = testObj.createNewDirectory("/data/systemrw/oemcall/");
    EXPECT_EQ(ret, 256);
#endif
}

/**
 *   @brief This is a test script for the Common_createNewDirectory function
 *   @classID Common
 *   @methodID createNewDirectory
 *   @paramList const std::string &path
 *   @priority P2
 *   @resolution_Method
 *   @test_condition
 *   @test_Coverage_Item
 *   @test_case_ID CommonTest_createNewDirectory_TC002
 *   @test_type functionality
 *   @test_objective
 *   @test_precon
 *   @test_input
 *   @test_expected_result
 *   @test_module
 *   @design_id
 */
TEST_F(CommonTest, Common_createNewDirectory_TC002){
// Please enable and make test code here!!
#if 0
    // Please check source file, make mock files and insert EXPECT_CALL for callee functions.
    Common testObj;
    error_t ret = testObj.createNewDirectory("/data/systemrw/oemcall/");
    EXPECT_EQ(ret, 256);
#endif
}


/**
 *   @brief This is a test script for the Common_createNewDirectory function
 *   @classID Common
 *   @methodID createNewDirectory
 *   @paramList const std::string &path
 *   @priority P2
 *   @resolution_Method
 *   @test_condition
 *   @test_Coverage_Item
 *   @test_case_ID CommonTest_createNewDirectory_TC003
 *   @test_type functionality
 *   @test_objective
 *   @test_precon
 *   @test_input
 *   @test_expected_result
 *   @test_module
 *   @design_id
 */
TEST_F(CommonTest, Common_createNewDirectory_TC003){
// Please enable and make test code here!!
#if 0
    // Please check source file, make mock files and insert EXPECT_CALL for callee functions.
    Common testObj;
    error_t ret = testObj.createNewDirectory("/data/systemrw/oemcall/");
    EXPECT_EQ(ret, 256);
#endif
}


/**
 *   @brief This is a test script for the Common_getUtcTime function
 *   @classID Common
 *   @methodID getUtcTime
 *   @paramList
 *   @priority P2
 *   @resolution_Method
 *   @test_condition
 *   @test_Coverage_Item
 *   @test_case_ID CommonTest_getUtcTime_TC001
 *   @test_type functionality
 *   @test_objective
 *   @test_precon
 *   @test_input
 *   @test_expected_result
 *   @test_module
 *   @design_id
 */
TEST_F(CommonTest, Common_getUtcTime_TC001){
// Please enable and make test code here!!
#if 1
    // Please check source file, make mock files and insert EXPECT_CALL for callee functions.
    Common testObj;
    struct tm timeinfo;
    EXPECT_CALL(*M_TimeManager, getCurrentTime())
        .WillRepeatedly(Return(timeinfo));
    string ret = testObj.getUtcTime();
    string res = ret;
    EXPECT_EQ(ret, res);
#endif
}

/**
 *   @brief This is a test script for the Common_getUtcTime function
 *   @classID Common
 *   @methodID getUtcTime
 *   @paramList
 *   @priority P2
 *   @resolution_Method
 *   @test_condition
 *   @test_Coverage_Item
 *   @test_case_ID CommonTest_getUtcTime_TC002
 *   @test_type functionality
 *   @test_objective
 *   @test_precon
 *   @test_input
 *   @test_expected_result
 *   @test_module
 *   @design_id
 */
TEST_F(CommonTest, Common_getUtcTime_TC002){
// Please enable and make test code here!!
#if 1
    // Please check source file, make mock files and insert EXPECT_CALL for callee functions.
    Common testObj;
    struct tm timeinfo;
    EXPECT_CALL(*M_TimeManager, getCurrentTime())
        .WillRepeatedly(Return(timeinfo));
    string ret = testObj.getUtcTime();
    string res = ret;
    EXPECT_EQ(ret, res);
#endif
}

/**
 *   @brief This is a test script for the Common_getUtcTime function
 *   @classID Common
 *   @methodID getUtcTime
 *   @paramList
 *   @priority P2
 *   @resolution_Method
 *   @test_condition
 *   @test_Coverage_Item
 *   @test_case_ID CommonTest_getUtcTime_TC003
 *   @test_type functionality
 *   @test_objective
 *   @test_precon
 *   @test_input
 *   @test_expected_result
 *   @test_module
 *   @design_id
 */
TEST_F(CommonTest, Common_getUtcTime_TC003){
// Please enable and make test code here!!
#if 1
    // Please check source file, make mock files and insert EXPECT_CALL for callee functions.
    Common testObj;
    struct tm timeinfo;
    EXPECT_CALL(*M_TimeManager, getCurrentTime())
        .WillRepeatedly(Return(timeinfo));
    string ret = testObj.getUtcTime();
    string res = ret;
    EXPECT_EQ(ret, res);
#endif
}

/**
 *   @brief This is a test script for the Common_convertTime function
 *   @classID Common
 *   @methodID convertTime
 *   @paramList uint64_t timeStamp
 *   @priority P2
 *   @resolution_Method
 *   @test_condition
 *   @test_Coverage_Item
 *   @test_case_ID CommonTest_convertTime_TC001
 *   @test_type functionality
 *   @test_objective
 *   @test_precon
 *   @test_input
 *   @test_expected_result
 *   @test_module
 *   @design_id
 */
TEST_F(CommonTest, Common_convertTime_TC001){
// Please enable and make test code here!!
#if 1
    // Please check source file, make mock files and insert EXPECT_CALL for callee functions.
    Common testObj;
    auto ret = testObj.convertTime(234);
    EXPECT_EQ(ret, "1970-01-01T00:00:00+00:00");
#endif
}

/**
 *   @brief This is a test script for the Common_convertTime function
 *   @classID Common
 *   @methodID convertTime
 *   @paramList uint64_t timeStamp
 *   @priority P2
 *   @resolution_Method
 *   @test_condition
 *   @test_Coverage_Item
 *   @test_case_ID CommonTest_convertTime_TC002
 *   @test_type functionality
 *   @test_objective
 *   @test_precon
 *   @test_input
 *   @test_expected_result
 *   @test_module
 *   @design_id
 */
TEST_F(CommonTest, Common_convertTime_TC002){
// Please enable and make test code here!!
#if 1
    // Please check source file, make mock files and insert EXPECT_CALL for callee functions.
    Common testObj;
    auto ret = testObj.convertTime(0);
    EXPECT_EQ(ret, "1900-01-01T00:00:00+00:00");
#endif
}

// ACTION(GetConfigException)
// {
//     throw std::logic_error("Get config exception");
// }

/**
 *   @brief This is a test script for the Common_getConfig function
 *   @classID Common
 *   @methodID getConfig
 *   @paramList const std::string &name
 *   @priority P2
 *   @resolution_Method
 *   @test_condition
 *   @test_Coverage_Item
 *   @test_case_ID CommonTest_getConfig_TC001
 *   @test_type functionality
 *   @test_objective
 *   @test_precon
 *   @test_input
 *   @test_expected_result
 *   @test_module
 *   @design_id
 */
TEST_F(CommonTest, Common_getConfig_TC001){
// Please enable and make test code here!!
#if 1
    // Please check source file, make mock files and insert EXPECT_CALL for callee functions.
    Common testObj;
    EXPECT_CALL(*M_ConfigManager, instance()).WillRepeatedly(Return(new ConfigManager()));
    auto ret = testObj.getConfig("Rcall_Judge");
    EXPECT_EQ(ret, "");
#endif
}

/**
 *   @brief This is a test script for the Common_getConfig function
 *   @classID Common
 *   @methodID getConfig
 *   @paramList const std::string &name
 *   @priority P2
 *   @resolution_Method
 *   @test_condition
 *   @test_Coverage_Item
 *   @test_case_ID CommonTest_getConfig_TC002
 *   @test_type functionality
 *   @test_objective
 *   @test_precon
 *   @test_input
 *   @test_expected_result
 *   @test_module
 *   @design_id
 */
TEST_F(CommonTest, Common_getConfig_TC002){
// Please enable and make test code here!!
#if 1
    // Please check source file, make mock files and insert EXPECT_CALL for callee functions.
    Common testObj;
    // EXPECT_CALL(*M_ConfigManager, instance()).WillOnce(GetConfigException()).WillRepeatedly(Return(new ConfigManager()));
    auto ret = testObj.getConfig("Rcall_Judge");
    EXPECT_EQ(ret, "");
#endif
}

/**
 *   @brief This is a test script for the Common_getConfig function
 *   @classID Common
 *   @methodID getConfig
 *   @paramList const std::string &name
 *   @priority P2
 *   @resolution_Method
 *   @test_condition
 *   @test_Coverage_Item
 *   @test_case_ID CommonTest_getConfig_TC003
 *   @test_type functionality
 *   @test_objective
 *   @test_precon
 *   @test_input
 *   @test_expected_result
 *   @test_module
 *   @design_id
 */
TEST_F(CommonTest, Common_getConfig_TC003){
// Please enable and make test code here!!
#if 1
    // Please check source file, make mock files and insert EXPECT_CALL for callee functions.
    Common testObj;
    ConfigResponse response;
    response.result = ConfigResult::NoError;
    ConfigManager *testConfig = new ConfigManager();
    EXPECT_CALL(*M_ConfigManager, instance()).WillRepeatedly(Return(testConfig));
    EXPECT_CALL(*M_ConfigManager, getData(_,_)).WillRepeatedly(Return(response));
    auto ret = testObj.getConfig("Rcall_Judge");
    EXPECT_EQ(ret, "");
#endif
}

/**
 *   @brief This is a test script for the Common_getConfig function
 *   @classID Common
 *   @methodID getConfig
 *   @paramList const std::string &name
 *   @priority P2
 *   @resolution_Method
 *   @test_condition
 *   @test_Coverage_Item
 *   @test_case_ID CommonTest_getConfig_TC004
 *   @test_type functionality
 *   @test_objective
 *   @test_precon
 *   @test_input
 *   @test_expected_result
 *   @test_module
 *   @design_id
 */
TEST_F(CommonTest, Common_getConfig_TC004){
// Please enable and make test code here!!
#if 1
    // Please check source file, make mock files and insert EXPECT_CALL for callee functions.
    Common testObj;
    ConfigResponse response;
    response.result = ConfigResult::ObjectError;
    ConfigManager *testConfig = new ConfigManager();
    EXPECT_CALL(*M_ConfigManager, instance()).WillRepeatedly(Return(testConfig));
    EXPECT_CALL(*M_ConfigManager, getData(_,_)).WillRepeatedly(Return(response));
    auto ret = testObj.getConfig("Rcall_Judge");
    EXPECT_EQ(ret, "");
#endif
}

/**
 *   @brief This is a test script for the Common_trimWhiteSpace function
 *   @classID Common
 *   @methodID trimWhiteSpace
 *   @paramList std::string s
 *   @priority P2
 *   @resolution_Method
 *   @test_condition
 *   @test_Coverage_Item
 *   @test_case_ID CommonTest_trimWhiteSpace_TC001
 *   @test_type functionality
 *   @test_objective
 *   @test_precon
 *   @test_input
 *   @test_expected_result
 *   @test_module
 *   @design_id
 */
TEST_F(CommonTest, Common_trimWhiteSpace_TC001){
// Please enable and make test code here!!
#if 1
    // Please check source file, make mock files and insert EXPECT_CALL for callee functions.
    Common testObj;
    auto ret = testObj.trimWhiteSpace("Hello world ");
    EXPECT_EQ(ret, "Hello world");
#endif
}

/**
 *   @brief This is a test script for the Common_trimWhiteSpace function
 *   @classID Common
 *   @methodID trimWhiteSpace
 *   @paramList std::string s
 *   @priority P2
 *   @resolution_Method
 *   @test_condition
 *   @test_Coverage_Item
 *   @test_case_ID CommonTest_trimWhiteSpace_TC002
 *   @test_type functionality
 *   @test_objective
 *   @test_precon
 *   @test_input
 *   @test_expected_result
 *   @test_module
 *   @design_id
 */
TEST_F(CommonTest, Common_trimWhiteSpace_TC002){
// Please enable and make test code here!!
#if 1
    // Please check source file, make mock files and insert EXPECT_CALL for callee functions.
    Common testObj;
    auto ret = testObj.trimWhiteSpace(" 000000 00000 ");
    EXPECT_EQ(ret, "000000 00000");
#endif
}


/**
 *   @brief This is a test script for the Common_trimWhiteSpace function
 *   @classID Common
 *   @methodID trimWhiteSpace
 *   @paramList std::string s
 *   @priority P2
 *   @resolution_Method
 *   @test_condition
 *   @test_Coverage_Item
 *   @test_case_ID CommonTest_trimWhiteSpace_TC003
 *   @test_type functionality
 *   @test_objective
 *   @test_precon
 *   @test_input
 *   @test_expected_result
 *   @test_module
 *   @design_id
 */
TEST_F(CommonTest, Common_trimWhiteSpace_TC003){
// Please enable and make test code here!!
#if 1
    // Please check source file, make mock files and insert EXPECT_CALL for callee functions.
    Common testObj;
    auto ret = testObj.trimWhiteSpace("      ");
    EXPECT_EQ(ret, "");
#endif
}

/**
 *   @brief This is a test script for the Common_isFileExist function
 *   @classID Common
 *   @methodID isFileExist
 *   @paramList const std::string &path
 *   @priority P2
 *   @resolution_Method
 *   @test_condition
 *   @test_Coverage_Item
 *   @test_case_ID CommonTest_isFileExist_TC001
 *   @test_type functionality
 *   @test_objective
 *   @test_precon
 *   @test_input
 *   @test_expected_result
 *   @test_module
 *   @design_id
 */
TEST_F(CommonTest, Common_isFileExist_TC001){
// Please enable and make test code here!!
#if 1
    // Please check source file, make mock files and insert EXPECT_CALL for callee functions.
    Common testObj;
    auto ret = testObj.isFileExist("/data/systemrw/oemcall/ecall.txt");
    EXPECT_EQ(ret, 0);
#endif
}

/**
 *   @brief This is a test script for the Common_isFileExist function
 *   @classID Common
 *   @methodID isFileExist
 *   @paramList const std::string &path
 *   @priority P2
 *   @resolution_Method
 *   @test_condition
 *   @test_Coverage_Item
 *   @test_case_ID CommonTest_isFileExist_TC002
 *   @test_type functionality
 *   @test_objective
 *   @test_precon
 *   @test_input
 *   @test_expected_result
 *   @test_module
 *   @design_id
 */
TEST_F(CommonTest, Common_isFileExist_TC002){
// Please enable and make test code here!!
#if 1
    // Please check source file, make mock files and insert EXPECT_CALL for callee functions.
    Common testObj;
    auto ret = testObj.isFileExist("/data/systemrw/oemcall/ecall.txt");
    EXPECT_EQ(ret, 0);
#endif
}

/**
 *   @brief This is a test script for the Common_isFileExist function
 *   @classID Common
 *   @methodID isFileExist
 *   @paramList const std::string &path
 *   @priority P2
 *   @resolution_Method
 *   @test_condition
 *   @test_Coverage_Item
 *   @test_case_ID CommonTest_isFileExist_TC003
 *   @test_type functionality
 *   @test_objective
 *   @test_precon
 *   @test_input
 *   @test_expected_result
 *   @test_module
 *   @design_id
 */
TEST_F(CommonTest, Common_isFileExist_TC003){
// Please enable and make test code here!!
#if 1
    // Please check source file, make mock files and insert EXPECT_CALL for callee functions.
    Common testObj;
    auto ret = testObj.isFileExist("/data/systemrw/oemcall/ecall.txt");
    EXPECT_EQ(ret, 0);
#endif
}
