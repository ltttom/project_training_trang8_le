/*
 * test script file generated by uts
 */

#include "gtest/gtest.h"
#include "gmock/gmock.h"
#include <dlfcn.h>



// Include MOCK FILES!!
// #include "mock/directory/filename_mock.h"
#define private public

#pragma GCC push_options
#pragma GCC optimize("O0")
#pragma GCC optimize("-fno-inline")
// Include Source File for testing!!
#include "../src/oem_call_handler.cpp"
#pragma GCC pop_options
DLT_DECLARE_CONTEXT(ctxOEMCall);
using namespace android;
using namespace oc;

#include "mock/src/oem_call_app_if_mock.h"
/*
 * Define Mock Class / function
*/
class Base_OemCallHandler {
public:
    virtual ~Base_OemCallHandler(){ }
};

class Mock_OemCallHandler : public Base_OemCallHandler {
public:
};

Mock_OemCallHandler *M_OemCallHandler;

using ::testing::Return;
using ::testing::_;
using ::testing::A;
using ::testing::ReturnRef;
using ::testing::Values;
using ::testing::SetArgPointee;
using ::testing::SetArrayArgument;
using ::testing::SaveArg;
using ::testing::SaveArgPointee;
using ::testing::DoAll;
using ::testing::Args;
using ::testing::AllOf;
using ::testing::AtLeast;
using ::testing::Combine;
bool Bypass = true;

class OemCallHandlerTest : public ::testing::Test {
protected:
    virtual void SetUp(){
        M_OemCallHandler = new Mock_OemCallHandler();
        M_OEMCallAppIF = new MockOEMCallAppIF();
    }
    virtual void TearDown(){
        delete M_OemCallHandler;
        delete M_OEMCallAppIF;
    }
};

/**
 *   @brief This is a test script for the OemCallHandler_OemCallHandler function
 *   @classID OemCallHandler
 *   @methodID OemCallHandler
 *   @paramList const sp<sl::Message>& msg
 *   @priority P2
 *   @resolution_Method
 *   @test_condition
 *   @test_Coverage_Item
 *   @test_case_ID OemCallHandlerTest_OemCallHandler_TC001
 *   @test_type functionality
 *   @test_objective
 *   @test_precon
 *   @test_input
 *   @test_expected_result
 *   @test_module
 *   @design_id
 */
TEST_F(OemCallHandlerTest, OemCallHandler_OemCallHandler_TC001){
// Please enable and make test code here!!
#if 1
    // Please check source file, make mock files and insert EXPECT_CALL for callee functions.
    sp<sl::SLLooper> looper = new sl::SLLooper();
    MockOEMCallAppIF& app_ = *M_OEMCallAppIF;
    OemCallHandler *testObj = new OemCallHandler(looper, app_);
    EXPECT_EQ(Bypass, true);
    delete testObj;
#endif
}

/**
 *   @brief This is a test script for the OemCallHandler_handleMessage function
 *   @classID OemCallHandler
 *   @methodID handleMessage
 *   @paramList const sp<sl::Message>& msg
 *   @priority P2
 *   @resolution_Method
 *   @test_condition
 *   @test_Coverage_Item
 *   @test_case_ID OemCallHandlerTest_handleMessage_TC001
 *   @test_type functionality
 *   @test_objective
 *   @test_precon
 *   @test_input
 *   @test_expected_result
 *   @test_module
 *   @design_id
 */
TEST_F(OemCallHandlerTest, OemCallHandler_handleMessage_TC001){
// Please enable and make test code here!!
#if 1
    // Please check source file, make mock files and insert EXPECT_CALL for callee functions.
    sp<sl::SLLooper> looper = new sl::SLLooper();
    MockOEMCallAppIF& app_ = *M_OEMCallAppIF;
    OemCallHandler *testObj = new OemCallHandler(looper, app_);
    sp<sl::Message> msg = new sl::Message();
    testObj->handleMessage(msg);
    EXPECT_EQ(Bypass, true);
    delete testObj;
#endif
}


/**
 *   @brief This is a test script for the OemCallHandler_handleMessage function
 *   @classID OemCallHandler
 *   @methodID handleMessage
 *   @paramList const sp<sl::Message>& msg
 *   @priority P2
 *   @resolution_Method
 *   @test_condition
 *   @test_Coverage_Item
 *   @test_case_ID OemCallHandlerTest_handleMessage_TC002
 *   @test_type functionality
 *   @test_objective
 *   @test_precon
 *   @test_input
 *   @test_expected_result
 *   @test_module
 *   @design_id
 */
TEST_F(OemCallHandlerTest, OemCallHandler_handleMessage_TC002){
// Please enable and make test code here!!
#if 1
    // Please check source file, make mock files and insert EXPECT_CALL for callee functions.
    sp<sl::SLLooper> looper = new sl::SLLooper();
    MockOEMCallAppIF& app_ = *M_OEMCallAppIF;
    OemCallHandler *testObj = new OemCallHandler(looper, app_);
    sp<sl::Message> msg = new sl::Message();
    testObj->handleMessage(msg);
    EXPECT_EQ(Bypass, true);
    delete testObj;
#endif
}



/**
 *   @brief This is a test script for the OemCallHandler_handleMessage function
 *   @classID OemCallHandler
 *   @methodID handleMessage
 *   @paramList const sp<sl::Message>& msg
 *   @priority P2
 *   @resolution_Method
 *   @test_condition
 *   @test_Coverage_Item
 *   @test_case_ID OemCallHandlerTest_handleMessage_TC003
 *   @test_type functionality
 *   @test_objective
 *   @test_precon
 *   @test_input
 *   @test_expected_result
 *   @test_module
 *   @design_id
 */
TEST_F(OemCallHandlerTest, OemCallHandler_handleMessage_TC003){
// Please enable and make test code here!!
#if 1
    // Please check source file, make mock files and insert EXPECT_CALL for callee functions.
    sp<sl::SLLooper> looper = new sl::SLLooper();
    MockOEMCallAppIF& app_ = *M_OEMCallAppIF;
    OemCallHandler *testObj = new OemCallHandler(looper, app_);
    sp<sl::Message> msg = new sl::Message();
    testObj->handleMessage(msg);
    EXPECT_EQ(Bypass, true);
    delete testObj;
#endif
}


